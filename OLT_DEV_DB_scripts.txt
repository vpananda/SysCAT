/****** Object:  Database [OLT_DEV]    Script Date: 14-09-2023 12:54:31 ******/
CREATE DATABASE [OLT_DEV]  (EDITION = 'Basic', SERVICE_OBJECTIVE = 'Basic', MAXSIZE = 2 GB) WITH CATALOG_COLLATION = SQL_Latin1_General_CP1_CI_AS, LEDGER = OFF;
GO
ALTER DATABASE [OLT_DEV] SET COMPATIBILITY_LEVEL = 110
GO
ALTER DATABASE [OLT_DEV] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [OLT_DEV] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [OLT_DEV] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [OLT_DEV] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [OLT_DEV] SET ARITHABORT OFF 
GO
ALTER DATABASE [OLT_DEV] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [OLT_DEV] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [OLT_DEV] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [OLT_DEV] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [OLT_DEV] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [OLT_DEV] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [OLT_DEV] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [OLT_DEV] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [OLT_DEV] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [OLT_DEV] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [OLT_DEV] SET READ_COMMITTED_SNAPSHOT ON 
GO
ALTER DATABASE [OLT_DEV] SET  MULTI_USER 
GO
ALTER DATABASE [OLT_DEV] SET ENCRYPTION ON
GO
ALTER DATABASE [OLT_DEV] SET QUERY_STORE = ON
GO
ALTER DATABASE [OLT_DEV] SET QUERY_STORE (OPERATION_MODE = READ_WRITE, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 7), DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_STORAGE_SIZE_MB = 10, QUERY_CAPTURE_MODE = AUTO, SIZE_BASED_CLEANUP_MODE = AUTO, MAX_PLANS_PER_QUERY = 200, WAIT_STATS_CAPTURE_MODE = ON)
GO
/****** Object:  User [OltDevUser]    Script Date: 14-09-2023 12:54:32 ******/
CREATE USER [OltDevUser] FOR LOGIN [OltDevUser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_Split]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create FUNCTION [dbo].[FN_Split](@String varchar(MAX), @Delimiter char(1))       
returns @temptable TABLE (items varchar(MAX))       
as       
begin      
    declare @idx int       
    declare @slice varchar(8000)       

    select @idx = 1       
        if len(@String)<1 or @String is null  return       

    while @idx!= 0       
    begin       
        set @idx = charindex(@Delimiter,@String)       
        if @idx!=0       
            set @slice = left(@String,@idx - 1)       
        else       
            set @slice = @String       

        if(len(@slice)>0)  
            insert into @temptable(Items) values(@slice)       

        set @String = right(@String,len(@String) - @idx)       
        if len(@String) = 0 break       
    end   
return 
end;
GO
/****** Object:  UserDefinedFunction [dbo].[SplitStringToTable]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[SplitStringToTable]
(
@stringToSplit varchar(Max),
@delimiter char(1)
)
RETURNS @items TABLE (item varchar(8000))
AS
BEGIN
DECLARE @lastIndex int
SELECT @lastIndex = 1
DECLARE @nextIndex int
SELECT @nextIndex = 0
DECLARE @theItem VARCHAR(8000)
WHILE (@lastIndex > 0)
BEGIN
SELECT @nextIndex = CHARINDEX(@delimiter, @stringToSplit, @lastIndex + 1)
IF @lastIndex = 1 AND @nextIndex = 0
SELECT @theItem = SUBSTRING(@stringToSplit, @lastIndex, LEN(@stringToSplit))
ELSE
BEGIN
IF @lastIndex = 1 AND @nextIndex > 0
SELECT @theItem = SUBSTRING(@stringToSplit, @lastIndex, @nextIndex - 1)
ELSE
BEGIN
IF @nextIndex > 0
SELECT @theItem = SUBSTRING(@stringToSplit, @lastIndex + 1, @nextIndex - @lastIndex - 1)
IF @nextIndex = 0
SELECT @theItem = SUBSTRING(@stringToSplit, @lastIndex + 1, LEN(@stringToSplit) - @lastIndex)
END
END
IF @theItem <> ''
INSERT @items SELECT @theItem
SELECT @lastIndex = @nextIndex
END
RETURN
END
GO
/****** Object:  UserDefinedFunction [dbo].[StripHTML]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[StripHTML] (@HTMLText VARCHAR(MAX))  
RETURNS VARCHAR(MAX)  
AS  
BEGIN  
 DECLARE @Start  INT  
 DECLARE @End    INT  
 DECLARE @Length INT  
 --DECLARE @TempStr varchar(255) (this is not used)  

 SET @Start = CHARINDEX('<',@HTMLText)  
 SET @End = CHARINDEX('>',@HTMLText,CHARINDEX('<',@HTMLText))  
 SET @Length = (@End - @Start) + 1  

 WHILE @Start > 0 AND @End > 0 AND @Length > 0  
 BEGIN  
   IF (UPPER(SUBSTRING(@HTMLText, @Start, 4)) <> '<BR>') AND (UPPER(SUBSTRING(@HTMLText, @Start, 5)) <> '</BR>')  
    begin  
      SET @HTMLText = STUFF(@HTMLText,@Start,@Length,'')  
      end  
-- this ELSE and SET is important
   ELSE  
      SET @Length = 0;  

-- minus @Length here below is important
   SET @Start = CHARINDEX('<',@HTMLText, @End-@Length)  
   SET @End = CHARINDEX('>',@HTMLText,CHARINDEX('<',@HTMLText, @Start))  
-- instead of -1 it should be +1
   SET @Length = (@End - @Start) + 1  
 END  

 RETURN RTRIM(LTRIM(@HTMLText))  
END
GO
/****** Object:  UserDefinedFunction [dbo].[udf_StripHTML]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[udf_StripHTML] (@HTMLText VARCHAR(MAX))
RETURNS VARCHAR(MAX) AS
BEGIN
    DECLARE @Start INT
    DECLARE @End INT
    DECLARE @Length INT
    SET @Start = CHARINDEX('<',@HTMLText)
    SET @End = CHARINDEX('>',@HTMLText,CHARINDEX('<',@HTMLText))
    SET @Length = (@End - @Start) + 1
    WHILE @Start > 0 AND @End > 0 AND @Length > 0
    BEGIN
        SET @HTMLText = STUFF(@HTMLText,@Start,@Length,' ')
        SET @Start = CHARINDEX('<',@HTMLText)
        SET @End = CHARINDEX('>',@HTMLText,CHARINDEX('<',@HTMLText))
        SET @Length = (@End - @Start) + 1
    END
    RETURN ' ' + LTRIM(RTRIM(@HTMLText))
END
GO
/****** Object:  Table [dbo].[tb_Candidate]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_Candidate](
	[KeyID] [varchar](11) NOT NULL,
	[First_Name] [varchar](50) NULL,
	[Last_Name] [varchar](50) NULL,
	[DOB] [date] NULL,
	[Gender] [varchar](10) NULL,
	[Phone] [varchar](15) NULL,
	[Email] [nvarchar](50) NULL,
	[Temp_Address] [nvarchar](500) NULL,
	[Perm_Address] [nvarchar](500) NULL,
	[Marietal_Status] [char](3) NULL,
	[UG_Degree] [varchar](10) NULL,
	[UG_College] [varchar](450) NULL,
	[UG_Yearofpassing] [int] NULL,
	[UG_Grade] [varchar](10) NULL,
	[PG_Degree] [varchar](10) NULL,
	[PG_College] [varchar](450) NULL,
	[PG_Yearofpassing] [int] NULL,
	[PG_Grade] [varchar](10) NULL,
	[ReferalBY] [varchar](50) NULL,
	[Source] [varchar](50) NULL,
	[IsBondAccepted] [int] NULL,
	[IsAttendedPreviously] [int] NULL,
	[Createddate] [datetime] NULL,
	[SystemIP] [varchar](20) NULL,
	[Username] [nvarchar](50) NULL,
	[Password] [nvarchar](15) NULL,
	[Islocked] [int] NULL,
	[LoggedinTime] [datetime] NULL,
	[LoggedOutTime] [datetime] NULL,
	[IsAutologgedout] [int] NULL,
	[LastSavedTime] [datetime] NULL,
	[Applied_For] [varchar](50) NULL,
	[Flag] [int] NULL,
	[DIPLOMA_Degree] [varchar](50) NULL,
	[DIPLOMA_College] [varchar](500) NULL,
	[DIPLOMA_Yearofpassing] [int] NULL,
	[DIPLOMA_Grade] [varchar](50) NULL,
	[LAD] [datetime] NULL,
	[IsLevel1_Skiiped] [int] NULL,
	[Tenth_Institution] [varchar](450) NULL,
	[Tenth_Percentage] [varchar](50) NULL,
	[Tenth_YOP] [int] NULL,
	[UG_Department] [varchar](70) NULL,
	[UG_Discipline] [varchar](70) NULL,
	[PG_Department] [varchar](70) NULL,
	[PG_DESCIPLINE] [varchar](50) NULL,
	[Mail_status] [int] NULL,
	[Islogged] [int] NULL,
	[isAdmin] [bit] NULL,
	[Country_code] [nvarchar](10) NULL,
	[Id_proof] [nvarchar](50) NULL,
	[ID_NO] [nvarchar](50) NULL,
	[ID_Image] [ntext] NULL,
	[Profile_Image] [ntext] NULL,
	[start_time] [datetime] NULL,
	[end_time] [datetime] NULL,
	[Remaining_time] [int] NULL,
	[Level] [int] NULL,
	[status] [varchar](10) NULL,
	[id_date] [varchar](10) NULL,
 CONSTRAINT [PK__tb_Candi__21F5BE27F977B08A] PRIMARY KEY CLUSTERED 
(
	[KeyID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_JobPosition]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_JobPosition](
	[Key_ID] [int] IDENTITY(1,1) NOT NULL,
	[Job_Position] [varchar](100) NULL,
	[IsoptionRequired] [bit] NULL,
	[IsBondRequired] [bit] NULL,
	[FLAG] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Key_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_Subject]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_Subject](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[Subject] [varchar](20) NULL,
	[Flag] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_Subject_Result]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_Subject_Result](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[Candidate_id] [varchar](11) NULL,
	[Level] [int] NULL,
	[score] [int] NULL,
	[status] [varchar](20) NULL,
	[subject_ID] [int] NULL,
	[CreatedDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[KeyID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_SubjectLevel]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_SubjectLevel](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[AppliedFor] [varchar](20) NULL,
	[Subject_ID] [int] NULL,
	[Level] [int] NULL,
	[No_of_Question] [int] NULL,
	[CutOffMarks] [int] NULL,
	[Duration] [int] NULL,
	[IsMandatory] [int] NULL,
	[OptionalGroupName] [nvarchar](50) NULL,
	[FLAG] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[KeyID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_candiateResult]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create view [dbo].[vw_candiateResult]

as

select distinct j.Job_Position, sr.CreatedDate TestDate, c.KeyID candidateID, c.First_Name,c.Last_Name,s.Subject,sr.Level, sl.CutOffMarks, sr.score,sr.status 
from tb_Subject_Result sr 
join tb_Subject s on sr.subject_ID = s.KeyID 
join tb_Candidate c on sr.Candidate_id = c.KeyID
join tb_SubjectLevel sl on sl.Subject_ID = s.KeyID and sl.Level = sr.Level and c.Applied_For = sl.AppliedFor
join tb_JobPosition j on j.Key_ID = sl.AppliedFor
GO
/****** Object:  Table [dbo].[tb_Question]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_Question](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[Subject_ID] [int] NULL,
	[Level_ID] [int] NULL,
	[Questions] [varchar](max) NULL,
	[Option1] [varchar](500) NULL,
	[Option2] [varchar](500) NULL,
	[Option3] [varchar](500) NULL,
	[Option4] [varchar](500) NULL,
	[Answer] [varchar](500) NULL,
	[typeflag] [varchar](2) NULL,
	[FLAG] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[KeyID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_QuestionandAnswers]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vw_QuestionandAnswers]
as
select distinct s.Subject,sl.level,questions,option1, option2,option3,option4,Answer
from tb_question q
join tb_subject s on q.subject_id = s.keyid
join tb_subjectlevel sl on sl.subject_id = s.keyid and sl.level = q.level_id
GO
/****** Object:  Table [dbo].[AttendedQuestion]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AttendedQuestion](
	[Candidate_ID] [int] NULL,
	[Level1_Tab1] [int] NULL,
	[Level1_Tab2] [int] NULL,
	[Level2_Tab1] [int] NULL,
	[Level2_tab2] [int] NULL,
	[Level2_tab3] [int] NULL,
	[Level2_Tab4] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[auth_group]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[auth_group](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[name] [nvarchar](150) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [auth_group_name_a6ea08ec_uniq] UNIQUE NONCLUSTERED 
(
	[name] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[auth_group_permissions]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[auth_group_permissions](
	[id] [bigint] IDENTITY(1,1) NOT NULL,
	[group_id] [int] NOT NULL,
	[permission_id] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[auth_permission]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[auth_permission](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[name] [nvarchar](255) NOT NULL,
	[content_type_id] [int] NOT NULL,
	[codename] [nvarchar](100) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[auth_user]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[auth_user](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[password] [nvarchar](128) NOT NULL,
	[last_login] [datetimeoffset](7) NULL,
	[is_superuser] [bit] NOT NULL,
	[username] [nvarchar](150) NOT NULL,
	[first_name] [nvarchar](150) NOT NULL,
	[last_name] [nvarchar](150) NOT NULL,
	[email] [nvarchar](254) NOT NULL,
	[is_staff] [bit] NOT NULL,
	[is_active] [bit] NOT NULL,
	[date_joined] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [auth_user_username_6821ab7c_uniq] UNIQUE NONCLUSTERED 
(
	[username] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[auth_user_groups]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[auth_user_groups](
	[id] [bigint] IDENTITY(1,1) NOT NULL,
	[user_id] [int] NOT NULL,
	[group_id] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[auth_user_user_permissions]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[auth_user_user_permissions](
	[id] [bigint] IDENTITY(1,1) NOT NULL,
	[user_id] [int] NOT NULL,
	[permission_id] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[django_admin_log]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[django_admin_log](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[action_time] [datetimeoffset](7) NOT NULL,
	[object_id] [nvarchar](max) NULL,
	[object_repr] [nvarchar](200) NOT NULL,
	[action_flag] [smallint] NOT NULL,
	[change_message] [nvarchar](max) NOT NULL,
	[content_type_id] [int] NULL,
	[user_id] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[django_content_type]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[django_content_type](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[app_label] [nvarchar](100) NOT NULL,
	[model] [nvarchar](100) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[django_migrations]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[django_migrations](
	[id] [bigint] IDENTITY(1,1) NOT NULL,
	[app] [nvarchar](255) NOT NULL,
	[name] [nvarchar](255) NOT NULL,
	[applied] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[django_session]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[django_session](
	[session_key] [nvarchar](40) NOT NULL,
	[session_data] [nvarchar](max) NOT NULL,
	[expire_date] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[session_key] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Email_admin]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Email_admin](
	[keyID] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](50) NULL,
	[Email_ID] [varchar](100) NULL,
	[Password] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[keyID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Email_Content]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Email_Content](
	[keyID] [int] IDENTITY(1,1) NOT NULL,
	[subject] [varchar](500) NULL,
	[Body] [varchar](max) NULL,
	[Result_status] [varchar](200) NULL,
PRIMARY KEY CLUSTERED 
(
	[keyID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[images]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[images](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[data] [varbinary](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Messages]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Messages](
	[MessageID] [int] NULL,
	[Message] [nchar](10) NULL,
	[EmptyMessage] [nchar](10) NULL,
	[Date] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[npmreact]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[npmreact](
	[id] [int] NULL,
	[name] [varchar](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[questions_load]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[questions_load](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[Subject_ID] [int] NULL,
	[Level_ID] [int] NULL,
	[Questions] [varchar](max) NULL,
	[Option1] [varchar](max) NULL,
	[Option2] [varchar](max) NULL,
	[Option3] [varchar](max) NULL,
	[Option4] [varchar](max) NULL,
	[Answer] [varchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[KeyID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RESULT_HISTORY]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RESULT_HISTORY](
	[CANDIDATE_ID] [varchar](11) NULL,
	[QUESTION_ID] [int] NULL,
	[ANSWER] [varchar](max) NULL,
	[SCORE] [int] NULL,
	[SUBJECT_ID] [int] NULL,
	[ISATTENDED] [int] NULL,
	[LEVEL] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SourceFactTable]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SourceFactTable](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateKey] [date] NULL,
	[ProductKey] [int] NULL,
	[SalesAmount] [decimal](10, 2) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SourceTable]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SourceTable](
	[ORG_TYPE_ID] [int] NULL,
	[ORG_TYPE_CD] [varchar](50) NULL,
	[ORG_TYPE_DESC] [varchar](50) NULL,
	[ORG_TYPE_NM] [varchar](50) NULL,
	[PARENT_ORG_TYPE_NM] [varchar](50) NULL,
	[PARENT_ORG_TYPE_CD] [varchar](50) NULL,
	[CRE_DT] [date] NULL,
	[CRE_USERs] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TargetFactTable]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TargetFactTable](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateKey] [date] NULL,
	[ProductKey] [int] NULL,
	[SalesAmount] [decimal](10, 2) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[targettable]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[targettable](
	[ORG_TYPE_ID] [int] NULL,
	[ORG_TYPE_CD] [varchar](50) NULL,
	[ORG_TYPE_DESC] [varchar](50) NULL,
	[ORG_TYPE_NM] [varchar](50) NULL,
	[PARENT_ORG_TYPE_NM] [varchar](50) NULL,
	[PARENT_ORG_TYPE_CD] [varchar](50) NULL,
	[CRE_DT] [date] NULL,
	[CRE_USERs] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_Admin]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_Admin](
	[keyid] [int] IDENTITY(1,1) NOT NULL,
	[Admin_name] [varchar](20) NULL,
	[email] [varchar](30) NULL,
	[password] [varchar](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_backupcnandidate]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_backupcnandidate](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[First_Name] [varchar](50) NULL,
	[Last_Name] [varchar](50) NULL,
	[DOB] [date] NULL,
	[Gender] [varchar](10) NULL,
	[Phone] [varchar](15) NULL,
	[Email] [nvarchar](50) NULL,
	[Temp_Address] [nvarchar](500) NULL,
	[Perm_Address] [nvarchar](500) NULL,
	[Marietal_Status] [char](3) NULL,
	[UG_Degree] [varchar](10) NULL,
	[UG_College] [varchar](450) NULL,
	[UG_Yearofpassing] [int] NULL,
	[UG_Grade] [varchar](10) NULL,
	[PG_Degree] [varchar](10) NULL,
	[PG_College] [varchar](450) NULL,
	[PG_Yearofpassing] [int] NULL,
	[PG_Grade] [varchar](10) NULL,
	[ReferalBY] [varchar](50) NULL,
	[Source] [varchar](50) NULL,
	[IsBondAccepted] [int] NULL,
	[IsAttendedPreviously] [int] NULL,
	[Createddate] [datetime] NULL,
	[SystemIP] [varchar](20) NULL,
	[Username] [varchar](10) NULL,
	[Password] [varchar](10) NULL,
	[Islocked] [int] NULL,
	[LoggedinTime] [datetime] NULL,
	[LoggedOutTime] [datetime] NULL,
	[IsAutologgedout] [int] NULL,
	[LastSavedTime] [datetime] NULL,
	[Applied_For] [varchar](50) NULL,
	[Status] [int] NULL,
	[DIPLOMA_Degree] [varchar](50) NULL,
	[DIPLOMA_College] [varchar](500) NULL,
	[DIPLOMA_Yearofpassing] [int] NULL,
	[DIPLOMA_Grade] [varchar](50) NULL,
	[LAD] [datetime] NULL,
	[IsLevel1_Skiiped] [int] NULL,
	[Tenth_Institution] [varchar](450) NULL,
	[Tenth_Percentage] [varchar](50) NULL,
	[Tenth_YOP] [int] NULL,
	[UG_Department] [varchar](70) NULL,
	[UG_Discipline] [varchar](70) NULL,
	[PG_Department] [varchar](70) NULL,
	[PG_DESCIPLINE] [varchar](50) NULL,
	[Mail_status] [int] NULL,
	[Islogged] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_candidate_01062020]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_candidate_01062020](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[First_Name] [varchar](50) NULL,
	[Last_Name] [varchar](50) NULL,
	[DOB] [date] NULL,
	[Gender] [varchar](10) NULL,
	[Phone] [varchar](15) NULL,
	[Email] [nvarchar](50) NULL,
	[Temp_Address] [nvarchar](500) NULL,
	[Perm_Address] [nvarchar](500) NULL,
	[Marietal_Status] [char](3) NULL,
	[UG_Degree] [varchar](10) NULL,
	[UG_College] [varchar](450) NULL,
	[UG_Yearofpassing] [int] NULL,
	[UG_Grade] [varchar](10) NULL,
	[PG_Degree] [varchar](10) NULL,
	[PG_College] [varchar](450) NULL,
	[PG_Yearofpassing] [int] NULL,
	[PG_Grade] [varchar](10) NULL,
	[ReferalBY] [varchar](50) NULL,
	[Source] [varchar](50) NULL,
	[IsBondAccepted] [int] NULL,
	[IsAttendedPreviously] [int] NULL,
	[Createddate] [datetime] NULL,
	[SystemIP] [varchar](20) NULL,
	[Username] [varchar](10) NULL,
	[Password] [varchar](10) NULL,
	[Islocked] [int] NULL,
	[LoggedinTime] [datetime] NULL,
	[LoggedOutTime] [datetime] NULL,
	[IsAutologgedout] [int] NULL,
	[LastSavedTime] [datetime] NULL,
	[Applied_For] [varchar](50) NULL,
	[Status] [int] NULL,
	[DIPLOMA_Degree] [varchar](50) NULL,
	[DIPLOMA_College] [varchar](500) NULL,
	[DIPLOMA_Yearofpassing] [int] NULL,
	[DIPLOMA_Grade] [varchar](50) NULL,
	[LAD] [datetime] NULL,
	[IsLevel1_Skiiped] [int] NULL,
	[Tenth_Institution] [varchar](450) NULL,
	[Tenth_Percentage] [varchar](50) NULL,
	[Tenth_YOP] [int] NULL,
	[UG_Department] [varchar](70) NULL,
	[UG_Discipline] [varchar](70) NULL,
	[PG_Department] [varchar](70) NULL,
	[PG_DESCIPLINE] [varchar](50) NULL,
	[Mail_status] [int] NULL,
	[Islogged] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_candidate_bkp]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_candidate_bkp](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[First_Name] [varchar](50) NULL,
	[Last_Name] [varchar](50) NULL,
	[DOB] [datetime] NULL,
	[Gender] [varchar](10) NULL,
	[Phone] [varchar](15) NULL,
	[Email] [nvarchar](50) NULL,
	[Temp_Address] [nvarchar](500) NULL,
	[Perm_Address] [nvarchar](500) NULL,
	[Marietal_Status] [char](3) NULL,
	[UG_Degree] [varchar](10) NULL,
	[UG_College] [varchar](450) NULL,
	[UG_Yearofpassing] [int] NULL,
	[UG_Grade] [varchar](10) NULL,
	[PG_Degree] [varchar](10) NULL,
	[PG_College] [varchar](450) NULL,
	[PG_Yearofpassing] [int] NULL,
	[PG_Grade] [varchar](10) NULL,
	[ReferalBY] [varchar](50) NULL,
	[Source] [varchar](50) NULL,
	[IsBondAccepted] [int] NULL,
	[IsAttendedPreviously] [int] NULL,
	[Createddate] [datetime] NULL,
	[SystemIP] [varchar](20) NULL,
	[Username] [varchar](10) NULL,
	[Password] [varchar](10) NULL,
	[Islocked] [int] NULL,
	[LoggedinTime] [datetime] NULL,
	[LoggedOutTime] [datetime] NULL,
	[IsAutologgedout] [int] NULL,
	[LastSavedTime] [datetime] NULL,
	[Applied_For] [varchar](50) NULL,
	[Status] [int] NULL,
	[DIPLOMA_Degree] [varchar](50) NULL,
	[DIPLOMA_College] [varchar](500) NULL,
	[DIPLOMA_Yearofpassing] [int] NULL,
	[DIPLOMA_Grade] [varchar](50) NULL,
	[LAD] [datetime] NULL,
	[IsLevel1_Skiiped] [int] NULL,
	[Tenth_Institution] [varchar](450) NULL,
	[Tenth_Percentage] [varchar](50) NULL,
	[Tenth_YOP] [int] NULL,
	[UG_Department] [varchar](70) NULL,
	[UG_Discipline] [varchar](70) NULL,
	[PG_Department] [varchar](70) NULL,
	[PG_DESCIPLINE] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_discipline]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_discipline](
	[Key_ID] [int] IDENTITY(1,1) NOT NULL,
	[branch] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[Key_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_email_result]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_email_result](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[Result] [varchar](40) NULL,
PRIMARY KEY CLUSTERED 
(
	[KeyID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_graduation]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_graduation](
	[Key_ID] [int] IDENTITY(1,1) NOT NULL,
	[degree] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[Key_ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_Level]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_Level](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[Level_Name] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_question_bk_29062021]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_question_bk_29062021](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[Subject_ID] [int] NULL,
	[Level_ID] [int] NULL,
	[Questions] [varchar](max) NULL,
	[Option1] [varchar](500) NULL,
	[Option2] [varchar](500) NULL,
	[Option3] [varchar](500) NULL,
	[Option4] [varchar](500) NULL,
	[Answer] [varchar](500) NULL,
	[typeflag] [varchar](2) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_Result]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_Result](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[Candidate_id] [varchar](11) NULL,
	[Question_ID] [int] NULL,
	[Answer] [varchar](max) NULL,
	[score] [int] NULL,
	[Subject_ID] [int] NULL,
	[isattended] [int] NULL,
	[Level] [int] NULL,
	[CreatedDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[KeyID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_result_02202020]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_result_02202020](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[Candidate_id] [int] NULL,
	[Question_ID] [int] NULL,
	[Answer] [varchar](max) NULL,
	[score] [int] NULL,
	[Subject_ID] [int] NULL,
	[isattended] [int] NULL,
	[CreatedDate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_result_bk_03252020]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_result_bk_03252020](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[Candidate_id] [int] NULL,
	[Question_ID] [int] NULL,
	[Answer] [varchar](max) NULL,
	[score] [int] NULL,
	[Subject_ID] [int] NULL,
	[isattended] [int] NULL,
	[CreatedDate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_result_new]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_result_new](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[Candidate_id] [int] NULL,
	[Question_ID] [int] NULL,
	[Answer] [varchar](max) NULL,
	[score] [int] NULL,
	[Subject_ID] [int] NULL,
	[isattended] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_Result_View]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_Result_View](
	[JobID] [int] NULL,
	[JobPosition] [nvarchar](500) NULL,
	[CandidateID] [int] NULL,
	[CandidateName] [nvarchar](500) NULL,
	[ExamDate] [nvarchar](50) NULL,
	[LogggedinDate] [datetime] NULL,
	[Subject] [nvarchar](500) NULL,
	[TestLevel] [int] NULL,
	[Score] [int] NULL,
	[TestStatus] [nvarchar](100) NULL,
	[LevelSubject] [nvarchar](100) NULL,
	[Level1Result] [nvarchar](100) NULL,
	[Level2Result] [nvarchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_subject_result_03022020]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_subject_result_03022020](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[Candidate_id] [int] NULL,
	[Level] [int] NULL,
	[score] [int] NULL,
	[status] [varchar](20) NULL,
	[subject_ID] [int] NULL,
	[CreatedDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_subject_result_bkup_0316220]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_subject_result_bkup_0316220](
	[KeyID] [int] IDENTITY(1,1) NOT NULL,
	[Candidate_id] [int] NULL,
	[Level] [int] NULL,
	[score] [int] NULL,
	[status] [varchar](20) NULL,
	[subject_ID] [int] NULL,
	[CreatedDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tempQuest]    Script Date: 14-09-2023 12:54:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tempQuest](
	[Rownumber] [int] NULL,
	[QuestionID] [int] NULL,
	[Subjects] [varchar](50) NULL,
	[Subject_ID] [int] NULL,
	[Level_ID] [int] NULL,
	[Questions] [varchar](max) NULL,
	[Option1] [varchar](500) NULL,
	[Option2] [varchar](500) NULL,
	[Option3] [varchar](500) NULL,
	[Option4] [varchar](500) NULL,
	[UserID] [int] NULL,
	[Answer] [varchar](500) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Index [auth_group_permissions_group_id_b120cbf9]    Script Date: 14-09-2023 12:54:32 ******/
CREATE NONCLUSTERED INDEX [auth_group_permissions_group_id_b120cbf9] ON [dbo].[auth_group_permissions]
(
	[group_id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [auth_group_permissions_group_id_permission_id_0cd325b0_uniq]    Script Date: 14-09-2023 12:54:32 ******/
CREATE UNIQUE NONCLUSTERED INDEX [auth_group_permissions_group_id_permission_id_0cd325b0_uniq] ON [dbo].[auth_group_permissions]
(
	[group_id] ASC,
	[permission_id] ASC
)
WHERE ([group_id] IS NOT NULL AND [permission_id] IS NOT NULL)
WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [auth_group_permissions_permission_id_84c5c92e]    Script Date: 14-09-2023 12:54:32 ******/
CREATE NONCLUSTERED INDEX [auth_group_permissions_permission_id_84c5c92e] ON [dbo].[auth_group_permissions]
(
	[permission_id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [auth_permission_content_type_id_2f476e4b]    Script Date: 14-09-2023 12:54:32 ******/
CREATE NONCLUSTERED INDEX [auth_permission_content_type_id_2f476e4b] ON [dbo].[auth_permission]
(
	[content_type_id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [auth_permission_content_type_id_codename_01ab375a_uniq]    Script Date: 14-09-2023 12:54:32 ******/
CREATE UNIQUE NONCLUSTERED INDEX [auth_permission_content_type_id_codename_01ab375a_uniq] ON [dbo].[auth_permission]
(
	[content_type_id] ASC,
	[codename] ASC
)
WHERE ([content_type_id] IS NOT NULL AND [codename] IS NOT NULL)
WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [auth_user_groups_group_id_97559544]    Script Date: 14-09-2023 12:54:32 ******/
CREATE NONCLUSTERED INDEX [auth_user_groups_group_id_97559544] ON [dbo].[auth_user_groups]
(
	[group_id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [auth_user_groups_user_id_6a12ed8b]    Script Date: 14-09-2023 12:54:32 ******/
CREATE NONCLUSTERED INDEX [auth_user_groups_user_id_6a12ed8b] ON [dbo].[auth_user_groups]
(
	[user_id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [auth_user_groups_user_id_group_id_94350c0c_uniq]    Script Date: 14-09-2023 12:54:32 ******/
CREATE UNIQUE NONCLUSTERED INDEX [auth_user_groups_user_id_group_id_94350c0c_uniq] ON [dbo].[auth_user_groups]
(
	[user_id] ASC,
	[group_id] ASC
)
WHERE ([user_id] IS NOT NULL AND [group_id] IS NOT NULL)
WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [auth_user_user_permissions_permission_id_1fbb5f2c]    Script Date: 14-09-2023 12:54:32 ******/
CREATE NONCLUSTERED INDEX [auth_user_user_permissions_permission_id_1fbb5f2c] ON [dbo].[auth_user_user_permissions]
(
	[permission_id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [auth_user_user_permissions_user_id_a95ead1b]    Script Date: 14-09-2023 12:54:32 ******/
CREATE NONCLUSTERED INDEX [auth_user_user_permissions_user_id_a95ead1b] ON [dbo].[auth_user_user_permissions]
(
	[user_id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [auth_user_user_permissions_user_id_permission_id_14a6b632_uniq]    Script Date: 14-09-2023 12:54:32 ******/
CREATE UNIQUE NONCLUSTERED INDEX [auth_user_user_permissions_user_id_permission_id_14a6b632_uniq] ON [dbo].[auth_user_user_permissions]
(
	[user_id] ASC,
	[permission_id] ASC
)
WHERE ([user_id] IS NOT NULL AND [permission_id] IS NOT NULL)
WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [django_admin_log_content_type_id_c4bce8eb]    Script Date: 14-09-2023 12:54:32 ******/
CREATE NONCLUSTERED INDEX [django_admin_log_content_type_id_c4bce8eb] ON [dbo].[django_admin_log]
(
	[content_type_id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [django_admin_log_user_id_c564eba6]    Script Date: 14-09-2023 12:54:32 ******/
CREATE NONCLUSTERED INDEX [django_admin_log_user_id_c564eba6] ON [dbo].[django_admin_log]
(
	[user_id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [django_content_type_app_label_model_76bd3d3b_uniq]    Script Date: 14-09-2023 12:54:32 ******/
CREATE UNIQUE NONCLUSTERED INDEX [django_content_type_app_label_model_76bd3d3b_uniq] ON [dbo].[django_content_type]
(
	[app_label] ASC,
	[model] ASC
)
WHERE ([app_label] IS NOT NULL AND [model] IS NOT NULL)
WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [django_session_expire_date_a5c62663]    Script Date: 14-09-2023 12:54:32 ******/
CREATE NONCLUSTERED INDEX [django_session_expire_date_a5c62663] ON [dbo].[django_session]
(
	[expire_date] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [dbo].[tb_Candidate] ADD  CONSTRAINT [DF_tb_Candidate_Createddate]  DEFAULT (getdate()) FOR [Createddate]
GO
ALTER TABLE [dbo].[tb_Candidate] ADD  DEFAULT ((0)) FOR [Islocked]
GO
ALTER TABLE [dbo].[tb_Candidate] ADD  DEFAULT ((1)) FOR [Flag]
GO
ALTER TABLE [dbo].[tb_Candidate] ADD  CONSTRAINT [df_Skippedlevel1]  DEFAULT ((0)) FOR [IsLevel1_Skiiped]
GO
ALTER TABLE [dbo].[tb_Candidate] ADD  DEFAULT ((0)) FOR [isAdmin]
GO
ALTER TABLE [dbo].[tb_Candidate] ADD  DEFAULT ((0)) FOR [Level]
GO
ALTER TABLE [dbo].[tb_JobPosition] ADD  DEFAULT ((1)) FOR [FLAG]
GO
ALTER TABLE [dbo].[tb_Question] ADD  DEFAULT ((1)) FOR [FLAG]
GO
ALTER TABLE [dbo].[tb_Result] ADD  CONSTRAINT [DF_tb_Result_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[tb_Subject] ADD  DEFAULT ((1)) FOR [Flag]
GO
ALTER TABLE [dbo].[tb_Subject_Result] ADD  CONSTRAINT [DF_tb_Subject_Result_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[tb_SubjectLevel] ADD  CONSTRAINT [DF_tb_SubjectLevel_IsMandatory]  DEFAULT ((1)) FOR [IsMandatory]
GO
ALTER TABLE [dbo].[tb_SubjectLevel] ADD  DEFAULT ((1)) FOR [FLAG]
GO
ALTER TABLE [dbo].[auth_group_permissions]  WITH CHECK ADD  CONSTRAINT [auth_group_permissions_group_id_b120cbf9_fk_auth_group_id] FOREIGN KEY([group_id])
REFERENCES [dbo].[auth_group] ([id])
GO
ALTER TABLE [dbo].[auth_group_permissions] CHECK CONSTRAINT [auth_group_permissions_group_id_b120cbf9_fk_auth_group_id]
GO
ALTER TABLE [dbo].[auth_group_permissions]  WITH CHECK ADD  CONSTRAINT [auth_group_permissions_permission_id_84c5c92e_fk_auth_permission_id] FOREIGN KEY([permission_id])
REFERENCES [dbo].[auth_permission] ([id])
GO
ALTER TABLE [dbo].[auth_group_permissions] CHECK CONSTRAINT [auth_group_permissions_permission_id_84c5c92e_fk_auth_permission_id]
GO
ALTER TABLE [dbo].[auth_permission]  WITH CHECK ADD  CONSTRAINT [auth_permission_content_type_id_2f476e4b_fk_django_content_type_id] FOREIGN KEY([content_type_id])
REFERENCES [dbo].[django_content_type] ([id])
GO
ALTER TABLE [dbo].[auth_permission] CHECK CONSTRAINT [auth_permission_content_type_id_2f476e4b_fk_django_content_type_id]
GO
ALTER TABLE [dbo].[auth_user_groups]  WITH CHECK ADD  CONSTRAINT [auth_user_groups_group_id_97559544_fk_auth_group_id] FOREIGN KEY([group_id])
REFERENCES [dbo].[auth_group] ([id])
GO
ALTER TABLE [dbo].[auth_user_groups] CHECK CONSTRAINT [auth_user_groups_group_id_97559544_fk_auth_group_id]
GO
ALTER TABLE [dbo].[auth_user_groups]  WITH CHECK ADD  CONSTRAINT [auth_user_groups_user_id_6a12ed8b_fk_auth_user_id] FOREIGN KEY([user_id])
REFERENCES [dbo].[auth_user] ([id])
GO
ALTER TABLE [dbo].[auth_user_groups] CHECK CONSTRAINT [auth_user_groups_user_id_6a12ed8b_fk_auth_user_id]
GO
ALTER TABLE [dbo].[auth_user_user_permissions]  WITH CHECK ADD  CONSTRAINT [auth_user_user_permissions_permission_id_1fbb5f2c_fk_auth_permission_id] FOREIGN KEY([permission_id])
REFERENCES [dbo].[auth_permission] ([id])
GO
ALTER TABLE [dbo].[auth_user_user_permissions] CHECK CONSTRAINT [auth_user_user_permissions_permission_id_1fbb5f2c_fk_auth_permission_id]
GO
ALTER TABLE [dbo].[auth_user_user_permissions]  WITH CHECK ADD  CONSTRAINT [auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id] FOREIGN KEY([user_id])
REFERENCES [dbo].[auth_user] ([id])
GO
ALTER TABLE [dbo].[auth_user_user_permissions] CHECK CONSTRAINT [auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id]
GO
ALTER TABLE [dbo].[django_admin_log]  WITH CHECK ADD  CONSTRAINT [django_admin_log_content_type_id_c4bce8eb_fk_django_content_type_id] FOREIGN KEY([content_type_id])
REFERENCES [dbo].[django_content_type] ([id])
GO
ALTER TABLE [dbo].[django_admin_log] CHECK CONSTRAINT [django_admin_log_content_type_id_c4bce8eb_fk_django_content_type_id]
GO
ALTER TABLE [dbo].[django_admin_log]  WITH CHECK ADD  CONSTRAINT [django_admin_log_user_id_c564eba6_fk_auth_user_id] FOREIGN KEY([user_id])
REFERENCES [dbo].[auth_user] ([id])
GO
ALTER TABLE [dbo].[django_admin_log] CHECK CONSTRAINT [django_admin_log_user_id_c564eba6_fk_auth_user_id]
GO
ALTER TABLE [dbo].[tb_Result]  WITH CHECK ADD FOREIGN KEY([Question_ID])
REFERENCES [dbo].[tb_Question] ([KeyID])
GO
ALTER TABLE [dbo].[tb_Result]  WITH CHECK ADD FOREIGN KEY([Question_ID])
REFERENCES [dbo].[tb_Question] ([KeyID])
GO
ALTER TABLE [dbo].[django_admin_log]  WITH CHECK ADD  CONSTRAINT [django_admin_log_action_flag_a8637d59_check] CHECK  (([action_flag]>=(0)))
GO
ALTER TABLE [dbo].[django_admin_log] CHECK CONSTRAINT [django_admin_log_action_flag_a8637d59_check]
GO
/****** Object:  StoredProcedure [dbo].[Activate_Question]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[Activate_Question]
(
@questionid	int
)
as
begin
update [dbo].[tb_Question] set Flag=1 where KEYID=@questionid
end
GO
/****** Object:  StoredProcedure [dbo].[Activate_skill_config]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[Activate_skill_config]
(
@skillid	int
)
as
begin
update [dbo].[tb_SubjectLevel] set Flag=1 where KEYID=@skillid
end
GO
/****** Object:  StoredProcedure [dbo].[activatePosition]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[activatePosition](
@KeyID int
)
as 
begin

update tb_JobPosition set Flag=1 where Key_ID=@KeyID
select * from tb_JobPosition where Flag=0


end
GO
/****** Object:  StoredProcedure [dbo].[activateSubject]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create procedure [dbo].[activateSubject](
@KeyID int
)
as 
begin

update tb_Subject set Flag=1 where KeyID=@KeyID
select * from tb_Subject where Flag=0


end
GO
/****** Object:  StoredProcedure [dbo].[authenticate_user]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[authenticate_user]
    @username VARCHAR(255),
    @password VARCHAR(255),
    @is_valid BIT OUTPUT
AS
BEGIN
    SELECT  COUNT(*)
    FROM tb_Candidate
    WHERE username = 'santosh' AND password = '1a2p';
END;
GO
/****** Object:  StoredProcedure [dbo].[calc_no_of_questions_db]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  procedure [dbo].[calc_no_of_questions_db] (@Subject_ID int, @Level int)

as
BEGIN


select count(*) from tb_question where Subject_ID = @Subject_ID and level_id = @Level

END
GO
/****** Object:  StoredProcedure [dbo].[Candidate_result_list]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Candidate_result_list]  

	@id VARCHAR(50)


AS
BEGIN


select KeyID as CandidateID,First_Name+' ' + Last_Name as Name,
DOB,Phone,Email,b.Job_Position,Temp_Address,Perm_Address,
UG_Department,UG_Discipline,
UG_Yearofpassing,UG_College,ReferalBY,Source from 
tb_candidate a join tb_JobPosition b on a.Applied_For=b.Key_ID where KeyID in (select item from dbo.[SplitStringToTable] (@id,','))

	
END
GO
/****** Object:  StoredProcedure [dbo].[check_admin]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[check_admin] @name varchar(20)
as
BEGIN
select admin_name from tb_admin where Admin_name = @name
END
GO
/****** Object:  StoredProcedure [dbo].[check_duplicate_quest]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create  procedure [dbo].[check_duplicate_quest] 
@quest varchar(max)
As
begin 
select questions from tb_question
where questions = @quest
end
GO
/****** Object:  StoredProcedure [dbo].[check_valid_email]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE  PROCEDURE [dbo].[check_valid_email]
    @username VARCHAR(30) = NULL,
    @email VARCHAR(254) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    IF @username IS NOT NULL
    BEGIN
        SELECT keyid,username,email,password,isAdmin,First_Name FROM tb_Candidate WHERE username = @username;
    END
    ELSE IF @email IS NOT NULL
    BEGIN
        SELECT keyid,username,email,password,isAdmin,First_Name  FROM tb_Candidate WHERE email = @email;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[check_valid_id]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[check_valid_id]
    @id VARCHAR(30) = NULL
AS
    BEGIN
        SELECT keyid,username,email,password,isAdmin,First_Name FROM tb_Candidate WHERE keyid = @id;
    END
GO
/****** Object:  StoredProcedure [dbo].[checkemail]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[checkemail]
    @Email VARCHAR(100)
AS
BEGIN
    SELECT * FROM tb_Candidate WHERE Email=@Email
END
GO
/****** Object:  StoredProcedure [dbo].[Delete_Subject]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Delete_Subject] 
	-- Add the parameters for the stored procedure here
@KeyID int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	Delete From [dbo].[tb_Subject] where KeyID=@KeyID
	Select * from tb_Subject
END
GO
/****** Object:  StoredProcedure [dbo].[Deletecandidate]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  procedure [dbo].[Deletecandidate] @id varchar(11)
as
BEGIN 
update tb_candidate 
set flag = 0
where keyid = @id
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteJobPositions]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[DeleteJobPositions]
(
@jobid	int
)
as
begin
update [dbo].[tb_JobPosition] set Flag=0 where KEY_ID=@jobid
end
GO
/****** Object:  StoredProcedure [dbo].[DeleteQuestion]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[DeleteQuestion] --1728  
@Id int  
As Begin  
update  tb_Question set typeflag='I'  where KeyID=@Id    
End
GO
/****** Object:  StoredProcedure [dbo].[deleteQuestiondata]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create procedure [dbo].[deleteQuestiondata](
@KeyID int
)
as 
begin

update [tb_Question] set FLAG=0 where KeyID=@KeyID
select * from [tb_Question] where FLAG=1


end
GO
/****** Object:  StoredProcedure [dbo].[deleteSubject]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[deleteSubject](
@KeyID int
)
as 
begin

update tb_Subject set Flag=0 where KeyID=@KeyID
select * from tb_Subject where Flag=1


end
GO
/****** Object:  StoredProcedure [dbo].[deleteSubjectlevel]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[deleteSubjectlevel](
@KeyID int
)
as 
begin

update tb_SubjectLevel set Flag=0 where KeyID=@KeyID
select * from tb_SubjectLevel where Flag=1


end
GO
/****** Object:  StoredProcedure [dbo].[filterdate]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[filterdate](
@Startdate date,
@enddate date
)
as
begin
select * from Karthikdate where startdate between @Startdate  AND @enddate
end
GO
/****** Object:  StoredProcedure [dbo].[get_all_skip_level_1_users]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create procedure [dbo].[get_all_skip_level_1_users] as
BEGIN 
select keyid,first_name,last_name,username,password,Applied_For,start_time,end_time,Remaining_time 
from tb_Candidate 
where IsLevel1_Skiiped = 1
END
GO
/****** Object:  StoredProcedure [dbo].[get_all_tb_candidate]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






create  procedure [dbo].[get_all_tb_candidate]  @name varchar(30) = Null , @applied_for varchar(50) = 'All' as 
BEGIN 

SELECT @name = '%'+ RTRIM(@name) + '%';
IF (@name IS NOT NULL) and (@applied_for != 'All')
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time]  
		from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID 
	where a.flag = 1 and a.isAdmin = 0 and (a.First_Name like @name or a.last_name like @name) and b.Job_Position = @applied_for
END
ELSE IF (@name is not null) and (@applied_for = 'All')
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,[start_time],[end_time],[Remaining_time]   
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID 
	where a.flag = 1 and a.isAdmin = 0 and  (a.First_Name like @name or a.last_name like @name)
END
ELSE IF (@name is null) and (@applied_for != 'All')
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,[start_time],[end_time],[Remaining_time]   
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID 
	where  a.flag = 1 and a.isAdmin = 0 and b.Job_Position = @applied_for  
END
ELSE 
BEGIN
select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,[start_time],[end_time],[Remaining_time]   
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID 
	where a.isAdmin = 0 and a.flag = 1 
END
END
GO
/****** Object:  StoredProcedure [dbo].[get_all_unlocked_users]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [dbo].[get_all_unlocked_users] as
BEGIN 
select keyid,first_name,last_name,username,password,Applied_For,start_time,end_time,Remaining_time 
from tb_Candidate 
where Islocked = 1
END
GO
/****** Object:  StoredProcedure [dbo].[get_allsubjectkartik]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[get_allsubjectkartik]
as 
begin

select * from [tb_subject] 


end
GO
/****** Object:  StoredProcedure [dbo].[Get_Answer_Compare]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Get_Answer_Compare] --3830,'Aptitude',1 

	@candidate_id int,
	@subject varchar(50),
	@Level varchar(3)
	As

	begin
select distinct ROW_NUMBER()over(order by a.question_id) as Question_number,a.* from
(select distinct

a.CANDIDATE_ID,
cc.first_name+cc.last_name as Candidate_name,
a.QUESTION_ID,
case
when a.Answer=Option1 then 'Option-1'
when a.ANSWER=Option2 then 'Option-2'
when a.ANSWER=Option3 then 'Option-3'
when a.ANSWER=option4 then 'Option-4'
end as Candidates_option,
a.ANSWER as [Candidate answer],
case
when b.Answer=Option1 then 'Option-1'
when b.ANSWER=Option2 then 'Option-2'
when b.ANSWER=Option3 then 'Option-3'
when b.ANSWER=option4 then 'Option-4'
end as Correct_option,
b.answer as [Correct answer],
case when SCORE=1 then 'Correct' else 'wrong' end  as [status],
a.LEVEL
 from RESULT_HISTORY a 
 join [dbo].[tb_Question] b
on a.question_id=b.KeyID and a.Subject_ID=b.Subject_ID 
and a.level=b.Level_ID and a.ANSWER is not null and a.score is not null
join 
tb_Subject sb 
on a.SUBJECT_ID=sb.keyID
join tb_Candidate cc on a.candidate_id=cc.keyid
where a.candidate_id=@candidate_id
 and sb.Subject=@subject
 and a.LEVEL=@Level
 )a

 End
GO
/****** Object:  StoredProcedure [dbo].[get_appied_for_search_data]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  procedure [dbo].[get_appied_for_search_data] as
BEGIN
select DISTINCT b.Subject,b.KeyID from tb_Question a join tb_Subject b
on a.Subject_ID = b.KeyID and b.FLAG = 1 
END
GO
/****** Object:  StoredProcedure [dbo].[Get_CandiateID]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================      
-- Author:  <Author,,Name>      
-- Create date: <Create Date,,>      
-- Description: <Description,,>      
-- =============================================      
CREATE PROCEDURE [dbo].[Get_CandiateID] -- 'ss','ss','31/12/2018','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''      
 -- Add the parameters for the stored procedure here      
    @First_Name varchar(100)      
   ,@Last_Name varchar(100)      
   ,@DOB varchar(10)       
   ,@Gender varchar(10)       
   ,@Phone varchar(15)      
   ,@Email nvarchar(50)      
   ,@Temp_Address nvarchar(1000)      
   ,@Perm_Address nvarchar(1000)      
   ,@Marietal_Status char(3)      
   ,@DIPLOMA_Degree nvarchar(50)      
   ,@Tenth_Institution nvarchar(100)      
   ,@DOBTenth_Percentage nvarchar(50)      
   ,@Tenth_YOP int      
   ,@DIPLOMA_College nvarchar(500)      
   ,@DIPLOMA_Yearofpassing int      
   ,@DIPLOMA_Grade nvarchar(50)      
   ,@UG_Degree nvarchar(30)      
   ,@UG_Department nvarchar (100)      
   ,@UG_Discipline nvarchar(100)      
   ,@UG_College nvarchar(500)      
   ,@UG_Yearofpassing int      
   ,@UG_Grade nvarchar(50)      
   ,@PG_Degree nvarchar(100)      
   ,@PG_Department nvarchar(100)      
   ,@PG_College nvarchar(500)      
   ,@PG_Yearofpassing int      
   ,@PG_Grade nvarchar(100)      
   ,@PG_DESCIPLINE nvarchar(500)      
   ,@ReferalBY nvarchar(50)      
   ,@Source nvarchar(50)      
   ,@IsBondAccepted int       
   ,@IsAttendedPreviously int       
   ,@SystemIP varchar(200)      
   ,@Username nvarchar(200)      
   ,@Password varchar(20)      
   ,@Islocked int       
   ,@Applied_For nvarchar(500)      
       
AS      
BEGIN      

SET @DOB =   CONVERT(VARCHAR(10), CONVERT(date, @DOB, 105), 23) 
 -- SET NOCOUNT ON added to prevent extra result sets from      
 -- interfering with SELECT statements.      
 DECLARE @CandidateID INT      
 INSERT INTO [dbo].[tb_Candidate]      
           ([First_Name]      
           ,[Last_Name]      
           ,[DOB]      
           ,[Gender]      
           ,[Phone]      
           ,[Email]      
     ,[Temp_Address]      
           ,[Perm_Address]      
           ,[Marietal_Status]      
           ,[DIPLOMA_Degree]      
     ,[Tenth_Institution]      
           ,[Tenth_Percentage]      
           ,[Tenth_YOP]      
           ,[DIPLOMA_College]      
     ,[DIPLOMA_Yearofpassing]      
           ,[DIPLOMA_Grade]      
           ,[UG_Degree]      
           ,[UG_Department]      
     ,[UG_Discipline]      
           ,[UG_College]      
     ,[UG_Yearofpassing]      
           ,[UG_Grade]      
           ,[PG_Degree]      
           ,[PG_Department]      
     ,[PG_College]      
           ,[PG_Yearofpassing]      
           ,[PG_Grade]      
           ,[PG_DESCIPLINE]      
     ,[ReferalBY]      
     ,[Source]      
           ,[IsBondAccepted]      
     ,[IsAttendedPreviously]      
           ,[SystemIP]      
           ,[Username]      
           ,[Password]      
     ,[Islocked]      
           ,[Applied_For],    
     [Islogged])      
       
     VALUES      
           (@First_Name      
   ,@Last_Name      
   ,@DOB      
   ,@Gender      
   ,@Phone      
   ,@Email      
   ,@Temp_Address      
   ,@Perm_Address      
   ,@Marietal_Status      
   ,@DIPLOMA_Degree      
   ,@Tenth_Institution      
   ,@DOBTenth_Percentage      
   ,@Tenth_YOP      
   ,@DIPLOMA_College      
   ,@DIPLOMA_Yearofpassing      
   ,@DIPLOMA_Grade      
   ,@UG_Degree      
   ,@UG_Department      
   ,@UG_Discipline      
   ,@UG_College      
   ,@UG_Yearofpassing      
   ,@UG_Grade      
   ,@PG_Degree      
   ,@PG_Department      
   ,@PG_College      
   ,@PG_Yearofpassing      
   ,@PG_Grade      
   ,@PG_DESCIPLINE      
   ,@ReferalBY      
   ,@Source      
   ,@IsBondAccepted      
   ,@IsAttendedPreviously      
   ,@SystemIP      
   ,@Username      
   ,@Password      
   ,@Islocked      
   ,@Applied_For,0)      
      
 SET @CandidateID = SCOPE_IDENTITY()      
 select  @CandidateID as CandidateID      
      
 Return @CandidateID      
      
 --Create table #temp      
 --(      
 --CandidateID int      
 --)      
        
 -- insert into #Temp (CandidateID) values(@CandidateID)      
      
 --select CandidateID from #temp      
      
      
      
      
       
END
GO
/****** Object:  StoredProcedure [dbo].[get_candidate_applied_job_details]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




create  procedure   [dbo].[get_candidate_applied_job_details]
@level int,
@job_position int as
BEGIN 
SELECT b.KeyID,a.Job_Position, c.subject, b.level, b.no_of_question, 
b.cutoffmarks, b.duration,a.Key_ID as job_id,c.KeyID as sub_id,b.FLAG as active
--,c.Subject,e.Level_ID,e.Questions,e.Option1,e.Option2,e.Option3,e.Option4,e.Answer,e.FLAG
, (SELECT sum(Duration)          
    FROM [dbo].[tb_SubjectLevel] SL          
    JOIN tb_Subject S ON SL.Subject_ID = S.KeyID     
	JOIN tb_JobPosition J ON SL.AppliedFor = J.Key_ID
    WHERE AppliedFor = @job_position       
     AND SL.LEVEL = @level  and   SL.flag = 1 and J.FLAG = 1 and S.Flag = 1      
    GROUP BY SL.AppliedFor          
     ,SL.LEVEL          
    ) AS Totaltime
FROM [tb_JobPosition] a
INNER JOIN [tb_SubjectLevel] b
ON a.Key_ID = b.AppliedFor
INNer join [dbo].[tb_Subject] c
on b.Subject_ID = c.KeyID
--join 
--tb_Question e 
--on e.Subject_ID = c.KeyID
WHERE b.FLAG = 1 and a.FLAG = 1 and c.Flag = 1 and  b.level = @level and a.Key_ID = @job_position;
END
GO
/****** Object:  StoredProcedure [dbo].[get_candidate_data_by_id]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create  procedure [dbo].[get_candidate_data_by_id] @keyid varchar(11)
as 
BEGIN 
select * from tb_Candidate a join tb_JobPosition b 
on a.Applied_For = b.Key_ID  
where a.KeyID = @keyid
END
GO
/****** Object:  StoredProcedure [dbo].[Get_Candidate_name]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Get_Candidate_name]
	@Candidateid int
AS
BEGIN
	
	select first_name+Last_name as Candidate_name from tb_candidate where keyID=@Candidateid

END
GO
/****** Object:  StoredProcedure [dbo].[get_data_dashboard]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create  procedure [dbo].[get_data_dashboard] as 
BEGIN
select 
(select count(keyid) as total_Registerd from tb_Candidate where flag = 1 and isAdmin =0) as total_Registerd,
(select count(a.Key_ID) as totalexam FROM [tb_JobPosition] a
INNER JOIN [tb_SubjectLevel] b
ON a.Key_ID = b.AppliedFor
INNer join [dbo].[tb_Subject] c
on b.Subject_ID = c.KeyID
where a.flag = 1 and c.flag = 1) as totalexam,
(select count(a.KeyID) as total_questions from [dbo].[tb_Question] a left join [dbo].[tb_Subject] b
on a.Subject_ID = b.KeyID
where b.Flag =1 ) as total_questions
end
GO
/****** Object:  StoredProcedure [dbo].[get_data_tb_candidate]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






create  procedure [dbo].[get_data_tb_candidate]  @name varchar(30) = Null , @applied_for varchar(50) = 'All' as 
BEGIN 

SELECT @name = '%'+ RTRIM(@name) + '%';
IF (@name IS NOT NULL) and (@applied_for != 'All')
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 and (a.First_Name like @name or a.last_name like @name) and b.Job_Position = @applied_for
END
ELSE IF (@name is not null) and (@applied_for = 'All')
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	where a.flag = 1 and a.isAdmin = 0 and  
	(a.First_Name like @name or a.last_name like @name)
END
ELSE IF (@name is null) and (@applied_for != 'All')
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	where  a.isAdmin = 0 and  a.flag = 1 and b.Job_Position = @applied_for 
END
ELSE 
BEGIN
select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where  a.isAdmin = 0 and a.flag = 1 
END
END
GO
/****** Object:  StoredProcedure [dbo].[get_data_tb_candidate_av]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  procedure [dbo].[get_data_tb_candidate_av]
@name varchar(30) = '' , 
@applied_for varchar(50) = 'All' ,
@start_date date = NUll,
@end_date date = NULL
as 
BEGIN 

SELECT @name = '%'+ RTRIM(@name) + '%';
select a.keyid,a.First_Name,a.last_name, a.First_Name +' ' + a.last_name candidateName,  a.Username,a.Password,b.Job_Position ,convert(varchar , a.Createddate, 103) AS Createddate,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
    from tb_candidate a
    join tb_JobPosition b on a.Applied_For = b.Key_ID
    WHERE a.flag = 1 and a.isAdmin = 0 
    and (a.First_Name +' ' + a.last_name like @name   or @name is null  or ltrim(rtrim(@name)) = '')
    and (b.Job_Position = @applied_for or @applied_for ='All')
    and (CAST(Createddate AS date) >= @start_date or @start_date is null)
    and (CAST(Createddate AS date) <= @end_date or @end_date is null ) 

     
END
GO
/****** Object:  StoredProcedure [dbo].[get_data_tb_candidate_av_1]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[get_data_tb_candidate_av_1]
	@name varchar(30) = '', 
	@applied_for varchar(50) = 'All',
	@start_date date = NULL,
	@end_date date = NULL
AS 
BEGIN 
	DECLARE @default_start_date date, @default_end_date date;

	-- If start_date and end_date are not provided, set them to the start and end of the current month
	IF @start_date IS NULL AND @end_date IS NULL
	BEGIN
		SET @default_start_date = DATEFROMPARTS(YEAR(GETDATE()), MONTH(GETDATE()), 1);
		SET @default_end_date = cast(getdate() as date);
	END
	ELSE
	BEGIN
		SET @default_start_date = @start_date;
		SET @default_end_date = @end_date;
	END

	SELECT @name = '%' + RTRIM(@name) + '%';

	SELECT 
		a.keyid,
		a.First_Name,
		a.last_name,
		a.First_Name + ' ' + a.last_name candidateName,
		a.Username,
		a.Password,
		b.Job_Position,
		a.[start_time],
		a.[end_time],
		a.[Remaining_time],
		a.[Islocked],
		a.[IsLevel1_Skiiped]
	FROM 
		tb_candidate a
		INNER JOIN tb_JobPosition b ON a.Applied_For = b.Key_ID
	WHERE 
		a.flag = 1 
		AND a.isAdmin = 0 
		AND (a.First_Name + ' ' + a.last_name LIKE @name OR @name IS NULL OR LTRIM(RTRIM(@name)) = '')
		AND (b.Job_Position = @applied_for OR @applied_for = 'All')
		AND (CAST(Createddate AS date) >= @default_start_date)
		AND (CAST(Createddate AS date) <= @default_end_date) 
END
GO
/****** Object:  StoredProcedure [dbo].[get_data_tb_candidate_karthik]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  procedure [dbo].[get_data_tb_candidate_karthik]
@name varchar(30) = Null , 
@applied_for varchar(50) = 'All' ,
@start_date date = NUll,
@end_date date = NULL
as 
BEGIN 

SELECT @name = '%'+ RTRIM(@name) + '%';
IF (@name is null) AND (@applied_for = 'All') AND (@start_date is NULL) AND (@end_date is NULL)
BEGIN

	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 
END

-------------------------------------------------------------------------------------------------------

ELSE IF (@name is NOT null) AND (@applied_for = 'All') AND (@start_date is NULL) AND (@end_date is NULL)
BEGIN

	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 and (a.First_Name like @name or a.last_name like @name) 
END

ELSE IF (@name is NOT null) AND (@applied_for != 'All') AND (@start_date is NULL) AND (@end_date is NULL)
BEGIN

	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 and (a.First_Name like @name or a.last_name like @name) and b.Job_Position = @applied_for
END
--------
ELSE IF (@name is NOT null) AND (@applied_for = 'All') AND (@start_date is NOT NULL) AND (@end_date is NULL)
BEGIN

	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 and (a.First_Name like @name or a.last_name like @name) and (CAST(Createddate AS date) >= @start_date)
END

-------
ELSE IF (@name is NOT null) AND (@applied_for = 'All') AND (@start_date is NULL) AND (@end_date is Not NULL)
BEGIN

	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 and (a.First_Name like @name or a.last_name like @name) and (CAST(Createddate AS date) <=@end_date)
END

ELSE IF (@name is NOT null) AND (@applied_for != 'All') AND (@start_date is NULL) AND (@end_date is Not NULL)
BEGIN

	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 and (a.First_Name like @name or a.last_name like @name) and  b.Job_Position = @applied_for and (CAST(Createddate AS date) <=@end_date)
END

ELSE IF (@name is NOT null) AND (@applied_for != 'All') AND (@start_date is Not NULL) AND (@end_date is  NULL)
BEGIN

	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 and (a.First_Name like @name or a.last_name like @name) and  b.Job_Position = @applied_for and (CAST(Createddate AS date) >=@start_date)
END

-------------------------------------------------------------------------------------------------------------------------------------------
ELSE IF (@name is null) AND (@applied_for != 'All') AND (@start_date is NULL) AND (@end_date is NULL)
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 and  b.Job_Position = @applied_for
END

ELSE IF (@name is  null) AND (@applied_for != 'All') AND (@start_date is NOT NULL) AND (@end_date is NULL)
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 and  b.Job_Position = @applied_for and (CAST(Createddate AS date) >= @start_date)
END

----------------------------------------------------------------------------------------------------------------------------------
ELSE IF (@name is null) AND (@applied_for = 'All') AND (@start_date is NOT null) AND (@end_date is NULL)
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0  and  ( CAST(Createddate AS date) >= @start_date AND CAST(Createddate AS date) <= GETDATE() )
END

ELSE IF (@name is null) AND (@applied_for = 'All') AND (@start_date is NOT null) AND (@end_date is not  NULL)
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0  and  ( CAST(Createddate AS date) >= @start_date AND CAST(Createddate AS date) <= @end_date )
END

-----------------------------------------------------------------------------------------------------------
ELSE IF (@name is null) AND (@applied_for = 'All') AND (@start_date is null) AND (@end_date is NOT null)
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0  and  ( CAST(Createddate AS date) >= '1990-01-01' AND CAST(Createddate AS date) <= @end_date )
END

ELSE IF (@name is null) AND (@applied_for != 'All') AND (@start_date is null) AND (@end_date is NOT null)
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 and  b.Job_Position = @applied_for and  ( CAST(Createddate AS date) >= '1990-01-01' AND CAST(Createddate AS date) <= @end_date )
END

ELSE IF (@name is null) AND (@applied_for != 'All') AND (@start_date is Not null) AND (@end_date is NOT null)
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 and  b.Job_Position = @applied_for and  ( CAST(Createddate AS date) >= @start_date AND CAST(Createddate AS date) <= @end_date )
END

----------------------------------------------------------------------------------------------------------------

ELSE IF (@name is not null) AND (@applied_for != 'All') AND (@start_date is Not null) AND (@end_date is NOT null)
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 and  b.Job_Position = @applied_for and (a.First_Name like @name or a.last_name like @name)  and  ( CAST(Createddate AS date) >= @start_date AND CAST(Createddate AS date) <= @end_date )
END
ELSE IF (@name is not null) AND (@applied_for = 'All') AND (@start_date is Not null) AND (@end_date is NOT null)
BEGIN
	select a.keyid,a.First_Name,a.last_name,a.Username,a.Password,b.Job_Position ,a.[start_time],a.[end_time],a.[Remaining_time],a.[Islocked] ,a.[IsLevel1_Skiiped]
	from tb_candidate a
	join tb_JobPosition b on a.Applied_For = b.Key_ID
	
	where a.flag = 1 and a.isAdmin = 0 and (a.First_Name like @name or a.last_name like @name)  and  ( CAST(Createddate AS date) >= @start_date AND CAST(Createddate AS date) <= @end_date )
END
END
GO
/****** Object:  StoredProcedure [dbo].[get_details_for_exams_questions]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create  procedure [dbo].[get_details_for_exams_questions] (@jobposition varchar(50), @level int )
as 
BEGIN 

SELECT  c.subject, b.no_of_question
FROM [tb_JobPosition] a
INNER JOIN [tb_SubjectLevel] b
ON a.Key_ID = b.AppliedFor
INNer join [dbo].[tb_Subject] c
on b.Subject_ID = c.KeyID
WHERE a.Job_Position =@jobposition and b.Level =  @level and a.flag = 1 and b.flag = 1 and c.flag = 1 ;
END
GO
/****** Object:  StoredProcedure [dbo].[Get_Email_Admin]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Get_Email_Admin]
	
AS
BEGIN
	
	select * from [dbo].[Email_admin]

END
GO
/****** Object:  StoredProcedure [dbo].[Get_Email_Content]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Get_Email_Content]
	
AS
BEGIN
	
	select * from [dbo].[Email_Content]


END
GO
/****** Object:  StoredProcedure [dbo].[get_pass_or_fail_candidate]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




create  procedure [dbo].[get_pass_or_fail_candidate] @applied_for int,@candidate_id varchar(11),@level int
as
BEGIN

 SELECT distinct  R.Candidate_id,c.First_Name, q.Level_ID LEvel,  
  Sum(R.score) Score ,   
  CASE WHEN  Sum(R.score) >= Sl.CutOffMarks THEN 'PASS' ELSE 'FAIL'   
  END Status  
  ,s.Subject , J.Job_Position,sl.No_of_Question
 from (
 Select distinct Candidate_id,Question_ID, score,Subject_ID,isattended from  [RESULT_HISTORY] where Candidate_id = @candidate_id 
 ) R
 JOIN tb_question Q on R.Question_id = Q.keyid
 JOIN tb_subjectLevel SL on R.subject_id = SL.Subject_id and Sl.AppliedFor = @applied_for  and Level = @level
 join tb_subject s on s.KeyID = sl.Subject_ID 
 join tb_JobPosition j on j.Key_ID = sl.AppliedFor 
 join tb_candidate c on c.KeyID = R.Candidate_id
 where q.level_id = @level
 group by candidate_id,s.Subject,CutOffMarks, q.LEvel_ID,J.Job_Position ,c.First_Name,sl.No_of_Question

 END
GO
/****** Object:  StoredProcedure [dbo].[Get_QuestionAnswer_details_forSubject]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


    
    
-- =============================================              
-- Author:  <Author,,Name>              
-- Create date: <Create Date,,>              
-- Description: <Description,,>              
-- [Get_QuestionAnswer_details_forSubject] 47,2,'23'            
-- =============================================              
CREATE  PROCEDURE   [dbo].[Get_QuestionAnswer_details_forSubject]   -- 3,1
 -- Add the parameters for the stored procedure here              
 @Subject VARCHAR(20)          
 ,@Level INT          
 ,@Optional VARCHAR(50) = ''          
AS          
BEGIN          
 -- SET NOCOUNT ON added to prevent extra result sets from              
 -- interfering with SELECT statements.              
 IF (@Level = 1)          
 BEGIN          
  SELECT  SL.AppliedFor          
   , S.[Subject]          
   ,SL.LEVEL          
   ,SL.No_of_Question          
   ,SL.CutOffMarks          
   ,SL.Duration 
   ,J.Job_Position
   ,(          
    SELECT sum(Duration)          
    FROM [dbo].[tb_SubjectLevel] SL          
    JOIN tb_Subject S ON SL.Subject_ID = S.KeyID     
	JOIN tb_JobPosition J ON SL.AppliedFor = J.Key_ID
    WHERE AppliedFor = (2)          
     AND SL.LEVEL = 1     and SL.FLAG = 1 and S.Flag = 1 and J.FLAG = 1         
    GROUP BY SL.AppliedFor          
     ,SL.LEVEL          
    ) AS Totaltime          
  FROM [dbo].[tb_SubjectLevel] SL          
  JOIN tb_Subject S ON SL.Subject_ID = S.KeyID    
  JOIN tb_JobPosition J ON SL.AppliedFor = J.Key_ID
  WHERE SL.AppliedFor = (2)          
   AND SL.LEVEL = 1       and SL.FLAG = 1 and S.Flag = 1 and J.FLAG = 1       
   --AND sl.IsMandatory = 1          
 END          
          
 IF (@Level = 2)          
 BEGIN          
  DECLARE @TotalTime INT = 0          
 Select @TotalTime = Sum(tt) from (          
   SELECT  sum(duration) tt          
    FROM [dbo].[tb_SubjectLevel] SL          
  JOIN tb_Subject S ON SL.Subject_ID = S.KeyID   
  JOIN tb_JobPosition J ON SL.AppliedFor = J.Key_ID
  WHERE AppliedFor = (2)          
   AND SL.LEVEL = 2      and SL.FLAG = 1 and S.Flag = 1 and J.FLAG = 1    
   AND sl.IsMandatory = 1         
            
  UNION  ALL        
            
  SELECT  sum(duration)tt          
              
  FROM [dbo].[tb_SubjectLevel] SL          
  JOIN tb_Subject S ON SL.Subject_ID = S.KeyID
  JOIN tb_JobPosition J ON SL.AppliedFor = J.Key_ID
  WHERE s.KeyID IN (          
    SELECT items          
    FROM fn_split(@Optional, ',')          
    )          
   AND SL.LEVEL = 2          
   AND SL.AppliedFor = 2     and SL.FLAG = 1 and S.Flag = 1 and J.FLAG = 1         
   ) A          
          
SELECT  AppliedFor          
   , [Subject]          
   , LEVEL          
   , No_of_Question          
   , CutOffMarks          
   , Duration 
   ,Job_Position
   ,@TotalTime TotalTime          
   FROM (          
  SELECT SL.AppliedFor          
   ,S.[Subject]          
   ,SL.LEVEL          
   ,SL.No_of_Question          
   ,SL.CutOffMarks
   ,SL.Duration   
   ,J.Job_Position
              
  FROM [dbo].[tb_SubjectLevel] SL          
  JOIN tb_Subject S ON SL.Subject_ID = S.KeyID 
  JOIN tb_JobPosition J ON SL.AppliedFor = J.Key_ID
  WHERE AppliedFor = (2)     and SL.FLAG = 1 and S.Flag = 1 and J.FLAG = 1         
   AND SL.LEVEL = 2          
   AND sl.IsMandatory = 1          
            
  UNION     ALL     
            
  SELECT SL.AppliedFor          
   ,S.[Subject]          
   ,SL.LEVEL          
   ,SL.No_of_Question          
   ,SL.CutOffMarks
   ,SL.Duration 
   ,J.Job_Position
              
  FROM [dbo].[tb_SubjectLevel] SL          
  JOIN tb_Subject S ON SL.Subject_ID = S.KeyID  
  JOIN tb_JobPosition J ON SL.AppliedFor = J.Key_ID
  WHERE s.KeyID IN (          
    SELECT items          
    FROM fn_split(@Optional, ',')          
    )          
   AND SL.LEVEL = 2          
   AND SL.AppliedFor = 2    and SL.FLAG = 1 and S.Flag = 1 and J.FLAG = 1          
   ) A          
 END          
END
GO
/****** Object:  StoredProcedure [dbo].[Get_QuestionAnswer_details_forSubject_result]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Get_QuestionAnswer_details_forSubject_result]  --'DA Trainee',1
	-- Add the parameters for the stored procedure here
	@Subject varchar(20),
	@Level int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	if(@Level = 1)
	BEGIN
	
	select SL.AppliedFor,S.[Subject],SL.level,SL.No_of_Question,SL.CutOffMarks,SL.Duration,(select sum(Duration) 
	 from [dbo].[tb_SubjectLevel] SL 
	join tb_Subject S on SL.Subject_ID=S.KeyID 
	where AppliedFor= (select Key_ID from tb_JobPosition where Job_Position=@Subject) and SL.Level=@Level 
	group by SL.AppliedFor,SL.level) as Totaltime
	from [dbo].[tb_SubjectLevel] SL 
	join tb_Subject S on SL.Subject_ID=S.KeyID where AppliedFor=(select Key_ID from tb_JobPosition where Job_Position=@Subject) and SL.Level=@Level 

	END

	IF(@Level = 2)
	BEGIN

	select SL.AppliedFor,S.[Subject],SL.level,SL.No_of_Question,SL.CutOffMarks,SL.Duration,(select sum(Duration)  from [dbo].[tb_SubjectLevel] SL 
	join tb_Subject S on SL.Subject_ID=S.KeyID where AppliedFor= (select Key_ID from tb_JobPosition where Job_Position=@Subject) and SL.Level=@Level 
	group by SL.AppliedFor,SL.level) as Totaltime
	from [dbo].[tb_SubjectLevel] SL 
	join tb_Subject S on SL.Subject_ID=S.KeyID where AppliedFor=(select Key_ID from tb_JobPosition where Job_Position=@Subject) and SL.Level=@Level 

	END

	
END
GO
/****** Object:  StoredProcedure [dbo].[Get_QuestionAnswer_forSubject]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================                
-- Author:  <Author,,Anbazhagan.S>                
-- Create date: <Create Date,,>                
-- Description: <Description,,>                
--  [Get_QuestionAnswer_forSubject] 'Aptitude',8,1,4106                  
-- =============================================                
CREATE PROCEDURE [dbo].[Get_QuestionAnswer_forSubject]  --'Aptitude',8,1,4106           
 -- Add the parameters for the stored procedure here                
 @Subject VARCHAR(200)            
 ,@No_of_Question INT            
 ,@level INT            
 ,@userID INT            
AS            
BEGIN             
 -- SET NOCOUNT ON added to prevent extra result sets from                
 -- interfering with SELECT statements.                
 SET FMTONLY OFF       
             
DECLARE @tblTempQuest    Table(       
  Rownumber int,                
  QuestionID int,                
  Subjects varchar(50),                
  Subject_ID int,                
  Level_ID int,                
  Questions varchar(max),                
  Option1 varchar(500),                
  Option2 varchar(500),                
  Option3 varchar(500),                
  Option4 varchar(500),                
  UserID int,                
  Answer varchar(500)                
 )        ;        
             
 INSERT INTO @tblTempQuest          
 SELECT TOP (@No_of_Question) Rownumber            
  ,keyID_Q            
  ,sub            
  ,keyID_S            
  ,Level_ID            
  ,Questions            
  ,Option1            
  ,Option2            
  ,Option3            
  ,Option4            
  ,usr_ID            
  ,Answer            
 FROM (            
  SELECT Row_Number() OVER (            
    ORDER BY Q.KeyID            
    ) AS Rownumber            
   ,Q.KeyID AS keyID_Q            
   ,S.[Subject] AS sub            
   ,S.KeyID keyID_S            
   ,Q.Level_ID            
   ,Q.Questions            
   ,Q.Option1            
   ,Q.Option2            
   ,Q.Option3            
   ,Q.Option4            
   ,@userID usr_ID            
   ,Q.Answer Answer            
   ,NEWID() AS new            
  FROM tb_Subject S            
  JOIN (            
   SELECT *            
   FROM tb_Question            
   WHERE typeflag = 'S'            
    AND questions NOT LIKE '%<a%'            
   ) Q ON S.KeyID = Q.Subject_ID            
  --left join [tb_Result] R on R.Question_ID=Q.KeyID                  
  WHERE s.Subject = @Subject            
   AND Q.Level_ID = @level            
  ) TEMP            
 --and Q.Questions like '%<br%'                
 ORDER BY TEMP.new            
            
 --  select * from @tblTempQuest      
 INSERT INTO tb_Result (            
  Candidate_Id            
  ,Question_ID            
  ,Subject_ID            
  ,IsAttended            
  )            
 SELECT UserID            
  ,QuestionID            
  ,Subject_ID            
  ,0            
 FROM @tblTempQuest           
            
          
             
 --  where Rownumber <= @No_of_Question                
 SELECT Rownumber            
  ,QuestionID            
  ,Subjects            
  ,Subject_ID            
  ,Level_ID            
  ,Questions            
  ,Option1            
  ,Option2            
  ,Option3            
  ,Option4            
  ,UserID            
  ,Answer            
 FROM (            
  SELECT Rownumber            
   ,QuestionID            
   ,Subjects            
   ,Subject_ID            
   ,Level_ID            
   ,Questions            
   ,Option1            
   ,Option2            
   ,Option3            
   ,Option4            
   ,UserID            
   ,Answer            
   ,newid() AS newww            
  FROM @tblTempQuest            
  ) a            
  --where Rownumber <= @No_of_Question                 
SET NOCOUNT OFF            
SET FMTONLY off    
END
GO
/****** Object:  StoredProcedure [dbo].[Get_QuestionAnswer_forSubject_test]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Get_QuestionAnswer_forSubject_test] --'Aptitude',8,1,3801
	-- Add the parameters for the stored procedure here
	@Subject varchar(20),
	@No_of_Question int,
	@level int ,
	@userID int
AS
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	IF OBJECT_ID('tempdb..#tempQuest') IS NOT NULL
    DROP TABLE #tempQuest
	SET FMTONLY OFF;

	
	create table #tempQuest
	(
	Rownumber int,
	QuestionID int,
	Subjects varchar(50),
	Subject_ID int,
	Level_ID int,
	Questions varchar(max),
	Option1 varchar(500),
	Option2 varchar(500),
	Option3 varchar(500),
	Option4 varchar(500),
	UserID int,
	Answer varchar(500),
	
	)
	

	Insert into #tempQuest	
	select top (@No_of_Question) Rownumber,keyID_Q,sub,keyID_S,Level_ID,Questions,Option1,Option2,Option3,Option4,usr_ID,Answer from 
	(SELECT Row_Number() over (order by Q.KeyID) as Rownumber,Q.KeyID as keyID_Q, S.[Subject] as sub,S.KeyID keyID_S,Q.Level_ID,
	 Q.Questions,Q.Option1,Q.Option2,Q.Option3,Q.Option4 ,@userID usr_ID,Q.Answer Answer,NEWID()as new
	from  tb_Subject S
	join (select * from tb_Question where typeflag='S' and questions not like '%<a%') Q on S.KeyID=Q.Subject_ID
	--left join [tb_Result] R on R.Question_ID=Q.KeyID  
	where s.Subject=@Subject and Q.Level_ID=@level)temp
	--and Q.Questions like '%<br%'
ORDER BY temp.new 




insert into tb_Result (Candidate_Id,Question_ID,Subject_ID,IsAttended)
select  UserID
      ,QuestionID
      ,Subject_ID
	  ,0
	  from #tempQuest 
	--  where Rownumber <= @No_of_Question
	


	select  Rownumber ,
	QuestionID ,
	Subjects ,
	Subject_ID ,
	Level_ID ,
	Questions,
	Option1 ,
	Option2 ,
	Option3 ,
	Option4 ,
	UserID ,
	Answer from (select  Rownumber ,
	QuestionID ,
	Subjects ,
	Subject_ID ,
	Level_ID ,
	Questions,
	Option1 ,
	Option2 ,
	Option3 ,
	Option4 ,
	UserID ,
	Answer,newid() as newww  from #tempQuest) a 
	--where Rownumber <= @No_of_Question 
	


	
END
GO
/****** Object:  StoredProcedure [dbo].[get_Questiondata]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create procedure [dbo].[get_Questiondata]
as 
begin

select 
a.KeyID,
b.Subject,
a.Level_ID,
a.Questions,
a.Option1,
a.Option2,
a.Option3,
a.Option4,
a.Answer,
b.KeyID
from [dbo].[tb_Question] a left join [dbo].[tb_Subject] b
on a.Subject_ID = b.KeyID
where a.Flag = 1


end
exec getQuestiondata
GO
/****** Object:  StoredProcedure [dbo].[get_SearchQuestiondata]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create  procedure [dbo].[get_SearchQuestiondata](
@search int, @dis_flag int,@level int)
as 
begin
if (@search = 0 and @dis_flag = 2 and @level = 0)
begin
select 
a.KeyID,
b.Subject,
a.Level_ID,
a.Questions,
a.Option1,
a.Option2,
a.Option3,
a.Option4,
a.Answer,
b.KeyID,a.FLAG as active
from [dbo].[tb_Question] a left join [dbo].[tb_Subject] b
on a.Subject_ID = b.KeyID
where b.Flag =1
end
else if(@search <> 0 and @dis_flag = 2 and @level <> 0)
begin
select 
a.KeyID,
b.Subject,
a.Level_ID,
a.Questions,
a.Option1,
a.Option2,
a.Option3,
a.Option4,
a.Answer,
b.KeyID,a.FLAG as active
from [dbo].[tb_Question] a left join [dbo].[tb_Subject] b
on a.Subject_ID = b.KeyID
where a.Subject_ID = @search and b.Flag =1 and a.Level_ID = @level
end
else if (@search = 0 and @dis_flag <> 2 and @level = 0)
begin
select 
a.KeyID,
b.Subject,
a.Level_ID,
a.Questions,
a.Option1,
a.Option2,
a.Option3,
a.Option4,
a.Answer,
b.KeyID,a.FLAG as active
from [dbo].[tb_Question] a left join [dbo].[tb_Subject] b
on a.Subject_ID = b.KeyID
where a.Flag = @dis_flag  and b.Flag =1
end
else if (@search <> 0 and @dis_flag = 2 and @level = 0)
begin 
select 
a.KeyID,
b.Subject,
a.Level_ID,
a.Questions,
a.Option1,
a.Option2,
a.Option3,
a.Option4,
a.Answer,
b.KeyID,a.FLAG as active
from [dbo].[tb_Question] a left join [dbo].[tb_Subject] b
on a.Subject_ID = b.KeyID
where b.Flag =1 and a.Subject_ID = @search
end
else if (@search = 0 and @dis_flag = 2 and @level <> 0)
begin 
select 
a.KeyID,
b.Subject,
a.Level_ID,
a.Questions,
a.Option1,
a.Option2,
a.Option3,
a.Option4,
a.Answer,
b.KeyID,a.FLAG as active
from [dbo].[tb_Question] a left join [dbo].[tb_Subject] b
on a.Subject_ID = b.KeyID
where b.Flag =1 and a.Level_ID = @level
end
else if (@search <> 0 and @dis_flag <> 2 and @level = 0)
begin
select 
a.KeyID,
b.Subject,
a.Level_ID,
a.Questions,
a.Option1,
a.Option2,
a.Option3,
a.Option4,
a.Answer,
b.KeyID,a.FLAG as active
from [dbo].[tb_Question] a left join [dbo].[tb_Subject] b
on a.Subject_ID = b.KeyID
where a.Flag = @dis_flag  and b.Flag =1 and a.Subject_ID = @search
end

else if (@search = 0 and @dis_flag <> 2 and @level <> 0)
begin
select 
a.KeyID,
b.Subject,
a.Level_ID,
a.Questions,
a.Option1,
a.Option2,
a.Option3,
a.Option4,
a.Answer,
b.KeyID,a.FLAG as active
from [dbo].[tb_Question] a left join [dbo].[tb_Subject] b
on a.Subject_ID = b.KeyID
where a.Flag = @dis_flag  and b.Flag =1 and a.Level_ID = @level
end

else 
begin
select 
a.KeyID,
b.Subject,
a.Level_ID,
a.Questions,
a.Option1,
a.Option2,
a.Option3,
a.Option4,
a.Answer,
b.KeyID,a.FLAG as active
from [dbo].[tb_Question] a left join [dbo].[tb_Subject] b
on a.Subject_ID = b.KeyID
where a.Flag = @dis_flag and a.Subject_ID = @search and b.Flag =1 and a.Level_ID = @level ;
end
end
GO
/****** Object:  StoredProcedure [dbo].[get_SearchQuestiondata_1]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create  procedure [dbo].[get_SearchQuestiondata_1](
@search int = NULL, @dis_flag int = NULL ,@level int = NULL)
as 
begin
select 
a.KeyID,
b.Subject,
a.Level_ID,
a.Questions,
a.Option1,
a.Option2,
a.Option3,
a.Option4,
a.Answer,
b.KeyID,a.FLAG as active
from [dbo].[tb_Question] a left join [dbo].[tb_Subject] b
on a.Subject_ID = b.KeyID
where (a.Flag = @dis_flag or @dis_flag is null)
and (a.Subject_ID = @search  or @search is null)
and (b.Flag =1 )
and (a.Level_ID = @level or @level is null) ;
end
GO
/****** Object:  StoredProcedure [dbo].[get_skill_applied_for_data]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[get_skill_applied_for_data] as 
BEGIN
select distinct a.Job_Position,a.key_id from tb_JobPosition a join 
tb_SubjectLevel b on a.Key_id = b.AppliedFor

join tb_Subject c on b.Subject_ID = c.KeyID
where a.flag = 1 and c.Flag = 1 and  (b.FLAG = 0 or b.FLAG = 1)
end
GO
/****** Object:  StoredProcedure [dbo].[get_skill_present_or_not]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[get_skill_present_or_not] 
(@subject_id int, @appliedfor int, @level int )
as 
BEGIN 
select subject_id,appliedfor,level from tb_SubjectLevel 
where subject_id = @subject_id and AppliedFor = @appliedfor and level = @level
end
GO
/****** Object:  StoredProcedure [dbo].[get_subjectData]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 create procedure [dbo].[get_subjectData]
as begin
select * from tb_Subject where flag = 1
end
GO
/****** Object:  StoredProcedure [dbo].[get_Subjectleveldata]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create procedure [dbo].[get_Subjectleveldata]
as 
begin

select * from tb_SubjectLevel where Flag=1


end
GO
/****** Object:  StoredProcedure [dbo].[get_Subjectleveldata_byID]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create procedure [dbo].[get_Subjectleveldata_byID](@id int)
as 
begin

select * from tb_SubjectLevel where KeyID = @id

end
GO
/****** Object:  StoredProcedure [dbo].[GetAdminpaneldetail]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
    
    
    
    
-- =============================================    
-- Author:  <Author,,Name>    
-- Create date: <Create Date,,>    
-- Description: <Description,,>    
-- =============================================    
CREATE PROCEDURE [dbo].[GetAdminpaneldetail]    
 @StartDate NVARCHAR(10)  
 ,@EndDate NVARCHAR(10) 
     
AS    
BEGIN    
    
select row_number() over(order by A.keyID ) as [S.no] ,*,case when status=1 then    
 'Completed' else 'In progress' end as Status_Detail ,     
 case when  LoggedOutTime is null then cast(Time_Hours as varchar(20))+':'+ cast(TimeDiff-(Time_Hours*60) as varchar(20))     
 else '0' end as RemainingTime from (    
SELECT DISTINCT   
                         C.KeyID, J.Job_Position,C.Source,C.First_Name , CONCAT(C.First_Name,' ', C.Last_Name) Name , C.Last_Name, C.DOB, C.Gender, C.Phone, C.Email, C.Temp_Address, C.Perm_Address, C.Marietal_Status, C.UG_Degree, C.UG_College, C.UG_Yearofpassing
passing, C.UG_Grade, C.PG_Degree, C.PG_College,   
                         C.PG_Yearofpassing, C.PG_Grade, C.ReferalBY,  C.IsBondAccepted, C.IsAttendedPreviously, C.Createddate, C.SystemIP, C.Username, C.Password, C.Islocked, C.LoggedinTime, C.LoggedOutTime, C.IsAutologgedout,   
                         C.LastSavedTime, C.Applied_For, C.Status, C.DIPLOMA_Degree, C.DIPLOMA_College, C.DIPLOMA_Yearofpassing, C.DIPLOMA_Grade, C.LAD, C.IsLevel1_Skiiped, C.Tenth_Institution, C.Tenth_Percentage, C.Tenth_YOP,   
                         C.UG_Department, C.UG_Discipline, C.PG_Department, C.PG_DESCIPLINE, C.Mail_status, J.Key_ID,  CASE WHEN LoggedOutTime IS NULL THEN DATEDIFF(Minute, LoggedinTime, GETDATE()) END AS TimeDiff,   
                         CASE WHEN LoggedOutTime IS NULL THEN DATEDIFF(Minute, LoggedinTime, GETDATE()) END / 60 AS Time_Hours, SUBSTRING(CAST(C.LoggedinTime AS varchar(20)), 1, 11) AS Date,   
                         SUBSTRING(CAST(C.LoggedinTime AS varchar(20)), 12, 19) AS Exam_started_time, SUBSTRING(CAST(C.LoggedOutTime AS varchar(20)), 12, 19) AS Exam_Completed_time  
FROM            tb_Candidate AS C INNER JOIN  
                         tb_JobPosition AS J ON C.Applied_For = J.Key_ID  
						where  convert(DATE, C.Createddate, 103) >= convert(DATE, @StartDate, 103)  
    AND convert(DATE, C.Createddate, 103) <= convert(DATE, @EndDate, 103)  
) A order by 1 desc    
END
GO
/****** Object:  StoredProcedure [dbo].[GetAppliedFor]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
CREATE PROCEDURE [dbo].[GetAppliedFor]    
     
AS    
BEGIN    
SET FMTONLY OFF;
 Select distinct Key_ID KeyID,Job_Position  AppliedFor from [dbo].[tb_JobPosition]    
END
GO
/****** Object:  StoredProcedure [dbo].[GetAppliedFor_new]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetAppliedFor_new]
	
AS
BEGIN
	Select distinct Job_Position from [dbo].[tb_SubjectLevel] a join [dbo].[tb_JobPosition] b on a.[AppliedFor]=b.[Key_ID]
END
GO
/****** Object:  StoredProcedure [dbo].[GetBondDetails]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  <Author,,Name>  
-- Create date: <Create Date,,>  
-- Description: <Description,,>  
-- =============================================  
Create PROCEDURE [dbo].[GetBondDetails]  
 @KeyId varchar(70)
AS  
BEGIN  
 Select * from tb_JobPosition  where [KEY_ID]=@KeyId 
END
GO
/****** Object:  StoredProcedure [dbo].[getBranch]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[getBranch]
as
begin
select * from tb_discipline;
end
GO
/****** Object:  StoredProcedure [dbo].[getdetailresult]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  procedure [dbo].[getdetailresult] @candidateId varchar(11) ,@level int
as
begin 

select a.Questions,b.ANSWER,b.ISATTENDED,b.SCORE,c.Subject from tb_Question a join RESULT_HISTORY b 
on a.KeyID = b.QUESTION_ID join tb_Subject c on b.SUBJECT_ID = c.KeyID
where b.LEVEL = @level and  b.CANDIDATE_ID = @candidateId
order by b.SUBJECT_ID asc

end
GO
/****** Object:  StoredProcedure [dbo].[getExamQuestion]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




create procedure [dbo].[getExamQuestion](
@appliedfor nvarchar(20),
@level int)
as 
begin
select
c.subject,
a.Questions,
a.Option1,
a.Option2,
a.Option3,
a.Option4,
a.keyID,
a.Subject_ID,
a.Answer,
b.AppliedFor
from
[dbo].[tb_Question] a
inner join
[dbo].[tb_SubjectLevel] b
on a.Subject_ID = b.Subject_ID and a.flag = 1 and b.flag =1
inner join
[dbo].[tb_Subject] c
on a.Subject_ID = c.KeyID
join 
tb_JobPosition d
on b.AppliedFor = d.Key_ID
where d.Job_Position = @appliedfor and a.Level_ID = @level and b.Level = @level 



end
GO
/****** Object:  StoredProcedure [dbo].[getExamQuestion1]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[getExamQuestion1](
    @appliedfor NVARCHAR(50),
    @level INT,
    @num_questions INT,
    @subject NVARCHAR(50)
)
AS 
BEGIN
    SELECT TOP (@num_questions)
        c.subject,
        a.Questions,
        a.Option1,
        a.Option2,
        a.Option3,
        a.Option4,
        a.keyID,
        a.Subject_ID,
        a.Answer,
        b.AppliedFor
    FROM [dbo].[tb_Question] a
    INNER JOIN [dbo].[tb_SubjectLevel] b ON a.Subject_ID = b.Subject_ID AND a.flag = 1 AND b.flag = 1
    INNER JOIN [dbo].[tb_Subject] c ON a.Subject_ID = c.KeyID
    JOIN tb_JobPosition d ON b.AppliedFor = d.Key_ID
    WHERE d.Job_Position = @appliedfor 
        AND a.Level_ID = @level 
        AND b.Level = @level 
        AND c.subject = @subject
    ORDER BY NEWID();
END
GO
/****** Object:  StoredProcedure [dbo].[GetGroupnames]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[GetGroupnames]    --47    
 @AppliedFor varchar(40)      
 As Begin    
  select distinct SL.OptionalGroupName, COUNT(SL.OptionalGroupName) Count from [dbo].[tb_SubjectLevel] SL             
 join tb_Subject S on SL.Subject_ID=S.KeyID 
  where AppliedFor= @AppliedFor and SL.Level=2
  and sl.IsMandatory=0 and  SL.OptionalGroupName IS NOT NULL    
 group by SL.OptionalGroupName    
 End
GO
/****** Object:  StoredProcedure [dbo].[GetJobposition]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[GetJobposition]
	
AS
BEGIN
	Select * from tb_JobPosition where Flag = 1
END
GO
/****** Object:  StoredProcedure [dbo].[GetJobpositionByFilter]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


 CREATE Proc [dbo].[GetJobpositionByFilter] 
 As 
 Begin 
 
  Select 0 [Key_ID],'ALL' Job_Position
  union
 select [Key_ID],Job_Position from  [dbo].[tb_JobPosition]
 
 End
GO
/****** Object:  StoredProcedure [dbo].[GetKeyIDsByConditions]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetKeyIDsByConditions]
  @pSubjectID INT,
  @pLevelID INT,
  @pCount INT
AS
BEGIN
  SELECT TOP (@pCount) *
  FROM tb_question
  WHERE Subject_ID = @pSubjectID
    AND Level_ID = @pLevelID
	order by NEWID();
END;
GO
/****** Object:  StoredProcedure [dbo].[GetLevel]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetLevel]
	
AS
BEGIN
	Select distinct Level from [dbo].[tb_SubjectLevel]
END
GO
/****** Object:  StoredProcedure [dbo].[GetOptioalSubjects]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE Procedure [dbo].[GetOptioalSubjects] --47      
 @AppliedFor varchar(40)      
 As      
 Begin      
 select S.KeyID,SL.AppliedFor,S.[Subject],IsMandatory,SL.OptionalGroupName from [dbo].[tb_SubjectLevel] SL         
 join tb_Subject S on SL.Subject_ID=S.KeyID where AppliedFor= @AppliedFor and SL.Level=2
 group by SL.OptionalGroupName, S.KeyID,SL.AppliedFor,S.[Subject],IsMandatory   --and IsMandatory=0 or IsMandatory=1        
 End
GO
/****** Object:  StoredProcedure [dbo].[GetoptionstocheckCsOrNoncs]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 create Procedure [dbo].[GetoptionstocheckCsOrNoncs]--  47
  @AppliedFor varchar(40)   
  AS Begin
  select IsoptionRequired from tb_JobPosition where Key_ID=@AppliedFor
  End
 update tb_JobPosition set IsoptionRequired=0 where Key_ID=47
GO
/****** Object:  StoredProcedure [dbo].[getPGDegree]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[getPGDegree]
as
begin
select * from tb_graduation where degree like 'M%';
end
GO
/****** Object:  StoredProcedure [dbo].[GetPosition_byID]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetPosition_byID]
@id int
AS
BEGIN
	Select * from [dbo].[tb_JobPosition] where [Key_ID]=@id
END
GO
/****** Object:  StoredProcedure [dbo].[getPositiondata]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  procedure [dbo].[getPositiondata] (@filter int)
as
begin
if (@filter=2)
   begin
     select * from tb_JobPosition
   end
else if (@filter=1)
    begin
     select * from tb_JobPosition where Flag=1
    end
else
    begin
     select * from tb_JobPosition where Flag=0
    end
end
GO
/****** Object:  StoredProcedure [dbo].[GetQuestion_byID]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetQuestion_byID]
@id int
AS
BEGIN
	Select * from dbo.tb_Question where KeyID=@id
END
GO
/****** Object:  StoredProcedure [dbo].[GetQuestionAnswer]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
    
    
    
-- =============================================    
    
-- Author:  <Author,,Name>    
    
-- Create date: <Create Date,,>    
    
-- Description: <Description,,>    
    
-- =============================================    
    
    
CREATE PROCEDURE [dbo].[GetQuestionAnswer]    --0,0
@Subject int,    
    
@level int   
    
AS    
    
BEGIN    
    
     
 Select distinct L.AppliedFor, S.Subject,L.Level,Q.* from (select * from [tb_Question] where typeflag='S') Q    
left join tb_Subject S on Q.Subject_ID= S.KeyID     
    
left join tb_SubjectLevel L on L.Subject_ID= Q.Subject_ID     
and L.Level=Q.Level_ID left join [dbo].[tb_JobPosition] Jb    
 on jb.Key_ID=L.AppliedFor   
  where (S.KeyID=@Subject or @Subject=0) and (Q.Level_ID=@level or @level=0)    
    
    
END
GO
/****** Object:  StoredProcedure [dbo].[GetQuestionAnswer_new]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- =============================================

-- Author:		<Author,,Name>

-- Create date: <Create Date,,>

-- Description:	<Description,,>

-- =============================================


CREATE PROCEDURE [dbo].[GetQuestionAnswer_new]
@Subject int,

@level int,

@AppliedFor varchar(20)=''

AS

BEGIN

	Select
	 L.AppliedFor, 
	 S.Subject,L.Level,Q.* from (select * from [tb_Question] where typeflag='S') Q
left join tb_Subject S on Q.Subject_ID= S.KeyID 

left join tb_SubjectLevel L on L.Subject_ID= Q.Subject_ID 
and L.Level=Q.Level_ID
left join [dbo].[tb_JobPosition] Jb 
on jb.Key_ID=L.AppliedFor
where
--(Jb.job_position=@AppliedFor or @AppliedFor='')
-- and 
 (S.KeyID=@Subject or @Subject=0) and (L.Level=@level or @level=0)


END
GO
/****** Object:  StoredProcedure [dbo].[GetQuestionAnswer_new_Ques]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- =============================================

-- Author:		<Author,,Name>

-- Create date: <Create Date,,>

-- Description:	<Description,,>

-- =============================================


CREATE PROCEDURE [dbo].[GetQuestionAnswer_new_Ques]
@Subject varchar(50),

@level int,

@AppliedFor varchar(20)=''

AS

BEGIN

	Select
	 L.AppliedFor, 
	 S.Subject,L.Level,Q.* from [tb_Question] Q
left join tb_Subject S on Q.Subject_ID= S.KeyID 

left join tb_SubjectLevel L on L.Subject_ID= Q.Subject_ID 
and L.Level=Q.Level_ID
left join [dbo].[tb_JobPosition] Jb 
on jb.Key_ID=L.AppliedFor
where
--(Jb.job_position=@AppliedFor or @AppliedFor='')
-- and 
 (S.Subject=@Subject) and (L.Level=@level)


END
GO
/****** Object:  StoredProcedure [dbo].[GetResult_bkup]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================


CREATE procedure [dbo].[GetResult_bkup]  --'.Net Trainee', 'Aptitude', 'DotNet', 'Aptitude', 'DotNet', 'RDBMS', 'Communication', '11-11-2017', '12-12-2017')

@AppFor varchar(100),
@Tab1_Level1 varchar(100),
@Tab2_Level1 varchar(100),
@Tab1_Level2 varchar(100),
@Tab2_Level2 varchar(100),
@Tab3_Level2 varchar(100),
@Tab4_Level2 varchar(100),
@Exam_start_Date Datetime,
@Exam_end_Date Datetime
	
	 as
 begin 

select 
Coalesce(Tab1.Mail_Status,Tab2.Mail_Status,Tab3.Mail_Status) as Mail_Status,
 coalesce(Tab1.Candidate_id,Tab2.Candidate_id,Tab3.candidate_id) Candidate_id,
 coalesce(Tab1.Candidate_Name,Tab2.Candidate_Name,Tab3.Candidate_Name) Candidate_Name,
isnull(cast(Tab1.Date_of_Birth as date),'01/01/1900') as Date_of_Birth ,
 coalesce(Tab1.Phone,Tab2.Phone,Tab3.Phone) Phone,
 coalesce(Tab1.Email,Tab2.Email,Tab3.Email)Email,
 coalesce(Tab1.Temp_Address,Tab2.Temp_Address,Tab3.Temp_Address)Temp_Address,
 coalesce(Tab1.Perm_Address,Tab2.Perm_Address,Tab3.Perm_Address)Perm_Address,
 coalesce(Tab1.Tenth_Institution,Tab2.Tenth_Institution,Tab3.Tenth_Institution)Tenth_Institution,
 coalesce(Tab1.Tenth_Percentage,Tab2.Tenth_Percentage,Tab3.Tenth_Percentage)Tenth_Percentage,
 coalesce(Tab1.Tenth_YOP,Tab2.Tenth_YOP,Tab3.Tenth_YOP)Tenth_YOP,
 coalesce(Tab1.DIPLOMA_College,Tab2.DIPLOMA_College,Tab3.DIPLOMA_College)DIPLOMA_College,
 coalesce(Tab1.DIPLOMA_Grade,Tab2.DIPLOMA_Grade,Tab3.DIPLOMA_Grade)DIPLOMA_Grade,
 coalesce(Tab1.DIPLOMA_Yearofpassing,Tab2.DIPLOMA_Yearofpassing,Tab3.DIPLOMA_Yearofpassing)DIPLOMA_Yearofpassing,
 coalesce(Tab1.UG_College,Tab2.UG_College,Tab3.UG_College)UG_College,
 coalesce(Tab1.UG_Degree,Tab2.UG_Degree,Tab3.UG_Degree)UG_Degree,
 coalesce(Tab1.UG_Discipline,Tab2.UG_Discipline,Tab3.UG_Discipline)UG_Discipline,
 coalesce(Tab1.UG_Grade,Tab2.UG_Grade,Tab3.UG_Grade)UG_Grade,
 coalesce(Tab1.UG_Yearofpassing,Tab2.UG_Yearofpassing,Tab3.UG_Yearofpassing)UG_Yearofpassing,
 coalesce(Tab1.ReferalBY,Tab2.ReferalBY,Tab3.ReferalBY)ReferalBY,
 coalesce(Tab1.Referal_source,Tab2.Referal_source,Tab3.Referal_source) as Referal_source,
 isnull(coalesce(Tab1.test_start_time,Tab2.test_start_time,Tab3.test_start_time),'01/01/1900') as test_start_time,
 isnull(coalesce(Tab1.test_end_time,Tab2.test_end_time,Tab3.test_end_time),'01/01/1900') as test_end_time,
  @AppFor as Applied_For,

 coalesce(cast(Tab1.Exam_Date as varchar(20)),cast(Tab2.Exam_Date as varchar(20)),cast(Tab3.Exam_Date as varchar(20)))  as Exam_Date,
 isnull(coalesce(tab1.Level_1_Tab1_subject,tab2.Level_1_Tab1_subject,tab3.Level_1_Tab1_subject),'Aptitude') as Level_1_Tab1_subject,
 isnull(coalesce(tab1.Level_1_Tab1_mark,tab2.Level_1_Tab1_mark,tab3.Level_1_Tab1_mark),0) AS Level_1_Tab1_mark,isnull(coalesce(tab1.Level_1_Tab1_CutOffMarks,tab2.Level_1_Tab1_CutOffMarks,tab3.Level_1_Tab1_CutOffMarks),0) as Level_1_Tab1_CutOffMarks,
 isnull(coalesce(tab1.Level_1_Tab2_subject,tab2.Level_1_Tab2_subject,tab3.Level_1_Tab2_subject),'DotNet') as Level_1_Tab2_subject,
 isnull(coalesce(tab1.Level_1_Tab2_mark,tab2.Level_1_Tab2_mark,tab3.Level_1_Tab2_mark),0) AS Level_1_Tab2_mark,isnull(coalesce(tab1.Level_1_Tab2_CutOffMarks,tab2.Level_1_Tab2_CutOffMarks,tab3.Level_1_Tab2_CutOffMarks),0) as Level_1_Tab2_CutOffMarks, 
 isnull(coalesce(tab1.Level_2_Tab1_subject,tab2.Level_2_Tab1_subject,tab3.Level_2_Tab1_subject),'Aptitude') as Level_2_Tab1_subject,
 isnull(coalesce(tab1.Level_2_Tab1_mark,tab2.Level_2_Tab1_mark,tab3.Level_2_Tab1_mark),0) AS Level_2_Tab1_mark,isnull(coalesce(tab1.Level_2_Tab1_CutOffMarks,tab2.Level_2_Tab1_CutOffMarks,tab2.Level_2_Tab1_CutOffMarks),0) Level_2_Tab1_CutOffMarks,
 isnull(coalesce(tab1.Level_2_Tab2_subject,tab2.Level_2_Tab2_subject,tab3.Level_2_Tab2_subject),'DotNet') as Level_2_Tab2_subject,
 isnull(coalesce(tab1.Level_2_Tab2_mark,tab2.Level_2_Tab2_mark,tab3.Level_2_Tab2_mark),0) AS Level_2_Tab2_mark,isnull(coalesce(tab1.Level_2_Tab2_CutOffMarks,tab2.Level_2_Tab2_CutOffMarks,tab2.Level_2_Tab2_CutOffMarks),0) Level_2_Tab2_CutOffMarks,
 isnull(coalesce(tab1.Level_2_Tab3_subject,tab2.Level_2_Tab3_subject,tab3.Level_2_Tab3_subject),'RDBMS') as Level_2_Tab3_subject,
 isnull(coalesce(tab1.Level_2_Tab3_mark,tab2.Level_2_Tab3_mark,tab3.Level_2_Tab3_mark),0) AS Level_2_Tab3_mark,isnull(coalesce(tab1.Level_2_Tab3_CutOffMarks,tab2.Level_2_Tab3_CutOffMarks,tab2.Level_2_Tab3_CutOffMarks),0) Level_2_Tab3_CutOffMarks,
 isnull(coalesce(tab1.Level_2_Tab4_subject,tab2.Level_2_Tab4_subject,tab3.Level_2_Tab4_subject),'Communication') as Level_2_Tab4_subject,
 isnull(coalesce(tab1.Level_2_Tab4_mark,tab2.Level_2_Tab4_mark,tab3.Level_2_Tab4_mark),0) AS Level_2_Tab4_mark,isnull(coalesce(tab1.Level_2_Tab4_CutOffMarks,tab2.Level_2_Tab4_CutOffMarks,tab2.Level_2_Tab4_CutOffMarks),0) Level_2_Tab4_CutOffMarks
 
  from 

	 (


	 select A.Mail_status,
	  A.Candidate_id,
 A.Candidate_Name,
cast( A.Date_of_Birth as date) as Date_of_Birth,
 A.Phone,A.Email,
 A.Temp_Address,
 A.Perm_Address,
 A.Tenth_Institution,
 A.Tenth_Percentage,
 A.Tenth_YOP,
  A.DIPLOMA_College,
 A.DIPLOMA_Grade,
 A.DIPLOMA_Yearofpassing,
 A.UG_College,
 A.UG_Degree,
 A.UG_Discipline,
 A.UG_Grade,
 A.UG_Yearofpassing,
 A.ReferalBY,
 A.Referal_source as Referal_source,
 A.test_start_time as test_start_time,
 A.test_end_time as test_end_time,

 cast(A.Exam_Date as varchar(20)) as Exam_Date,
 Level_1_Tab1_subject,
 Level_1_Tab1_mark AS Level_1_Tab1_mark,Level_1_Tab1_CutOffMarks,
 Level_1_Tab2_subject,
Level_1_Tab2_mark, Level_1_Tab2_CutOffMarks,
 null as Level_2_Tab1_subject,
 null as Level_2_Tab1_mark ,
 null as Level_2_Tab1_CutOffMarks,
 null as  Level_2_Tab2_subject,
 null as Level_2_Tab2_mark ,
 null as Level_2_Tab2_CutOffMarks,
 null as  Level_2_Tab3_subject,
 null as Level_2_Tab3_mark ,
 null as Level_2_Tab3_CutOffMarks,
 null as  Level_2_Tab4_subject,
 null as Level_2_Tab4_mark ,
 null as Level_2_Tab4_CutOffMarks
 from 
(select b.Mail_status,a.Candidate_id,b.First_Name+' '+b.Last_Name as Candidate_Name,b.DOB as Date_of_Birth,b.Phone,b.Email,
 b.Temp_Address,b.Perm_Address,b.Tenth_Percentage,b.Tenth_YOP,b.Tenth_Institution,b.DIPLOMA_Grade,
 b.DIPLOMA_Yearofpassing,b.DIPLOMA_College,b.UG_Department as UG_Degree,b.UG_Discipline,b.UG_Grade,
 b.UG_Yearofpassing,b.UG_College,ReferalBY,Source as Referal_source,b.LoggedinTime as test_start_time,
 b.LoggedOutTime as test_end_time,
convert(date,b.LoggedinTime ,112) as Exam_Date,
	c.Subject as Level_1_Tab1_subject,d.Level,score as Level_1_Tab1_mark, b.Applied_For,d.CutOffMarks as Level_1_Tab1_CutOffMarks
from (	select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from tb_Result r
	join tb_question Q on r.question_id=q.keyid
	group by candidate_Id,r.Subject_ID,Q.Level_ID ) a
join [dbo].[tb_Candidate] b 
on a.Candidate_id=b.KeyID
 join tb_Subject c on a.subject_ID=c.KeyID 
 join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=1
 
 	where  subject=@Tab1_Level1 and a.Level=1
 ) A



  LEFT join


	(select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,
left(b.LoggedinTime,11) as Exam_Date,
	c.Subject as Level_1_Tab2_subject,d.Level,score as Level_1_Tab2_mark,d.CutOffMarks as Level_1_Tab2_CutOffMarks
from (	select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from tb_result r
	join tb_question Q on r.question_id=q.keyid
	group by candidate_Id,r.Subject_ID,Q.Level_ID ) a
join [dbo].[tb_Candidate] b 
on a.Candidate_id=b.KeyID
 join tb_Subject c on a.subject_ID=c.KeyID
 join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=1

 	where   subject=@Tab2_Level1 and a.Level=1
 ) B on A.Candidate_id=B.Candidate_id 
where 
	A.Exam_Date between convert(date,cast(@Exam_start_Date as date) ,112) and convert(date,cast(@Exam_end_Date as date) ,112)
	and 
	A.Applied_For=(select [Key_ID] from tb_jobposition where job_position= @AppFor)

	) Tab1

	
full join 

(select  
C.Mail_status,
C.Candidate_id,
 C.Candidate_Name,
 C.Phone,C.Email,
 C.Temp_Address,
 C.Perm_Address,
 C.Tenth_Institution,
 C.Tenth_Percentage,
 C.Tenth_YOP,
 C.DIPLOMA_College,
 C.DIPLOMA_Grade,
 C.DIPLOMA_Yearofpassing,
 C.UG_College,
 C.UG_Degree,
 C.UG_Discipline,
 C.UG_Grade,
 C.UG_Yearofpassing,
 C.ReferalBY,
 C.Referal_source as Referal_source,
 C.test_start_time as test_start_time,
 C.test_end_time as test_end_time,
 C.Applied_for,
cast(C.Exam_Date as varchar(20)) as Exam_Date,
null as Level_1_Tab1_subject,null as Level_1_Tab1_mark,null as Level_1_Tab1_CutOffMarks,
null as Level_1_Tab2_subject,null as Level_1_Tab2_mark,null as Level_1_Tab2_CutOffMarks,
 Level_2_Tab1_subject,
 Level_2_Tab1_mark ,Level_2_Tab1_CutOffMarks,
  Level_2_Tab2_subject,
 Level_2_Tab2_mark ,Level_2_Tab2_CutOffMarks,
  Level_2_Tab3_subject,
 Level_2_Tab3_mark ,Level_2_Tab3_CutOffMarks,
  Level_2_Tab4_subject,
 Level_2_Tab4_mark ,Level_2_Tab4_CutOffMarks
 from 
(select b.Mail_status,a.Candidate_id,b.First_Name+' '+b.Last_Name as Candidate_Name,b.DOB as Date_of_Birth,b.Phone,b.Email,
 b.Temp_Address,b.Perm_Address,b.Tenth_Percentage,b.Tenth_YOP,b.Tenth_Institution,b.DIPLOMA_Grade,
 b.DIPLOMA_Yearofpassing,b.DIPLOMA_College,b.UG_Department as UG_Degree,b.UG_Discipline,b.UG_Grade,
 b.UG_Yearofpassing,b.UG_College,ReferalBY,Source as Referal_source,b.LoggedinTime as test_start_time,
 b.LoggedOutTime as test_end_time,b.applied_for,
left(b.LoggedinTime,11) as Exam_Date,null as Level_1_Tab1_subject,null as Level_1_Tab2_subject,null as Level_1_Tab1_mark,null as Level_1_Tab2_mark,null as Level_1_Tab1_CutOffMarks,null as Level_1_Tab2_CutOffMarks,
	c.Subject as Level_2_Tab1_subject,d.Level,score as Level_2_Tab1_mark,d.CutOffMarks as Level_2_Tab1_CutOffMarks
from (	select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from tb_result r
	join tb_question Q on r.question_id=q.keyid
	group by candidate_Id,r.Subject_ID,Q.Level_ID ) a
join [dbo].[tb_Candidate] b 
on a.Candidate_id=b.KeyID
 join tb_Subject c on a.subject_ID=c.KeyID
  join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2
 	where  subject=@Tab1_Level2 and a.Level=2
) C 
	LEFT join 

		(select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,
left(b.LoggedinTime,11) as Exam_Date,
	c.Subject as Level_2_Tab2_subject,d.Level,score as Level_2_Tab2_mark,d.CutOffMarks as Level_2_Tab2_CutOffMarks
from (	select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from tb_result r
	join tb_question Q on r.question_id=q.keyid
	group by candidate_Id,r.Subject_ID,Q.Level_ID ) a 
join [dbo].[tb_Candidate] b 
on a.Candidate_id=b.KeyID
 join tb_Subject c on a.subject_ID=c.KeyID
  join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2
 	where  subject=@Tab2_Level2 and a.Level=2
 )D on
	C.candidate_id=D.Candidate_id
	LEFT join
		(select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,
left(b.LoggedinTime,11) as Exam_Date,
	c.Subject Level_2_Tab3_subject,d.Level,score as Level_2_Tab3_mark,d.CutOffMarks as Level_2_Tab3_CutOffMarks
from (	select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from tb_result r
	join tb_question Q on r.question_id=q.keyid
	group by candidate_Id,r.Subject_ID,Q.Level_ID ) a
join [dbo].[tb_Candidate] b 
on a.Candidate_id=b.KeyID
 join tb_Subject c on a.subject_ID=c.KeyID
 join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2
 	where  subject=@Tab3_Level2 and a.Level=2
 ) E
	on C.Candidate_id=E.Candidate_id 
	
	LEFT join


		(select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,
left(b.LoggedinTime,11) as Exam_Date,
	c.Subject Level_2_Tab4_subject,d.Level,score as Level_2_Tab4_mark,d.CutOffMarks as Level_2_Tab4_CutOffMarks
from (	select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from tb_result r
	join tb_question Q on r.question_id=q.keyid
	group by candidate_Id,r.Subject_ID,Q.Level_ID) a
join [dbo].[tb_Candidate] b 
on a.Candidate_id=b.KeyID
 join tb_Subject c on a.subject_ID=c.KeyID
  join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2
 	where subject=@Tab4_Level2 and a.Level=2
 )F
  on C.Candidate_id=F.candidate_id

	where 
	C.Exam_Date between convert(date,cast(@Exam_start_Date as date) ,112) and convert(date,cast(@Exam_end_Date as date) ,112)
	and 
	C.Applied_For=(select [Key_ID] from tb_jobposition where job_position= @AppFor)

) Tab2
on tab2.candidate_id =tab1.candidate_id

full join


	

 (select  
 A.Mail_status,
 A.Candidate_id,
 A.Candidate_Name,
cast( A.Date_of_Birth as date) as Date_of_Birth,
 A.Phone,A.Email,
 A.Temp_Address,
 A.Perm_Address,
 A.Tenth_Institution,
 A.Tenth_Percentage,
 A.Tenth_YOP,
  A.DIPLOMA_College,
 A.DIPLOMA_Grade,
 A.DIPLOMA_Yearofpassing,
 A.UG_College,
 A.UG_Degree,
 A.UG_Discipline,
 A.UG_Grade,
 A.UG_Yearofpassing,
 A.ReferalBY,
 A.Referal_source as Referal_source,
 A.test_start_time as test_start_time,
 A.test_end_time as test_end_time,
 @AppFor as Applied_For,

 cast(A.Exam_Date as varchar(20)) as Exam_Date,
 Level_1_Tab1_subject,
 Level_1_Tab1_mark,Level_1_Tab1_CutOffMarks,
 Level_1_Tab2_subject,
Level_1_Tab2_mark, Level_1_Tab2_CutOffMarks,
 Level_2_Tab1_subject,
 Level_2_Tab1_mark ,Level_2_Tab1_CutOffMarks,
  Level_2_Tab2_subject,
 Level_2_Tab2_mark ,Level_2_Tab2_CutOffMarks,
  Level_2_Tab3_subject,
 Level_2_Tab3_mark ,Level_2_Tab3_CutOffMarks,
  Level_2_Tab4_subject,
 Level_2_Tab4_mark ,Level_2_Tab4_CutOffMarks

  from 
 (select b.Mail_status,a.Candidate_id,b.First_Name+' '+b.Last_Name as Candidate_Name,b.DOB as Date_of_Birth,b.Phone,b.Email,
 b.Temp_Address,b.Perm_Address,b.Tenth_Percentage,b.Tenth_YOP,b.Tenth_Institution,b.DIPLOMA_Grade,
 b.DIPLOMA_Yearofpassing,b.DIPLOMA_College,b.UG_Department as UG_Degree,b.UG_Discipline,b.UG_Grade,
 b.UG_Yearofpassing,b.UG_College,ReferalBY,Source as Referal_source,b.LoggedinTime as test_start_time,
 b.LoggedOutTime as test_end_time,
convert(date,b.LoggedinTime ,112) as Exam_Date,
	c.Subject as Level_1_Tab1_subject,d.Level,score as Level_1_Tab1_mark, b.Applied_For,d.CutOffMarks as Level_1_Tab1_CutOffMarks
from (	select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from (select distinct * 
from RESULT_HISTORY
 --where  answer is not null 
 ) r
	join tb_question Q on r.question_id=q.keyid
	group by candidate_Id,r.Subject_ID,Q.Level_ID) a
join [dbo].[tb_Candidate] b 
on a.Candidate_id=b.KeyID
 join tb_Subject c on a.subject_ID=c.KeyID 
 join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=1
 
 	where  subject=@Tab1_Level1 and a.Level=1 
 ) A


  LEFT join


	(select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,
left(b.LoggedinTime,11) as Exam_Date,
	c.Subject as Level_1_Tab2_subject,d.Level,score as Level_1_Tab2_mark,d.CutOffMarks as Level_1_Tab2_CutOffMarks
from (	select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from (select distinct * 
from RESULT_HISTORY
 
-- where answer is not null
  ) r
	join tb_question Q on r.question_id=q.keyid
	group by candidate_Id,r.Subject_ID,Q.Level_ID ) a
join [dbo].[tb_Candidate] b 
on a.Candidate_id=b.KeyID
 join tb_Subject c on a.subject_ID=c.KeyID
 join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=1

 	where   subject=@Tab2_Level1 and a.Level=1
 ) B on A.Candidate_id=B.Candidate_id 


 LEFT join

		(select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,
left(b.LoggedinTime,11) as Exam_Date,
	c.Subject as Level_2_Tab1_subject,d.Level,score as Level_2_Tab1_mark,d.CutOffMarks as Level_2_Tab1_CutOffMarks
from (	select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from (select distinct * 
from RESULT_HISTORY
-- where  answer is not null
  ) r
	join tb_question Q on r.question_id=q.keyid
	group by candidate_Id,r.Subject_ID,Q.Level_ID ) a
join [dbo].[tb_Candidate] b 
on a.Candidate_id=b.KeyID
 join tb_Subject c on a.subject_ID=c.KeyID
  join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2
 	where  subject=@Tab1_Level2 and a.Level=2
) C on A.Candidate_id=c.Candidate_id
	LEFT join 

		(select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,
left(b.LoggedinTime,11) as Exam_Date,
	c.Subject as Level_2_Tab2_subject,d.Level,score as Level_2_Tab2_mark,d.CutOffMarks as Level_2_Tab2_CutOffMarks
from (	select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from (select distinct * 
from RESULT_HISTORY
-- where  answer is not null 
 ) r
	join tb_question Q on r.question_id=q.keyid
	group by candidate_Id,r.Subject_ID,Q.Level_ID ) a 
join [dbo].[tb_Candidate] b 
on a.Candidate_id=b.KeyID
 join tb_Subject c on a.subject_ID=c.KeyID
  join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2
 	where  subject=@Tab2_Level2 and a.Level=2
 )D on
	A.candidate_id=D.Candidate_id
	LEFT join
		(select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,
left(b.LoggedinTime,11) as Exam_Date,
	c.Subject Level_2_Tab3_subject,d.Level,score as Level_2_Tab3_mark,d.CutOffMarks as Level_2_Tab3_CutOffMarks
from (	select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from (select distinct * 
from RESULT_HISTORY
 --where  answer is not null
  ) r
	join tb_question Q on r.question_id=q.keyid
	group by candidate_Id,r.Subject_ID,Q.Level_ID ) a
join [dbo].[tb_Candidate] b 
on a.Candidate_id=b.KeyID
 join tb_Subject c on a.subject_ID=c.KeyID
 join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2
 	where  subject=@Tab3_Level2 and a.Level=2
 ) E
	on A.Candidate_id=E.Candidate_id 
	
	LEFT join


		(select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,
left(b.LoggedinTime,11) as Exam_Date,
	c.Subject Level_2_Tab4_subject,d.Level,score as Level_2_Tab4_mark,d.CutOffMarks as Level_2_Tab4_CutOffMarks
from (	select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from (select distinct * 
from RESULT_HISTORY
 --where answer is not null 
 ) r
	join tb_question Q on r.question_id=q.keyid
	group by candidate_Id,r.Subject_ID,Q.Level_ID) a
join [dbo].[tb_Candidate] b 
on a.Candidate_id=b.KeyID
 join tb_Subject c on a.subject_ID=c.KeyID
  join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2
 	where subject=@Tab4_Level2 and a.Level=2
 )F on A.Candidate_id=F.candidate_id
	where 
	A.Exam_Date between convert(date,cast(@Exam_start_Date as date) ,112) and convert(date,cast(@Exam_end_Date as date) ,112)
	and 
	A.Applied_For=(select [Key_ID] from tb_jobposition where job_position= @AppFor)
	
	) Tab3
	
	on isnull(Tab2.Candidate_id,Tab1.Candidate_id)=Tab3.Candidate_id
	--where coalesce(Tab1.Candidate_id,Tab2.Candidate_id,Tab3.Candidate_id)=@candidate_id


	
	order by Tab1.Candidate_id desc,Tab2.Candidate_id desc,tab3.candidate_id desc

	END
GO
/****** Object:  StoredProcedure [dbo].[GetResult_Details]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- select * from tb_result_view  
    
--  [GetResult_Details] 1,0,'01/05/2021','10/05/2021'   
CREATE PROC [dbo].[GetResult_Details]   
 @JobPosition INT = 0  
 ,@CandidateID INT = 0  
 ,@StartDate NVARCHAR(10)  
 ,@EndDate NVARCHAR(10)  
AS  
SET NOCOUNT ON;  
  
IF 1 = 0  
BEGIN  
 SET FMTONLY OFF  
END  
  
     
DECLARE @SDate DATE  
 ,@EDate DATE  
  
SET @SDATE = CONVERT(DATE, CONVERT(DATE, @StartDate, 103), 23)  
SET @EDate = CONVERT(DATE, CONVERT(DATE, @EndDate, 103), 23)  
  
PRINT @SDATE  
PRINT @EDate  
  
SET NOCOUNT ON;  
  
IF OBJECT_ID('tempdb..#Results') IS NOT NULL DROP TABLE #Results  
  
IF OBJECT_ID('tempdb..#Candi') IS NOT NULL DROP TABLE #Candi  
  
IF OBJECT_ID('tempdb..#LevelStatus') IS NOT NULL DROP TABLE #LevelStatus  
   
   
   
 SELECT distinct convert(date,c.CreatedDate, 103) ExamDate, C.LoggedinTime, C.keyid CandidateID, C.first_name, C.Last_Name, key_id JobPositionID,Job_Position,Sl.Level,S.keyid SubjectID,S.Subject, SL.No_of_Question,SL.CutOffMarks     
 INTO #Candi   
   FROM tb_jobposition J  
 JOIN tb_SubjectLevel SL on SL.AppliedFor = J.Key_ID  
 JOIN tb_subject S on SL.Subject_id = S.keyid  
 JOIN tb_Question Q on Q.Subject_ID  = Sl.Subject_ID and Q.Level_ID = Sl.Level  
 JOIN tb_Candidate C on C.Applied_For = J.key_id  
 WHERE (C.Applied_For = @JobPosition or @JobPosition = 0)  
 and  convert(DATE, C.CreatedDate, 103) >= convert(DATE, @SDate, 103)  
   AND convert(DATE, C.CreatedDate, 103) <= convert(DATE, @EDate, 103)  
    
    
  --select distinct   r.candidate_id,Q.level_id ResLevel,  r.Subject_ID ResSubjectID,  
  --SUM(score) score   
     
  -- ,case when SUM(score) >= CutOffMarks  and level_id = 1 then 0 ELSE 1 END ResStatus  
  -- INTO #Results   
  -- from  (select distinct Candidate_id,Subject_ID,score,Question_ID, isattended from tb_result )r   
  -- Join tb_Question Q on r.Question_ID = q.KeyID  
  -- Join tb_candidate c on C.keyid = r.candidate_id  
  -- join tb_SubjectLevel SL on SL.Subject_ID = Q.Subject_ID and SL.Level = Q.Level_ID  
  --where   score is not null   -- and  candidate_id = 5735  
  --and  convert(DATE, C.CreatedDate, 103) >= convert(DATE, @SDate, 103)  
  -- AND convert(DATE, C.CreatedDate, 103) <= convert(DATE, @EDate, 103)  
  -- group by  candidate_id,level_id,R.Subject_ID ,CutOffMarks   
  
    
    SELECT DISTINCT Candidate_id  
     ,level_id ResLevel  
     ,Res.Subject_ID ResSubjectID  
     ,score  
     ,cutoffmarks  
     ,case when  score  >= CutOffMarks  and level_id = 1 then 0 ELSE 1 END ResStatus  
     ,CASE   
      WHEN score >= CutOffMarks  
       THEN 1  
      ELSE 0  
      END ResPassStatus  
     ,CASE   
      WHEN score < CutOffMarks  
       THEN 1  
      ELSE 0  
      END ResFailStatus  
      INTO #Results   
    FROM (  
     SELECT DISTINCT Candidate_id  
      ,q.level_id  
      ,R.Subject_ID  
      ,sum(score) score  
     FROM (Select distinct candidate_id,Subject_Id,Question_id,isnull(Score,0) score,isattended   from tb_result ) r  
     JOIN tb_question q ON r.question_id = q.keyid  
     GROUP BY Candidate_id  
      ,q.level_id  
      ,R.Subject_ID  
     ) Res  
    JOIN tb_subjectlevel sl ON res.subject_id = sl.subject_id  
     AND LEVEL = level_id  
     AND (sl.appliedfor =  @JobPosition or @JobPosition = 0)  
    JOIN tb_candidate c ON res.candidate_id = c.keyid  
    WHERE       score is not null   -- and  candidate_id = 5735  
   and  convert(DATE, C.CreatedDate, 103) >= convert(DATE, @SDate, 103)  
    AND convert(DATE, C.CreatedDate, 103) <= convert(DATE, @EDate, 103)  
     
  -- Select * from tb_result_view  
  
    
truncate table tb_result_view  
INSERT INTO tb_result_view   
  
 SELECT distinct C.JobPositionID,C.Job_Position, C.CandidateID, C.First_Name + ' ' + C.Last_Name CandidateName,  
 C.ExamDate ExamDate,C.LoggedinTime,  
 Subject,C.Level,  
  --cast(ISNULL(cast(R.score as varchar),'-') as varchar) DisplayScore  
  SCORE,'', cast( C.Level as varchar) + '-' + Subject LevelSubject,  
 ''--  CASE WHEN C.Level = 1 then  ISNULL(LevelResult.ResStatus, 0) END Level1Result  
 ,''--  CASE WHEN C.Level = 2 then  ISNULL(LevelResult.ResStatus, '-') END Level2Result  
  
 FROM #Candi C  
 LEFT JOIN #Results R on R.Candidate_id = C.candidateId and R.reslevel = C.level and R.ressubjectid = c.subjectid  
    
 --Select distinct RR.candidate_id, cc.level,case when sum(Rr.ResStatus) >0  and Level =1 then 'FAIL' else 'PASS' end ResStatus  
 --INTO #LevelResult FROM #Candi CC  
 --Left Join #Results RR on RR.Candidate_id = CC.candidateId and RR.reslevel = CC.level and RR.ressubjectid = cC.subjectid  
 --group by Rr.candidate_id, cc.level   
     
   
  
   
  select candidateid candidate_id ,level,case when sum(cast(failres as int)) > 0 then 'FAIL' else 'PASS' end ResStatus  
  INTO   #LevelResult  
  from  
  (  
  select distinct tv.candidateid,  
  level--tv.subject,level,score,cutoffmarks   
  ,case when score is null then '-'   
  when score >=cutoffmarks then '0' else '1' end failres  
   ,case when score is null then '-'   
  when score >=cutoffmarks then 'Pass' else 'Fail' end  res  
     
  from tb_result_view tv  
  join tb_subject s on tv.subject = s.subject  
  join tb_subjectlevel sl on sl.subject_id = s.keyid and sl.AppliedFor = tv.JobID and sl.level = tv.testlevel  
    
  ) A  
  where failres <> '-'  
  group by candidateid,level  
  order by CandidateID,level  
  
  
  
 --   select * from tb_result_view    
  --   select * from #LevelResult  
    
UPDATE       tb_Result_View  
SET                Level1Result = L.Level1Result, Level2Result =L.Level2Result  
FROM            tb_Result_View INNER JOIN  
                        (  
      SELECT Candidate_id, [1] as Level1Result,isnull([2],'-') as Level2Result  FROM  
   (  
     select candidate_id, level,isnull(ResStatus,'-') ResStatus  
     from #LevelResult  
  ) SRC  
     
   PIVOT  
    (  
   maX(ResStatus) for level in([1] ,[2])  
    )pvt  
      ) AS L ON tb_Result_View.CandidateID = L.candidate_Id   
  
IF EXISTS (  
  SELECT *  
  FROM tb_result_view  
  )  
BEGIN  
 DECLARE @DynamicPivotQuery AS NVARCHAR(MAX)  
  ,@PivotColumnNames AS NVARCHAR(MAX)  
  ,@PivotSelectColumnNames AS NVARCHAR(MAX)  
  ,@PivotSumSelectColumnNames AS NVARCHAR(MAX)  
  ,@PivotLevel1SelectColumnNames AS NVARCHAR(MAX)  
  ,@PivotLevel2SelectColumnNames AS NVARCHAR(MAX)  
  ,@PivotSumLevel1SelectColumnNames AS NVARCHAR(max)  
  ,@PivotSumLevel2SelectColumnNames AS NVARCHAR(max)  
  
 --Get distinct values of the PIVOT Column        
 SELECT @PivotColumnNames = ISNULL(@PivotColumnNames + ',', '') + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  ) AS cat  
  
 --Get distinct values of the PIVOT Column with isnull        
 SELECT @PivotSelectColumnNames = ISNULL(@PivotSelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  ) AS cat  
  
 --Get distinct values of the PIVOT Column with isnull        
 SELECT @PivotLevel1SelectColumnNames = ISNULL(@PivotLevel1SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  WHERE TestLevel = 1  
  ) AS cat  
  
 --Get distinct values of the PIVOT Column with isnull        
 SELECT @PivotLevel2SelectColumnNames = ISNULL(@PivotLevel2SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  WHERE TestLevel = 2  
  ) AS cat  
  
 --select @PivotLevel1SelectColumnNames , @PivotLevel2SelectColumnNames        
 --Get distinct values of the PIVOT Column with isnull        
 SELECT @PivotSumSelectColumnNames = ISNULL(@PivotSumSelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  ) AS cat  
  
 SELECT @PivotSumLevel1SelectColumnNames = ISNULL(@PivotSumLevel1SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  WHERE TestLevel = 1  
  ) AS cat  
  
 SELECT @PivotSumLevel2SelectColumnNames = ISNULL(@PivotSumLevel2SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  WHERE TestLevel = 2  
  ) AS cat  
  
 PRINT @PivotSumSelectColumnNames  
  
   
 --Prepare the PIVOT query using the dynamic         
 SET @DynamicPivotQuery = N'        
     
SELECT JobPosition ,CandidateID ,CandidateName , Convert(varchar(20),LogggedinDate,103) ExamDate, ' + @PivotSumLevel1SelectColumnNames + ' ,Level1Result,' + @PivotSumLevel2SelectColumnNames + ' ,Level2Result    FROM (        
SELECT distinct JobID,JobPosition ,CandidateID ,CandidateName ,ExamDate,LogggedinDate,Level1Result,Level2Result,  ' + @PivotSelectColumnNames + '        
FROM tb_result_view    R    
PIVOT(sum(Score) for LevelSubject in (' + @PivotColumnNames + ')) as pvt        
) A        
WHERE Level1Result is not null or Level1Result <> 0  
GROUP BY JobID, JobPosition ,CandidateID ,CandidateName ,ExamDate,LogggedinDate  ,Level1Result,Level2Result    
ORDER BY CandidateID desc  
 ';  
  
 PRINT @DynamicPivotQuery  
  
 --Execute the Dynamic Pivot Query        
  
 EXEC sp_executesql @DynamicPivotQuery  
END  
ELSE  
BEGIN  
 SELECT 0 JobID  
  ,'Not Found' JobPosition  
  ,'' CandidateID  
  ,'' CandidateName  
  ,'' ExamDate  
  ,'' [1-Aptitude]  
  ,'' [1-Communication]  
  ,'' [1-DotNet]  
  ,'' [1-RDBMS]  
END
GO
/****** Object:  StoredProcedure [dbo].[GetResult_Details_03242020]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- select * from tb_result_view
--  [GetResult_Details]  1,0,'19/02/2020','19/02/2020' 
CREATE PROC [dbo].[GetResult_Details_03242020] 
	@JobPosition INT = 0
	,@CandidateID INT = 0
	,@StartDate NVARCHAR(10)
	,@EndDate NVARCHAR(10)
AS
SET NOCOUNT ON;

IF 1 = 0
BEGIN
	SET FMTONLY OFF
END

	  
DECLARE @SDate DATE
	,@EDate DATE

SET @SDATE = CONVERT(DATE, CONVERT(DATE, @StartDate, 103), 23)
SET @EDate = CONVERT(DATE, CONVERT(DATE, @EndDate, 103), 23)

PRINT @SDATE
PRINT @EDate

SET NOCOUNT ON;
truncate table tb_result_view
INSERT INTO tb_result_view 
SELECT DISTINCT RR.[Key_ID] JobID
	,RR.Job_Position JobPosition
	,C.KeyID CandidateID
	,C.First_Name + ' ' + C.Last_Name CandidateName
	,convert(VARCHAR(19), C.LoggedinTime, 103) ExamDate
	,convert(DATE, C.LoggedinTime, 103) LogggedinDate
	,RR.Subject
	,RR.LEVEL [TestLevel]
	,RR.score Score
	--,RR.STATUS [TestStatus]
	,'' TestStatus
	,cast(RR.LEVEL AS VARCHAR) + '-' + subject LevelSubject
	--,case when LTRIM(rtrim(Level1Result)) = '' OR Level1Result = NULL then 'SKIP' else Level1Result end Level1Result
	,isnull(Level1Result, '-') Level1Result
	,Level2Result

FROM  (select J.Key_ID,J.Job_Position, R.Candidate_id, Sl.Level,Sl.Subject_ID,S.Subject,SL.CutOffMarks
 , sum(score) score
  from tb_JobPosition J
 join tb_SubjectLevel SL on J.Key_ID = Sl.AppliedFor
 Join tb_Subject S on S.KeyID = SL.Subject_ID
 join tb_Question Q on Q.Subject_ID = Sl.Subject_ID and Q.Level_ID = Sl.Level
 
 left join (select  distinct question_id, candidate_id,Level_ID, t.Subject_ID,    t.score from  tb_Result t
 join tb_Question Q on Q.KeyID = t.Question_ID ) R on R.Question_ID = Q.KeyID
  group by  J.Key_ID,J.Job_Position, R.Candidate_id, Sl.Level,Sl.Subject_ID,S.Subject,SL.CutOffMarks
 ) RR
 JOIN tb_Candidate C on RR.Candidate_id = C.KeyID
LEFT JOIN (
	SELECT Candidate_id
		,[1] AS Level1Result
		,[2] AS Level2Result
	FROM (
		SELECT Candidate_id
			,LEVEL
			,CASE 
				WHEN LEVEL = 1
					AND sum(FailResult) > 0
					THEN 'FAIL'
					WHEN LEVEL = 1
					AND sum(FailResult) = 0
					THEN 'PASS'
				WHEN LEVEL = 1
					AND sum(FailResult) = 0
					AND sum(PassResult) = 0
					THEN 'SKIP'
				WHEN LEVEL = 2
					AND sum(FailResult) > 0
					THEN 'HR to Decide'
				ELSE '-'
				END LevelResult
		FROM (
			SELECT Candidate_id
				,SR.LEVEL
				,score
				,CutOffMarks
				,CASE 
					WHEN SR.score >= CutOffMarks
						THEN 1
					ELSE 0
					END PassResult
				,CASE 
					WHEN SR.score < CutOffMarks
						THEN 1
					ELSE 0
					END FailResult
			FROM tb_Subject_Result SR
			JOIN tb_SubjectLevel SL ON SR.Subject_ID = SL.Subject_ID
				AND SR.LEVEL = SL.LEVEL
			WHERE AppliedFor = @JobPosition
				AND (
					Candidate_id = @CandidateID
					OR @CandidateID = 0
					)
			) A
		GROUP BY Candidate_id
			,LEVEL
		) t
	PIVOT(max(LevelResult) FOR LEVEL IN (
				[1]
				,[2]
				)) AS pvt
	) TestResult ON TestResult.Candidate_id = RR.Candidate_id
WHERE (
		RR.Candidate_id = @CandidateID
		OR @CandidateID = 0
		)
	AND (
		@JobPosition = 0
		OR RR.[Key_ID] = @JobPosition
		)
	AND convert(DATE, C.LoggedinTime, 103) >= convert(DATE, @SDate, 103)
	AND convert(DATE, C.LoggedinTime, 103) <= convert(DATE, @EDate, 103)
ORDER BY CandidateName
	,Convert(DATE, c.LoggedinTime, 103) DESC

 --   select * from tb_result_view  
     
IF EXISTS (
		SELECT *
		FROM tb_result_view
		)
BEGIN
	DECLARE @DynamicPivotQuery AS NVARCHAR(MAX)
		,@PivotColumnNames AS NVARCHAR(MAX)
		,@PivotSelectColumnNames AS NVARCHAR(MAX)
		,@PivotSumSelectColumnNames AS NVARCHAR(MAX)
		,@PivotLevel1SelectColumnNames AS NVARCHAR(MAX)
		,@PivotLevel2SelectColumnNames AS NVARCHAR(MAX)
		,@PivotSumLevel1SelectColumnNames AS NVARCHAR(max)
		,@PivotSumLevel2SelectColumnNames AS NVARCHAR(max)

	--Get distinct values of the PIVOT Column      
	SELECT @PivotColumnNames = ISNULL(@PivotColumnNames + ',', '') + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		) AS cat

	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotSelectColumnNames = ISNULL(@PivotSelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		) AS cat

	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotLevel1SelectColumnNames = ISNULL(@PivotLevel1SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 1
		) AS cat

	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotLevel2SelectColumnNames = ISNULL(@PivotLevel2SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 2
		) AS cat

	--select @PivotLevel1SelectColumnNames , @PivotLevel2SelectColumnNames      
	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotSumSelectColumnNames = ISNULL(@PivotSumSelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		) AS cat

	SELECT @PivotSumLevel1SelectColumnNames = ISNULL(@PivotSumLevel1SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 1
		) AS cat

	SELECT @PivotSumLevel2SelectColumnNames = ISNULL(@PivotSumLevel2SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 2
		) AS cat

	PRINT @PivotSumSelectColumnNames

	--Prepare the PIVOT query using the dynamic       
	SET @DynamicPivotQuery = N'      
   
SELECT JobPosition ,CandidateID ,CandidateName ,ExamDate, ' + @PivotSumLevel1SelectColumnNames + ' , Level1Result as [Level 1 Result],' + @PivotSumLevel2SelectColumnNames + ',Level2Result   FROM (      
SELECT distinct JobID,JobPosition ,CandidateID ,CandidateName ,ExamDate,Level1Result,Level2Result,  ' + @PivotSelectColumnNames + '      
FROM tb_result_view      
pivot(sum(Score) for LevelSubject in (' + @PivotColumnNames + ')) as pvt      
) A      
GROUP BY JobID, JobPosition ,CandidateID ,CandidateName ,ExamDate  ,Level1Result,Level2Result  
ORDER BY CandidateID desc
 ';

	PRINT @DynamicPivotQuery

	--Execute the Dynamic Pivot Query      
	EXEC sp_executesql @DynamicPivotQuery
END
ELSE
BEGIN
	SELECT 0 JobID
		,'Not Found' JobPosition
		,'' CandidateID
		,'' CandidateName
		,'' ExamDate
		,'' [1-Aptitude]
		,'' [1-Communication]
		,'' [1-DotNet]
		,'' [1-RDBMS]
END
GO
/****** Object:  StoredProcedure [dbo].[GetResult_Details_03312020]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- select * from tb_result_view
 
--  [GetResult_Details] 1,0,'19/02/2020','19/03/2020' 
CREATE PROC [dbo].[GetResult_Details_03312020] 
	@JobPosition INT = 0
	,@CandidateID INT = 0
	,@StartDate NVARCHAR(10)
	,@EndDate NVARCHAR(10)
AS
SET NOCOUNT ON;

IF 1 = 0
BEGIN
	SET FMTONLY OFF
END

	  
DECLARE @SDate DATE
	,@EDate DATE

SET @SDATE = CONVERT(DATE, CONVERT(DATE, @StartDate, 103), 23)
SET @EDate = CONVERT(DATE, CONVERT(DATE, @EndDate, 103), 23)

PRINT @SDATE
PRINT @EDate

SET NOCOUNT ON;

IF OBJECT_ID('tempdb..#Results') IS NOT NULL DROP TABLE #Results

IF OBJECT_ID('tempdb..#Candi') IS NOT NULL DROP TABLE #Candi

IF OBJECT_ID('tempdb..#LevelStatus') IS NOT NULL DROP TABLE #LevelStatus
 
 
 
 SELECT distinct convert(date,c.LoggedinTime, 103) LoggedDate, C.keyid CandidateID, C.first_name, C.Last_Name, key_id JobPositionID,Job_Position,Sl.Level,S.keyid SubjectID,S.Subject, SL.No_of_Question,SL.CutOffMarks   
	INTO #Candi 
	  FROM tb_jobposition J
	JOIN tb_SubjectLevel SL on SL.AppliedFor = J.Key_ID
	JOIN tb_subject S on SL.Subject_id = S.keyid
	JOIN tb_Question Q on Q.Subject_ID  = Sl.Subject_ID and Q.Level_ID = Sl.Level
	JOIN tb_Candidate C on C.Applied_For = J.key_id
	WHERE (C.Applied_For = @JobPosition or @JobPosition = 0)
	and  convert(DATE, C.LoggedinTime, 103) >= convert(DATE, @SDate, 103)
			AND convert(DATE, C.LoggedinTime, 103) <= convert(DATE, @EDate, 103)
  
	 
		--select distinct   r.candidate_id,Q.level_id ResLevel,  r.Subject_ID ResSubjectID,
		--SUM(score) score 
		 
		-- ,case when SUM(score) >= CutOffMarks  and level_id = 1 then 0 ELSE 1 END ResStatus
		-- INTO #Results 
		-- from  (select distinct Candidate_id,Subject_ID,score,Question_ID, isattended from tb_result )r 
		-- Join tb_Question Q on r.Question_ID = q.KeyID
		-- Join tb_candidate c on C.keyid = r.candidate_id
		-- join tb_SubjectLevel SL on SL.Subject_ID = Q.Subject_ID and SL.Level = Q.Level_ID
		--where   score is not null   -- and  candidate_id = 5735
		--and  convert(DATE, C.LoggedinTime, 103) >= convert(DATE, @SDate, 103)
		--	AND convert(DATE, C.LoggedinTime, 103) <= convert(DATE, @EDate, 103)
		-- group by  candidate_id,level_id,R.Subject_ID ,CutOffMarks 

		
				SELECT DISTINCT Candidate_id
					,level_id ResLevel
					,Res.Subject_ID ResSubjectID
					,score
					,cutoffmarks
					,case when  score  >= CutOffMarks  and level_id = 1 then 0 ELSE 1 END ResStatus
					,CASE 
						WHEN score >= CutOffMarks
							THEN 1
						ELSE 0
						END ResPassStatus
					,CASE 
						WHEN score < CutOffMarks
							THEN 1
						ELSE 0
						END ResFailStatus
						INTO #Results 
				FROM (
					SELECT DISTINCT Candidate_id
						,q.level_id
						,R.Subject_ID
						,sum(score) score
					FROM tb_result r
					JOIN tb_question q ON r.question_id = q.keyid
					GROUP BY Candidate_id
						,q.level_id
						,R.Subject_ID
					) Res
				JOIN tb_subjectlevel sl ON res.subject_id = sl.subject_id
					AND LEVEL = level_id
					AND (sl.appliedfor =  @JobPosition or @JobPosition = 0)
				JOIN tb_candidate c ON res.candidate_id = c.keyid
				WHERE       score is not null   -- and  candidate_id = 5735
		 and  convert(DATE, C.LoggedinTime, 103) >= convert(DATE, @SDate, 103)
		 	AND convert(DATE, C.LoggedinTime, 103) <= convert(DATE, @EDate, 103)

		-- Select * from tb_result_view

		
truncate table tb_result_view
INSERT INTO tb_result_view 

	SELECT distinct C.JobPositionID,C.Job_Position, C.CandidateID, C.First_Name + ' ' + C.Last_Name CandidateName,
	C.LoggedDate ExamDate,C.LoggedDate,
	Subject,C.Level,
	 --cast(ISNULL(cast(R.score as varchar),'-') as varchar) DisplayScore
	 SCORE,'', cast( C.Level as varchar) + '-' + Subject LevelSubject,
	''--	 CASE WHEN C.Level = 1 then  ISNULL(LevelResult.ResStatus, 0) END Level1Result
	,''--  CASE WHEN C.Level = 2 then  ISNULL(LevelResult.ResStatus, '-') END Level2Result

	FROM #Candi C
	LEFT JOIN #Results R on R.Candidate_id = C.candidateId and R.reslevel = C.level and R.ressubjectid = c.subjectid
  
	Select distinct RR.candidate_id, cc.level,case when sum(Rr.ResStatus) >1 then 'FAIL' else 'PASS' end ResStatus
	INTO #LevelResult FROM #Candi CC
	Left Join #Results RR on RR.Candidate_id = CC.candidateId and RR.reslevel = CC.level and RR.ressubjectid = cC.subjectid
	group by Rr.candidate_id, cc.level,ResStatus
  
   
	

 --   select * from tb_result_view  
 --   select * from #LevelStatus
  
UPDATE       tb_Result_View
SET                Level1Result = L.Level1Result, Level2Result =L.Level2Result
FROM            tb_Result_View INNER JOIN
                        (
						SELECT Candidate_id, [1] as Level1Result,isnull([2],'-') as Level2Result  FROM
	  (
			  select Candidate_id, level,isnull(ResStatus,'-') ResStatus
			  from #LevelResult
		) SRC
		 
		 PIVOT
		  (
			maX(ResStatus) for level in([1] ,[2])
		  )pvt
						) AS L ON tb_Result_View.CandidateID = L.candidate_Id 
IF EXISTS (
		SELECT *
		FROM tb_result_view
		)
BEGIN
	DECLARE @DynamicPivotQuery AS NVARCHAR(MAX)
		,@PivotColumnNames AS NVARCHAR(MAX)
		,@PivotSelectColumnNames AS NVARCHAR(MAX)
		,@PivotSumSelectColumnNames AS NVARCHAR(MAX)
		,@PivotLevel1SelectColumnNames AS NVARCHAR(MAX)
		,@PivotLevel2SelectColumnNames AS NVARCHAR(MAX)
		,@PivotSumLevel1SelectColumnNames AS NVARCHAR(max)
		,@PivotSumLevel2SelectColumnNames AS NVARCHAR(max)

	--Get distinct values of the PIVOT Column      
	SELECT @PivotColumnNames = ISNULL(@PivotColumnNames + ',', '') + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		) AS cat

	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotSelectColumnNames = ISNULL(@PivotSelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		) AS cat

	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotLevel1SelectColumnNames = ISNULL(@PivotLevel1SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 1
		) AS cat

	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotLevel2SelectColumnNames = ISNULL(@PivotLevel2SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 2
		) AS cat

	--select @PivotLevel1SelectColumnNames , @PivotLevel2SelectColumnNames      
	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotSumSelectColumnNames = ISNULL(@PivotSumSelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		) AS cat

	SELECT @PivotSumLevel1SelectColumnNames = ISNULL(@PivotSumLevel1SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 1
		) AS cat

	SELECT @PivotSumLevel2SelectColumnNames = ISNULL(@PivotSumLevel2SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 2
		) AS cat

	PRINT @PivotSumSelectColumnNames

 
	--Prepare the PIVOT query using the dynamic       
	SET @DynamicPivotQuery = N'      
   
SELECT JobPosition ,CandidateID ,CandidateName ,ExamDate, ' + @PivotSumLevel1SelectColumnNames + ' ,Level1Result,' + @PivotSumLevel2SelectColumnNames + ' ,Level2Result    FROM (      
SELECT distinct JobID,JobPosition ,CandidateID ,CandidateName ,ExamDate,Level1Result,Level2Result,  ' + @PivotSelectColumnNames + '      
FROM tb_result_view    R  
PIVOT(sum(Score) for LevelSubject in (' + @PivotColumnNames + ')) as pvt      
) A      
WHERE Level1Result is not null or Level1Result <> 0
GROUP BY JobID, JobPosition ,CandidateID ,CandidateName ,ExamDate  ,Level1Result,Level2Result  
ORDER BY CandidateID desc
 ';

	PRINT @DynamicPivotQuery

	--Execute the Dynamic Pivot Query      

	EXEC sp_executesql @DynamicPivotQuery
END
ELSE
BEGIN
	SELECT 0 JobID
		,'Not Found' JobPosition
		,'' CandidateID
		,'' CandidateName
		,'' ExamDate
		,'' [1-Aptitude]
		,'' [1-Communication]
		,'' [1-DotNet]
		,'' [1-RDBMS]
END
GO
/****** Object:  StoredProcedure [dbo].[GetResult_Details_04012020]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- select * from tb_result_view
  
--  [GetResult_Details] 2,0,'01/04/2020','01/04/2020' 
CREATE PROC [dbo].[GetResult_Details_04012020] 
	@JobPosition INT = 0
	,@CandidateID INT = 0
	,@StartDate NVARCHAR(10)
	,@EndDate NVARCHAR(10)
AS
SET NOCOUNT ON;

IF 1 = 0
BEGIN
	SET FMTONLY OFF
END

	  
DECLARE @SDate DATE
	,@EDate DATE

SET @SDATE = CONVERT(DATE, CONVERT(DATE, @StartDate, 103), 23)
SET @EDate = CONVERT(DATE, CONVERT(DATE, @EndDate, 103), 23)

PRINT @SDATE
PRINT @EDate

SET NOCOUNT ON;

IF OBJECT_ID('tempdb..#Results') IS NOT NULL DROP TABLE #Results

IF OBJECT_ID('tempdb..#Candi') IS NOT NULL DROP TABLE #Candi

IF OBJECT_ID('tempdb..#LevelStatus') IS NOT NULL DROP TABLE #LevelStatus
 
 
 
 SELECT distinct convert(date,c.LoggedinTime, 103) LoggedDate, C.keyid CandidateID, C.first_name, C.Last_Name, key_id JobPositionID,Job_Position,Sl.Level,S.keyid SubjectID,S.Subject, SL.No_of_Question,SL.CutOffMarks   
	INTO #Candi 
	  FROM tb_jobposition J
	JOIN tb_SubjectLevel SL on SL.AppliedFor = J.Key_ID
	JOIN tb_subject S on SL.Subject_id = S.keyid
	JOIN tb_Question Q on Q.Subject_ID  = Sl.Subject_ID and Q.Level_ID = Sl.Level
	JOIN tb_Candidate C on C.Applied_For = J.key_id
	WHERE (C.Applied_For = @JobPosition or @JobPosition = 0)
	and  convert(DATE, C.LoggedinTime, 103) >= convert(DATE, @SDate, 103)
			AND convert(DATE, C.LoggedinTime, 103) <= convert(DATE, @EDate, 103)
  
	 
		--select distinct   r.candidate_id,Q.level_id ResLevel,  r.Subject_ID ResSubjectID,
		--SUM(score) score 
		 
		-- ,case when SUM(score) >= CutOffMarks  and level_id = 1 then 0 ELSE 1 END ResStatus
		-- INTO #Results 
		-- from  (select distinct Candidate_id,Subject_ID,score,Question_ID, isattended from tb_result )r 
		-- Join tb_Question Q on r.Question_ID = q.KeyID
		-- Join tb_candidate c on C.keyid = r.candidate_id
		-- join tb_SubjectLevel SL on SL.Subject_ID = Q.Subject_ID and SL.Level = Q.Level_ID
		--where   score is not null   -- and  candidate_id = 5735
		--and  convert(DATE, C.LoggedinTime, 103) >= convert(DATE, @SDate, 103)
		--	AND convert(DATE, C.LoggedinTime, 103) <= convert(DATE, @EDate, 103)
		-- group by  candidate_id,level_id,R.Subject_ID ,CutOffMarks 

		
				SELECT DISTINCT Candidate_id
					,level_id ResLevel
					,Res.Subject_ID ResSubjectID
					,score
					,cutoffmarks
					,case when  score  >= CutOffMarks  and level_id = 1 then 0 ELSE 1 END ResStatus
					,CASE 
						WHEN score >= CutOffMarks
							THEN 1
						ELSE 0
						END ResPassStatus
					,CASE 
						WHEN score < CutOffMarks
							THEN 1
						ELSE 0
						END ResFailStatus
						INTO #Results 
				FROM (
					SELECT DISTINCT Candidate_id
						,q.level_id
						,R.Subject_ID
						,sum(score) score
					FROM (Select distinct candidate_id,Subject_Id,Question_id,Score,isattended   from tb_result ) r
					JOIN tb_question q ON r.question_id = q.keyid
					GROUP BY Candidate_id
						,q.level_id
						,R.Subject_ID
					) Res
				JOIN tb_subjectlevel sl ON res.subject_id = sl.subject_id
					AND LEVEL = level_id
					AND (sl.appliedfor =  @JobPosition or @JobPosition = 0)
				JOIN tb_candidate c ON res.candidate_id = c.keyid
				WHERE       score is not null   -- and  candidate_id = 5735
		 and  convert(DATE, C.LoggedinTime, 103) >= convert(DATE, @SDate, 103)
		 	AND convert(DATE, C.LoggedinTime, 103) <= convert(DATE, @EDate, 103)
		 
		-- Select * from tb_result_view

		
truncate table tb_result_view
INSERT INTO tb_result_view 

	SELECT distinct C.JobPositionID,C.Job_Position, C.CandidateID, C.First_Name + ' ' + C.Last_Name CandidateName,
	C.LoggedDate ExamDate,C.LoggedDate,
	Subject,C.Level,
	 --cast(ISNULL(cast(R.score as varchar),'-') as varchar) DisplayScore
	 SCORE,'', cast( C.Level as varchar) + '-' + Subject LevelSubject,
	''--	 CASE WHEN C.Level = 1 then  ISNULL(LevelResult.ResStatus, 0) END Level1Result
	,''--  CASE WHEN C.Level = 2 then  ISNULL(LevelResult.ResStatus, '-') END Level2Result

	FROM #Candi C
	LEFT JOIN #Results R on R.Candidate_id = C.candidateId and R.reslevel = C.level and R.ressubjectid = c.subjectid
  
	--Select distinct RR.candidate_id, cc.level,case when sum(Rr.ResStatus) >0  and Level =1 then 'FAIL' else 'PASS' end ResStatus
	--INTO #LevelResult FROM #Candi CC
	--Left Join #Results RR on RR.Candidate_id = CC.candidateId and RR.reslevel = CC.level and RR.ressubjectid = cC.subjectid
	--group by Rr.candidate_id, cc.level 
   
	

	
  select candidateid candidate_id ,level,case when sum(cast(failres as int)) > 0 then 'FAIL' else 'PASS' end ResStatus
  INTO   #LevelResult
  from
  (
  select distinct tv.candidateid,
  level--tv.subject,level,score,cutoffmarks 
  ,case when score is null then '-' 
  when score >=cutoffmarks then '0' else '1' end failres
   ,case when score is null then '-' 
  when score >=cutoffmarks then 'Pass' else 'Fail' end  res
   
  from tb_result_view tv
  join tb_subject s on tv.subject = s.subject
  join tb_subjectlevel sl on sl.subject_id = s.keyid and sl.AppliedFor = tv.JobID and sl.level = tv.testlevel
  
  ) A
  where failres <> '-'
  group by candidateid,level
  order by CandidateID,level



 --   select * from tb_result_view  
  --   select * from #LevelResult
  
UPDATE       tb_Result_View
SET                Level1Result = L.Level1Result, Level2Result =L.Level2Result
FROM            tb_Result_View INNER JOIN
                        (
						SELECT Candidate_id, [1] as Level1Result,isnull([2],'-') as Level2Result  FROM
	  (
			  select candidate_id, level,isnull(ResStatus,'-') ResStatus
			  from #LevelResult
		) SRC
		 
		 PIVOT
		  (
			maX(ResStatus) for level in([1] ,[2])
		  )pvt
						) AS L ON tb_Result_View.CandidateID = L.candidate_Id 

IF EXISTS (
		SELECT *
		FROM tb_result_view
		)
BEGIN
	DECLARE @DynamicPivotQuery AS NVARCHAR(MAX)
		,@PivotColumnNames AS NVARCHAR(MAX)
		,@PivotSelectColumnNames AS NVARCHAR(MAX)
		,@PivotSumSelectColumnNames AS NVARCHAR(MAX)
		,@PivotLevel1SelectColumnNames AS NVARCHAR(MAX)
		,@PivotLevel2SelectColumnNames AS NVARCHAR(MAX)
		,@PivotSumLevel1SelectColumnNames AS NVARCHAR(max)
		,@PivotSumLevel2SelectColumnNames AS NVARCHAR(max)

	--Get distinct values of the PIVOT Column      
	SELECT @PivotColumnNames = ISNULL(@PivotColumnNames + ',', '') + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		) AS cat

	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotSelectColumnNames = ISNULL(@PivotSelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		) AS cat

	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotLevel1SelectColumnNames = ISNULL(@PivotLevel1SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 1
		) AS cat

	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotLevel2SelectColumnNames = ISNULL(@PivotLevel2SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 2
		) AS cat

	--select @PivotLevel1SelectColumnNames , @PivotLevel2SelectColumnNames      
	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotSumSelectColumnNames = ISNULL(@PivotSumSelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		) AS cat

	SELECT @PivotSumLevel1SelectColumnNames = ISNULL(@PivotSumLevel1SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 1
		) AS cat

	SELECT @PivotSumLevel2SelectColumnNames = ISNULL(@PivotSumLevel2SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 2
		) AS cat

	PRINT @PivotSumSelectColumnNames

 
	--Prepare the PIVOT query using the dynamic       
	SET @DynamicPivotQuery = N'      
   
SELECT JobPosition ,CandidateID ,CandidateName ,ExamDate, ' + @PivotSumLevel1SelectColumnNames + ' ,Level1Result,' + @PivotSumLevel2SelectColumnNames + ' ,Level2Result    FROM (      
SELECT distinct JobID,JobPosition ,CandidateID ,CandidateName ,ExamDate,Level1Result,Level2Result,  ' + @PivotSelectColumnNames + '      
FROM tb_result_view    R  
PIVOT(sum(Score) for LevelSubject in (' + @PivotColumnNames + ')) as pvt      
) A      
WHERE Level1Result is not null or Level1Result <> 0
GROUP BY JobID, JobPosition ,CandidateID ,CandidateName ,ExamDate  ,Level1Result,Level2Result  
ORDER BY CandidateID desc
 ';

	PRINT @DynamicPivotQuery

	--Execute the Dynamic Pivot Query      

	EXEC sp_executesql @DynamicPivotQuery
END
ELSE
BEGIN
	SELECT 0 JobID
		,'Not Found' JobPosition
		,'' CandidateID
		,'' CandidateName
		,'' ExamDate
		,'' [1-Aptitude]
		,'' [1-Communication]
		,'' [1-DotNet]
		,'' [1-RDBMS]
END
GO
/****** Object:  StoredProcedure [dbo].[GetResult_Details_bk_07062021]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- select * from tb_result_view  
    
--  [GetResult_Details] 1,0,'01/06/2021','10/06/2021'   
CREATE PROC [dbo].[GetResult_Details_bk_07062021]   
 @JobPosition INT = 0  
 ,@CandidateID INT = 0  
 ,@StartDate NVARCHAR(10)  
 ,@EndDate NVARCHAR(10)  
AS  
SET NOCOUNT ON;  
  
IF 1 = 0  
BEGIN  
 SET FMTONLY OFF  
END  
  
     
DECLARE @SDate DATE  
 ,@EDate DATE  
  
SET @SDATE = CONVERT(DATE, CONVERT(DATE, @StartDate, 103), 23)  
SET @EDate = CONVERT(DATE, CONVERT(DATE, @EndDate, 103), 23)  
  
PRINT @SDATE  
PRINT @EDate  
  
SET NOCOUNT ON;  
  
IF OBJECT_ID('tempdb..#Results') IS NOT NULL DROP TABLE #Results  
  
IF OBJECT_ID('tempdb..#Candi') IS NOT NULL DROP TABLE #Candi  
  
IF OBJECT_ID('tempdb..#LevelStatus') IS NOT NULL DROP TABLE #LevelStatus  
   
   
   
 SELECT distinct convert(date,c.CreatedDate, 103) ExamDate, C.LoggedinTime, C.keyid CandidateID, C.first_name, C.Last_Name, key_id JobPositionID,Job_Position,Sl.Level,S.keyid SubjectID,S.Subject, SL.No_of_Question,SL.CutOffMarks     
 INTO #Candi   
   FROM tb_jobposition J  
 JOIN tb_SubjectLevel SL on SL.AppliedFor = J.Key_ID  
 JOIN tb_subject S on SL.Subject_id = S.keyid  
 JOIN tb_Question Q on Q.Subject_ID  = Sl.Subject_ID and Q.Level_ID = Sl.Level  
 JOIN tb_Candidate C on C.Applied_For = J.key_id  
 WHERE (C.Applied_For = @JobPosition or @JobPosition = 0)  
 and  convert(DATE, C.CreatedDate, 103) >= convert(DATE, @SDate, 103)  
   AND convert(DATE, C.CreatedDate, 103) <= convert(DATE, @EDate, 103)  
    
    
  --select distinct   r.candidate_id,Q.level_id ResLevel,  r.Subject_ID ResSubjectID,  
  --SUM(score) score   
     
  -- ,case when SUM(score) >= CutOffMarks  and level_id = 1 then 0 ELSE 1 END ResStatus  
  -- INTO #Results   
  -- from  (select distinct Candidate_id,Subject_ID,score,Question_ID, isattended from tb_result )r   
  -- Join tb_Question Q on r.Question_ID = q.KeyID  
  -- Join tb_candidate c on C.keyid = r.candidate_id  
  -- join tb_SubjectLevel SL on SL.Subject_ID = Q.Subject_ID and SL.Level = Q.Level_ID  
  --where   score is not null   -- and  candidate_id = 5735  
  --and  convert(DATE, C.CreatedDate, 103) >= convert(DATE, @SDate, 103)  
  -- AND convert(DATE, C.CreatedDate, 103) <= convert(DATE, @EDate, 103)  
  -- group by  candidate_id,level_id,R.Subject_ID ,CutOffMarks   
  
    
    SELECT DISTINCT Candidate_id  
     ,level_id ResLevel  
     ,Res.Subject_ID ResSubjectID  
     ,score  
     ,cutoffmarks  
     ,case when  score  >= CutOffMarks  and level_id = 1 then 0 ELSE 1 END ResStatus  
     ,CASE   
      WHEN score >= CutOffMarks  
       THEN 1  
      ELSE 0  
      END ResPassStatus  
     ,CASE   
      WHEN score < CutOffMarks  
       THEN 1  
      ELSE 0  
      END ResFailStatus  
      INTO #Results   
    FROM (  
     SELECT DISTINCT Candidate_id  
      ,q.level_id  
      ,R.Subject_ID  
      ,sum(score) score  
     FROM (Select distinct candidate_id,Subject_Id,Question_id,isnull(Score,0) score,isattended   from tb_result ) r  
     JOIN tb_question q ON r.question_id = q.keyid  
     GROUP BY Candidate_id  
      ,q.level_id  
      ,R.Subject_ID  
     ) Res  
    JOIN tb_subjectlevel sl ON res.subject_id = sl.subject_id  
     AND LEVEL = level_id  
     AND (sl.appliedfor =  @JobPosition or @JobPosition = 0)  
    JOIN tb_candidate c ON res.candidate_id = c.keyid  
    WHERE       score is not null   -- and  candidate_id = 5735  
   and  convert(DATE, C.CreatedDate, 103) >= convert(DATE, @SDate, 103)  
    AND convert(DATE, C.CreatedDate, 103) <= convert(DATE, @EDate, 103)  
     
  -- Select * from tb_result_view  
  
    
truncate table tb_result_view  
INSERT INTO tb_result_view   
  
 SELECT distinct C.JobPositionID,C.Job_Position, C.CandidateID, C.First_Name + ' ' + C.Last_Name CandidateName,  
 C.ExamDate ExamDate,C.LoggedinTime,  
 Subject,C.Level,  
  --cast(ISNULL(cast(R.score as varchar),'-') as varchar) DisplayScore  
  SCORE,'', cast( C.Level as varchar) + '-' + Subject LevelSubject,  
 ''--  CASE WHEN C.Level = 1 then  ISNULL(LevelResult.ResStatus, 0) END Level1Result  
 ,''--  CASE WHEN C.Level = 2 then  ISNULL(LevelResult.ResStatus, '-') END Level2Result  
  
 FROM #Candi C  
 LEFT JOIN #Results R on R.Candidate_id = C.candidateId and R.reslevel = C.level and R.ressubjectid = c.subjectid  
    
 --Select distinct RR.candidate_id, cc.level,case when sum(Rr.ResStatus) >0  and Level =1 then 'FAIL' else 'PASS' end ResStatus  
 --INTO #LevelResult FROM #Candi CC  
 --Left Join #Results RR on RR.Candidate_id = CC.candidateId and RR.reslevel = CC.level and RR.ressubjectid = cC.subjectid  
 --group by Rr.candidate_id, cc.level   
     
   
  
   
  select candidateid candidate_id ,level,case when sum(cast(failres as int)) > 0 then 'FAIL' else 'PASS' end ResStatus  
  INTO   #LevelResult  
  from  
  (  
  select distinct tv.candidateid,  
  level--tv.subject,level,score,cutoffmarks   
  ,case when score is null then '-'   
  when score >=cutoffmarks then '0' else '1' end failres  
   ,case when score is null then '-'   
  when score >=cutoffmarks then 'Pass' else 'Fail' end  res  
     
  from tb_result_view tv  
  join tb_subject s on tv.subject = s.subject  
  join tb_subjectlevel sl on sl.subject_id = s.keyid and sl.AppliedFor = tv.JobID and sl.level = tv.testlevel  
    
  ) A  
  where failres <> '-'  
  group by candidateid,level  
  order by CandidateID,level  
  
  
  
 --   select * from tb_result_view    
  --   select * from #LevelResult  
    
UPDATE       tb_Result_View  
SET                Level1Result = L.Level1Result, Level2Result =L.Level2Result  
FROM            tb_Result_View INNER JOIN  
                        (  
      SELECT Candidate_id, [1] as Level1Result,isnull([2],'-') as Level2Result  FROM  
   (  
     select candidate_id, level,isnull(ResStatus,'-') ResStatus  
     from #LevelResult  
  ) SRC  
     
   PIVOT  
    (  
   maX(ResStatus) for level in([1] ,[2])  
    )pvt  
      ) AS L ON tb_Result_View.CandidateID = L.candidate_Id   
  
IF EXISTS (  
  SELECT *  
  FROM tb_result_view  
  )  
BEGIN  
 DECLARE @DynamicPivotQuery AS NVARCHAR(MAX)  
  ,@PivotColumnNames AS NVARCHAR(MAX)  
  ,@PivotSelectColumnNames AS NVARCHAR(MAX)  
  ,@PivotSumSelectColumnNames AS NVARCHAR(MAX)  
  ,@PivotLevel1SelectColumnNames AS NVARCHAR(MAX)  
  ,@PivotLevel2SelectColumnNames AS NVARCHAR(MAX)  
  ,@PivotSumLevel1SelectColumnNames AS NVARCHAR(max)  
  ,@PivotSumLevel2SelectColumnNames AS NVARCHAR(max)  
  
 --Get distinct values of the PIVOT Column        
 SELECT @PivotColumnNames = ISNULL(@PivotColumnNames + ',', '') + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  ) AS cat  
  
 --Get distinct values of the PIVOT Column with isnull        
 SELECT @PivotSelectColumnNames = ISNULL(@PivotSelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  ) AS cat  
  
 --Get distinct values of the PIVOT Column with isnull        
 SELECT @PivotLevel1SelectColumnNames = ISNULL(@PivotLevel1SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  WHERE TestLevel = 1  
  ) AS cat  
  
 --Get distinct values of the PIVOT Column with isnull        
 SELECT @PivotLevel2SelectColumnNames = ISNULL(@PivotLevel2SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  WHERE TestLevel = 2  
  ) AS cat  
  
 --select @PivotLevel1SelectColumnNames , @PivotLevel2SelectColumnNames        
 --Get distinct values of the PIVOT Column with isnull        
 SELECT @PivotSumSelectColumnNames = ISNULL(@PivotSumSelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  ) AS cat  
  
 SELECT @PivotSumLevel1SelectColumnNames = ISNULL(@PivotSumLevel1SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  WHERE TestLevel = 1  
  ) AS cat  
  
 SELECT @PivotSumLevel2SelectColumnNames = ISNULL(@PivotSumLevel2SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  WHERE TestLevel = 2  
  ) AS cat  
  
 PRINT @PivotSumSelectColumnNames  
  
   
 --Prepare the PIVOT query using the dynamic         
 SET @DynamicPivotQuery = N'        
     
SELECT JobPosition ,CandidateID ,CandidateName , Convert(varchar(20),LogggedinDate,103) ExamDate, ' + @PivotSumLevel1SelectColumnNames + ' ,Level1Result,' + @PivotSumLevel2SelectColumnNames + ' ,Level2Result    FROM (        
SELECT distinct JobID,JobPosition ,CandidateID ,CandidateName ,ExamDate,LogggedinDate,Level1Result,Level2Result,  ' + @PivotSelectColumnNames + '        
FROM tb_result_view    R    
PIVOT(sum(Score) for LevelSubject in (' + @PivotColumnNames + ')) as pvt        
) A        
WHERE Level1Result is not null or Level1Result <> 0  
GROUP BY JobID, JobPosition ,CandidateID ,CandidateName ,ExamDate,LogggedinDate  ,Level1Result,Level2Result    
ORDER BY CandidateID desc  
 ';  
  
 PRINT @DynamicPivotQuery  
  
 --Execute the Dynamic Pivot Query        
  
 EXEC sp_executesql @DynamicPivotQuery  
END  
ELSE  
BEGIN  
 SELECT 0 JobID  
  ,'Not Found' JobPosition  
  ,'' CandidateID  
  ,'' CandidateName  
  ,'' ExamDate  
  ,'' [1-Aptitude]  
  ,'' [1-Communication]  
  ,'' [1-DotNet]  
  ,'' [1-RDBMS]  
END
GO
/****** Object:  StoredProcedure [dbo].[GetResult_Details_bk_27052021]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- select * from tb_result_view  
    
--  [GetResult_Details] 1,0,'27/05/2021','27/05/2021'   
CREATE PROC [dbo].[GetResult_Details_bk_27052021]   
 @JobPosition INT = 0  
 ,@CandidateID INT = 0  
 ,@StartDate NVARCHAR(10)  
 ,@EndDate NVARCHAR(10)  
AS  
SET NOCOUNT ON;  
  
IF 1 = 0  
BEGIN  
 SET FMTONLY OFF  
END  
  
     
DECLARE @SDate DATE  
 ,@EDate DATE  
  
SET @SDATE = CONVERT(DATE, CONVERT(DATE, @StartDate, 103), 23)  
SET @EDate = CONVERT(DATE, CONVERT(DATE, @EndDate, 103), 23)  
  
PRINT @SDATE  
PRINT @EDate  
  
SET NOCOUNT ON;  
  
IF OBJECT_ID('tempdb..#Results') IS NOT NULL DROP TABLE #Results  
  
IF OBJECT_ID('tempdb..#Candi') IS NOT NULL DROP TABLE #Candi  
  
IF OBJECT_ID('tempdb..#LevelStatus') IS NOT NULL DROP TABLE #LevelStatus  
   
   
   
 SELECT distinct convert(date,c.CreatedDate, 103) ExamDate, C.LoggedinTime, C.keyid CandidateID, C.first_name, C.Last_Name, key_id JobPositionID,Job_Position,Sl.Level,S.keyid SubjectID,S.Subject, SL.No_of_Question,SL.CutOffMarks     
 INTO #Candi   
   FROM tb_jobposition J  
 JOIN tb_SubjectLevel SL on SL.AppliedFor = J.Key_ID  
 JOIN tb_subject S on SL.Subject_id = S.keyid  
 JOIN tb_Question Q on Q.Subject_ID  = Sl.Subject_ID and Q.Level_ID = Sl.Level  
 JOIN tb_Candidate C on C.Applied_For = J.key_id  
 WHERE (C.Applied_For = @JobPosition or @JobPosition = 0)  
 and  convert(DATE, C.CreatedDate, 103) >= convert(DATE, @SDate, 103)  
   AND convert(DATE, C.CreatedDate, 103) <= convert(DATE, @EDate, 103)  
    
    
  --select distinct   r.candidate_id,Q.level_id ResLevel,  r.Subject_ID ResSubjectID,  
  --SUM(score) score   
     
  -- ,case when SUM(score) >= CutOffMarks  and level_id = 1 then 0 ELSE 1 END ResStatus  
  -- INTO #Results   
  -- from  (select distinct Candidate_id,Subject_ID,score,Question_ID, isattended from tb_result )r   
  -- Join tb_Question Q on r.Question_ID = q.KeyID  
  -- Join tb_candidate c on C.keyid = r.candidate_id  
  -- join tb_SubjectLevel SL on SL.Subject_ID = Q.Subject_ID and SL.Level = Q.Level_ID  
  --where   score is not null   -- and  candidate_id = 5735  
  --and  convert(DATE, C.CreatedDate, 103) >= convert(DATE, @SDate, 103)  
  -- AND convert(DATE, C.CreatedDate, 103) <= convert(DATE, @EDate, 103)  
  -- group by  candidate_id,level_id,R.Subject_ID ,CutOffMarks   
  
    
    SELECT DISTINCT Candidate_id  
     ,level_id ResLevel  
     ,Res.Subject_ID ResSubjectID  
     ,score  
     ,cutoffmarks  
     ,case when  score  >= CutOffMarks  and level_id = 1 then 0 ELSE 1 END ResStatus  
     ,CASE   
      WHEN score >= CutOffMarks  
       THEN 1  
      ELSE 0  
      END ResPassStatus  
     ,CASE   
      WHEN score < CutOffMarks  
       THEN 1  
      ELSE 0  
      END ResFailStatus  
      INTO #Results   
    FROM (  
     SELECT DISTINCT Candidate_id  
      ,q.level_id  
      ,R.Subject_ID  
      ,sum(score) score  
     FROM (Select distinct candidate_id,Subject_Id,Question_id,isnull(Score,0) score,isattended   from tb_result ) r  
     JOIN tb_question q ON r.question_id = q.keyid  
     GROUP BY Candidate_id  
      ,q.level_id  
      ,R.Subject_ID  
     ) Res  
    JOIN tb_subjectlevel sl ON res.subject_id = sl.subject_id  
     AND LEVEL = level_id  
     AND (sl.appliedfor =  @JobPosition or @JobPosition = 0)  
    JOIN tb_candidate c ON res.candidate_id = c.keyid  
    WHERE       score is not null   -- and  candidate_id = 5735  
   and  convert(DATE, C.CreatedDate, 103) >= convert(DATE, @SDate, 103)  
    AND convert(DATE, C.CreatedDate, 103) <= convert(DATE, @EDate, 103)  
     
  -- Select * from tb_result_view  
  
    
truncate table tb_result_view  
INSERT INTO tb_result_view   
  
 SELECT distinct C.JobPositionID,C.Job_Position, C.CandidateID, C.First_Name + ' ' + C.Last_Name CandidateName,  
 C.ExamDate ExamDate,C.LoggedinTime,  
 Subject,C.Level,  
  --cast(ISNULL(cast(R.score as varchar),'-') as varchar) DisplayScore  
  SCORE,'', cast( C.Level as varchar) + '-' + Subject LevelSubject,  
 ''--  CASE WHEN C.Level = 1 then  ISNULL(LevelResult.ResStatus, 0) END Level1Result  
 ,''--  CASE WHEN C.Level = 2 then  ISNULL(LevelResult.ResStatus, '-') END Level2Result  
  
 FROM #Candi C  
 LEFT JOIN #Results R on R.Candidate_id = C.candidateId and R.reslevel = C.level and R.ressubjectid = c.subjectid  
    
 --Select distinct RR.candidate_id, cc.level,case when sum(Rr.ResStatus) >0  and Level =1 then 'FAIL' else 'PASS' end ResStatus  
 --INTO #LevelResult FROM #Candi CC  
 --Left Join #Results RR on RR.Candidate_id = CC.candidateId and RR.reslevel = CC.level and RR.ressubjectid = cC.subjectid  
 --group by Rr.candidate_id, cc.level   
     
   
  
   
  select candidateid candidate_id ,level,case when sum(cast(failres as int)) > 0 then 'FAIL' else 'PASS' end ResStatus  
  INTO   #LevelResult  
  from  
  (  
  select distinct tv.candidateid,  
  level--tv.subject,level,score,cutoffmarks   
  ,case when score is null then '-'   
  when score >=cutoffmarks then '0' else '1' end failres  
   ,case when score is null then '-'   
  when score >=cutoffmarks then 'Pass' else 'Fail' end  res  
     
  from tb_result_view tv  
  join tb_subject s on tv.subject = s.subject  
  join tb_subjectlevel sl on sl.subject_id = s.keyid and sl.AppliedFor = tv.JobID and sl.level = tv.testlevel  
    
  ) A  
  where failres <> '-'  
  group by candidateid,level  
  order by CandidateID,level  
  
  
  
 --   select * from tb_result_view    
  --   select * from #LevelResult  
    
UPDATE       tb_Result_View  
SET                Level1Result = L.Level1Result, Level2Result =L.Level2Result  
FROM            tb_Result_View INNER JOIN  
                        (  
      SELECT Candidate_id, [1] as Level1Result,isnull([2],'-') as Level2Result  FROM  
   (  
     select candidate_id, level,isnull(ResStatus,'-') ResStatus  
     from #LevelResult  
  ) SRC  
     
   PIVOT  
    (  
   maX(ResStatus) for level in([1] ,[2])  
    )pvt  
      ) AS L ON tb_Result_View.CandidateID = L.candidate_Id   
  
IF EXISTS (  
  SELECT *  
  FROM tb_result_view  
  )  
BEGIN  
 DECLARE @DynamicPivotQuery AS NVARCHAR(MAX)  
  ,@PivotColumnNames AS NVARCHAR(MAX)  
  ,@PivotSelectColumnNames AS NVARCHAR(MAX)  
  ,@PivotSumSelectColumnNames AS NVARCHAR(MAX)  
  ,@PivotLevel1SelectColumnNames AS NVARCHAR(MAX)  
  ,@PivotLevel2SelectColumnNames AS NVARCHAR(MAX)  
  ,@PivotSumLevel1SelectColumnNames AS NVARCHAR(max)  
  ,@PivotSumLevel2SelectColumnNames AS NVARCHAR(max)  
  
 --Get distinct values of the PIVOT Column        
 SELECT @PivotColumnNames = ISNULL(@PivotColumnNames + ',', '') + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  ) AS cat  
  
 --Get distinct values of the PIVOT Column with isnull        
 SELECT @PivotSelectColumnNames = ISNULL(@PivotSelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  ) AS cat  
  
 --Get distinct values of the PIVOT Column with isnull        
 SELECT @PivotLevel1SelectColumnNames = ISNULL(@PivotLevel1SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  WHERE TestLevel = 1  
  ) AS cat  
  
 --Get distinct values of the PIVOT Column with isnull        
 SELECT @PivotLevel2SelectColumnNames = ISNULL(@PivotLevel2SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  WHERE TestLevel = 2  
  ) AS cat  
  
 --select @PivotLevel1SelectColumnNames , @PivotLevel2SelectColumnNames        
 --Get distinct values of the PIVOT Column with isnull        
 SELECT @PivotSumSelectColumnNames = ISNULL(@PivotSumSelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  ) AS cat  
  
 SELECT @PivotSumLevel1SelectColumnNames = ISNULL(@PivotSumLevel1SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  WHERE TestLevel = 1  
  ) AS cat  
  
 SELECT @PivotSumLevel2SelectColumnNames = ISNULL(@PivotSumLevel2SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)  
 FROM (  
  SELECT DISTINCT LevelSubject  
  FROM tb_result_view  
  WHERE TestLevel = 2  
  ) AS cat  
  
 PRINT @PivotSumSelectColumnNames  
  
   
 --Prepare the PIVOT query using the dynamic         
 SET @DynamicPivotQuery = N'        
     
SELECT JobPosition ,CandidateID ,CandidateName , Convert(varchar(20),LogggedinDate,103) ExamDate, ' + @PivotSumLevel1SelectColumnNames + ' ,Level1Result,' + @PivotSumLevel2SelectColumnNames + ' ,Level2Result    FROM (        
SELECT distinct JobID,JobPosition ,CandidateID ,CandidateName ,ExamDate,LogggedinDate,Level1Result,Level2Result,  ' + @PivotSelectColumnNames + '        
FROM tb_result_view    R    
PIVOT(sum(Score) for LevelSubject in (' + @PivotColumnNames + ')) as pvt        
) A        
WHERE Level1Result is not null or Level1Result <> 0  
GROUP BY JobID, JobPosition ,CandidateID ,CandidateName ,ExamDate,LogggedinDate  ,Level1Result,Level2Result    
ORDER BY CandidateID desc  
 ';  
  
 PRINT @DynamicPivotQuery  
  
 --Execute the Dynamic Pivot Query        
  
 EXEC sp_executesql @DynamicPivotQuery  
END  
ELSE  
BEGIN  
 SELECT 0 JobID  
  ,'Not Found' JobPosition  
  ,'' CandidateID  
  ,'' CandidateName  
  ,'' ExamDate  
  ,'' [1-Aptitude]  
  ,'' [1-Communication]  
  ,'' [1-DotNet]  
  ,'' [1-RDBMS]  
END
GO
/****** Object:  StoredProcedure [dbo].[GetResult_Details_bkup]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
      
CREATE PROC [dbo].[GetResult_Details_bkup]       
 @JobPosition INT = 0      
 , @CandidateID int = 0      
       
as      
  SET NOCOUNT ON;  
  SELECT        
  J.[Key_ID] JobID, J.Job_Position JobPosition, C.KeyID CandidateID,C.First_Name + ' ' + C.Last_Name CandidateName,      
  convert(varchar(19),C.LoggedinTime,121) ExamDate, S.Subject, SR.Level [TestLevel], SR.score Score,Sr.status   [TestStatus]   
  FROM [dbo].[tb_Subject_Result] SR      
  JOIN tb_Subject S on SR.subject_ID = S.KeyID      
  JOIN tb_Candidate C on C.KeyID = SR.Candidate_id      
  JOIN tb_JobPosition J ON C.Applied_For = J.[Key_ID]      
  where (sr.Candidate_id = @CandidateID OR @CandidateID = 0)      
  AND (@JobPosition = 0 or J.[Key_ID] = @JobPosition)      
  ORDER BY CandidateName,Convert(date,c.LoggedinTime,101) desc
GO
/****** Object:  StoredProcedure [dbo].[GetResult_Details_bkup_03042020]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--  [GetResult_Details_bkup_03042020]  1,0,'19/02/2020','19/02/2020' 
CREATE PROC [dbo].[GetResult_Details_bkup_03042020]    
 @JobPosition INT = 0      
 ,@CandidateID INT = 0      
 ,@StartDate NVARCHAR(10)      
 ,@EndDate NVARCHAR(10)      
AS      
SET NOCOUNT ON;      
      
IF 1=0       
BEGIN      
    SET FMTONLY OFF      
END      
      
IF OBJECT_ID('tempdb..#tmp') IS NOT NULL      
 DROP TABLE #tmp      
IF OBJECT_ID('tempdb..#tmpResult') IS NOT NULL      
 DROP TABLE #tmpResult      
      
  
DECLARE @SDate DATE      
 ,@EDate DATE      
      
SET @SDATE = CONVERT(DATE, CONVERT(DATE, @StartDate, 103), 23)      
SET @EDate = CONVERT(DATE, CONVERT(DATE, @EndDate, 103), 23)      
      
PRINT @SDATE      
PRINT @EDate      
      
SET NOCOUNT ON;      
      
SELECT distinct J.[Key_ID] JobID      
 ,J.Job_Position JobPosition      
 ,C.KeyID CandidateID      
 ,C.First_Name + ' ' + C.Last_Name CandidateName      
 ,convert(VARCHAR(19), C.LoggedinTime, 103) ExamDate      
 ,convert(DATE, C.LoggedinTime, 103) ee      
 ,S.Subject      
 ,SR.LEVEL [TestLevel]      
 ,SR.score Score      
 ,Sr.STATUS [TestStatus]      
 ,cast(SR.LEVEL AS VARCHAR) + '-' + subject LevelSubject 
 --,case when LTRIM(rtrim(Level1Result)) = '' OR Level1Result = NULL then 'SKIP' else Level1Result end Level1Result
 , isnull(Level1Result,'-') Level1Result
 ,Level2Result     
INTO #tmp      
FROM [dbo].[tb_Subject_Result] SR      
JOIN tb_Subject S ON SR.subject_ID = S.KeyID      
JOIN tb_Candidate C ON C.KeyID = SR.Candidate_id      
JOIN tb_JobPosition J ON C.Applied_For = J.[Key_ID]  

LEFT JOIN (
 
		SELECT Candidate_id, [1] AS Level1Result , [2] AS Level2Result  FROM
		( 
		SELECT Candidate_id ,LEVEL, 
					CASE WHEN LEVEL = 1 and sum(FailResult) > 0 THEN 'FAIL'
					WHEN LEVEL = 1 and sum(FailResult) = 0 and sum(PassResult) = 0 THEN '-'
					   WHEN LEVEL = 2 and sum(FailResult) > 0 THEN 'FAIL' ELSE 'PASS' END LevelResult
	 
					FROM (
						SELECT Candidate_id ,SR.Level,score, CutOffMarks , 
						CASE WHEN SR.score >= CutOffMarks THen 1 else 0  END PassResult ,
						CASE WHEN SR.score < CutOffMarks THen 1 else 0  END FailResult 
						from tb_Subject_Result SR 
						JOIN tb_SubjectLevel  SL ON SR.Subject_ID = SL.Subject_ID and SR.Level = SL.Level   
						WHERE AppliedFor = @JobPosition and (Candidate_id = @CandidateID or @CandidateID = 0)
 				) A GROUP BY Candidate_id ,Level

		)t
		PIVOT(
		max(LevelResult)
		FOR Level IN ([1],[2])
		) as pvt


	) TestResult

	ON TestResult.Candidate_id = SR.Candidate_id  
    
WHERE (      
  sr.Candidate_id = @CandidateID      
  OR @CandidateID = 0      
  )      
 AND (      
  @JobPosition = 0      
  OR J.[Key_ID] = @JobPosition      
  )      
 AND convert(DATE, C.LoggedinTime, 103) >= convert(DATE, @SDate, 103)      
 AND convert(DATE, C.LoggedinTime, 103) <= convert(DATE, @EDate, 103)      
ORDER BY CandidateName      
 ,Convert(DATE, c.LoggedinTime, 103) DESC      
      
select * from #tmp      

if  exists(select * from #tmp)      
BEGIN      
DECLARE @DynamicPivotQuery AS NVARCHAR(MAX)      
 ,@PivotColumnNames AS NVARCHAR(MAX)      
 ,@PivotSelectColumnNames AS NVARCHAR(MAX)      
 ,@PivotSumSelectColumnNames AS NVARCHAR(MAX)      
      
--Get distinct values of the PIVOT Column      
SELECT @PivotColumnNames = ISNULL(@PivotColumnNames + ',', '') + QUOTENAME(LevelSubject)      
FROM (      
 SELECT DISTINCT LevelSubject      
 FROM #tmp      
 ) AS cat      
      
--Get distinct values of the PIVOT Column with isnull      
SELECT @PivotSelectColumnNames = ISNULL(@PivotSelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)      
FROM (      
 SELECT DISTINCT LevelSubject      
 FROM #tmp      
 ) AS cat      
      
--select @PivotSelectColumnNames       
--Get distinct values of the PIVOT Column with isnull      
SELECT @PivotSumSelectColumnNames = ISNULL(@PivotSumSelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)      
FROM (      
 SELECT DISTINCT LevelSubject      
 FROM #tmp      
 ) AS cat      
      
PRINT @PivotSumSelectColumnNames      
      
--Prepare the PIVOT query using the dynamic       
SET @DynamicPivotQuery = N'      
   
SELECT JobPosition ,CandidateID ,CandidateName ,ExamDate,Level1Result as [Level 1 Result], ' + @PivotSumSelectColumnNames + ',Level2Result   FROM (      
SELECT distinct JobID,JobPosition ,CandidateID ,CandidateName ,ExamDate,Level1Result,Level2Result,  ' + @PivotSelectColumnNames + '      
FROM #tmp      
pivot(sum(Score) for LevelSubject in (' + @PivotColumnNames + ')) as pvt      
) A      
GROUP BY JobID, JobPosition ,CandidateID ,CandidateName ,ExamDate  ,Level1Result,Level2Result  
 ';      
      
PRINT @DynamicPivotQuery      
      
--Execute the Dynamic Pivot Query      
EXEC sp_executesql @DynamicPivotQuery      
      
END      
ELSE      
      
BEGIN      
 SELECT 0 JobID,  'Not Found' JobPosition,'' CandidateID ,'' CandidateName ,'' ExamDate, '' [1-Aptitude], '' [1-Communication],'' [1-DotNet], '' [1-RDBMS]      
   
      
END
GO
/****** Object:  StoredProcedure [dbo].[GetResult_Details_ByCandidate]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROC [dbo].[GetResult_Details_ByCandidate]     
 @CandidateID int = 0  
 AS  
select distinct Job_Position, C.Keyid CandidateID,First_name + ' ' + Last_name CandidateName
--, Applied_For    
 ,S.keyid SubjectID
,S.Subject,Level,SL.No_of_Question,SL.CutOffMarks,  
isnull(cast(Res.attended as varchar),'-') Attended,  
isnull(cast(res.score as varchar),'-') Score  
,case when score >= Sl.cutoffmarks  and score is not null then 'PASS'  
 when score is null then 'N/A'  
 ELSE 'FAIL' END Result  
 FROM tb_Candidate C   
 JOIN tb_jobposition J on C.applied_for = J.key_id   
 JOIN tb_subjectLevel SL on Sl.AppliedFor = C.Applied_For  
 JOIN tb_Subject S on SL.subject_id = S.keyid  
 LEFT JOIN (  
  
   
SELECT DISTINCT Candidate_id  
     ,q.level_id  
     ,R.Subject_ID  
     ,sum(isAttended) Attended  
     ,sum(score) score  
    FROM (SELECT distinct Candidate_ID,Subject_ID,Question_ID,SCore,isAttended from tb_result )r  
    JOIN tb_question q ON r.question_id = q.keyid  
    GROUP BY Candidate_id  
     ,q.level_id  
     ,R.Subject_ID  
     ) Res  
     on Res.Candidate_id = C.keyid and Res.level_id  = Sl.Level and Res.Subject_id = S.keyid  
 WHERE (C.KeyId = @CandidateID or @CandidateID = 0)  
 Order by c.Keyid, Level ,S.KeyID
GO
/****** Object:  StoredProcedure [dbo].[GetResult_Details_dev_bkup]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- select * from tb_result_view
--  [GetResult_Details]  0,0,'19/02/2020','19/02/2020' 
CREATE PROC [dbo].[GetResult_Details_dev_bkup] @JobPosition INT = 0
	,@CandidateID INT = 0
	,@StartDate NVARCHAR(10)
	,@EndDate NVARCHAR(10)
AS
SET NOCOUNT ON;

IF 1 = 0
BEGIN
	SET FMTONLY OFF
END

	  
DECLARE @SDate DATE
	,@EDate DATE

SET @SDATE = CONVERT(DATE, CONVERT(DATE, @StartDate, 103), 23)
SET @EDate = CONVERT(DATE, CONVERT(DATE, @EndDate, 103), 23)

PRINT @SDATE
PRINT @EDate

SET NOCOUNT ON;
truncate table tb_result_view
INSERT INTO tb_result_view 
SELECT DISTINCT J.[Key_ID] JobID
	,J.Job_Position JobPosition
	,C.KeyID CandidateID
	,C.First_Name + ' ' + C.Last_Name CandidateName
	,convert(VARCHAR(19), C.LoggedinTime, 103) ExamDate
	,convert(DATE, C.LoggedinTime, 103) LogggedinDate
	,S.Subject
	,SR.LEVEL [TestLevel]
	,SR.score Score
	,Sr.STATUS [TestStatus]
	,cast(SR.LEVEL AS VARCHAR) + '-' + subject LevelSubject
	--,case when LTRIM(rtrim(Level1Result)) = '' OR Level1Result = NULL then 'SKIP' else Level1Result end Level1Result
	,isnull(Level1Result, '-') Level1Result
	,Level2Result

FROM [dbo].[tb_Subject_Result] SR
JOIN tb_Subject S ON SR.subject_ID = S.KeyID
JOIN tb_Candidate C ON C.KeyID = SR.Candidate_id
JOIN tb_JobPosition J ON C.Applied_For = J.[Key_ID]
LEFT JOIN (
	SELECT Candidate_id
		,[1] AS Level1Result
		,[2] AS Level2Result
	FROM (
		SELECT Candidate_id
			,LEVEL
			,CASE 
				WHEN LEVEL = 1
					AND sum(FailResult) > 0
					THEN 'FAIL'
				WHEN LEVEL = 1
					AND sum(FailResult) = 0
					AND sum(PassResult) = 0
					THEN 'SKIP'
				WHEN LEVEL = 2
					AND sum(FailResult) > 0
					THEN 'HR to Decide'
				ELSE 'PASS'
				END LevelResult
		FROM (
			SELECT Candidate_id
				,SR.LEVEL
				,score
				,CutOffMarks
				,CASE 
					WHEN SR.score >= CutOffMarks
						THEN 1
					ELSE 0
					END PassResult
				,CASE 
					WHEN SR.score < CutOffMarks
						THEN 1
					ELSE 0
					END FailResult
			FROM tb_Subject_Result SR
			JOIN tb_SubjectLevel SL ON SR.Subject_ID = SL.Subject_ID
				AND SR.LEVEL = SL.LEVEL
			WHERE AppliedFor = @JobPosition
				AND (
					Candidate_id = @CandidateID
					OR @CandidateID = 0
					)
			) A
		GROUP BY Candidate_id
			,LEVEL
		) t
	PIVOT(max(LevelResult) FOR LEVEL IN (
				[1]
				,[2]
				)) AS pvt
	) TestResult ON TestResult.Candidate_id = SR.Candidate_id
WHERE (
		sr.Candidate_id = @CandidateID
		OR @CandidateID = 0
		)
	AND (
		@JobPosition = 0
		OR J.[Key_ID] = @JobPosition
		)
	AND convert(DATE, C.LoggedinTime, 103) >= convert(DATE, @SDate, 103)
	AND convert(DATE, C.LoggedinTime, 103) <= convert(DATE, @EDate, 103)
ORDER BY CandidateName
	,Convert(DATE, c.LoggedinTime, 103) DESC

 --   select * from tb_result_view  
     
IF EXISTS (
		SELECT *
		FROM tb_result_view
		)
BEGIN
	DECLARE @DynamicPivotQuery AS NVARCHAR(MAX)
		,@PivotColumnNames AS NVARCHAR(MAX)
		,@PivotSelectColumnNames AS NVARCHAR(MAX)
		,@PivotSumSelectColumnNames AS NVARCHAR(MAX)
		,@PivotLevel1SelectColumnNames AS NVARCHAR(MAX)
		,@PivotLevel2SelectColumnNames AS NVARCHAR(MAX)
		,@PivotSumLevel1SelectColumnNames AS NVARCHAR(max)
		,@PivotSumLevel2SelectColumnNames AS NVARCHAR(max)

	--Get distinct values of the PIVOT Column      
	SELECT @PivotColumnNames = ISNULL(@PivotColumnNames + ',', '') + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		) AS cat

	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotSelectColumnNames = ISNULL(@PivotSelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		) AS cat

	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotLevel1SelectColumnNames = ISNULL(@PivotLevel1SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 1
		) AS cat

	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotLevel2SelectColumnNames = ISNULL(@PivotLevel2SelectColumnNames + ',', '') + 'ISNULL(' + QUOTENAME(LevelSubject) + ', 0) AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 2
		) AS cat

	--select @PivotLevel1SelectColumnNames , @PivotLevel2SelectColumnNames      
	--Get distinct values of the PIVOT Column with isnull      
	SELECT @PivotSumSelectColumnNames = ISNULL(@PivotSumSelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		) AS cat

	SELECT @PivotSumLevel1SelectColumnNames = ISNULL(@PivotSumLevel1SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 1
		) AS cat

	SELECT @PivotSumLevel2SelectColumnNames = ISNULL(@PivotSumLevel2SelectColumnNames + ',', '') + 'SUM(' + QUOTENAME(LevelSubject) + ') AS ' + QUOTENAME(LevelSubject)
	FROM (
		SELECT DISTINCT LevelSubject
		FROM tb_result_view
		WHERE TestLevel = 2
		) AS cat

	PRINT @PivotSumSelectColumnNames

	--Prepare the PIVOT query using the dynamic       
	SET @DynamicPivotQuery = N'      
   
SELECT JobPosition ,CandidateID ,CandidateName ,ExamDate, ' + @PivotSumLevel1SelectColumnNames + ' , Level1Result as [Level 1 Result],' + @PivotSumLevel2SelectColumnNames + ',Level2Result   FROM (      
SELECT distinct JobID,JobPosition ,CandidateID ,CandidateName ,ExamDate,Level1Result,Level2Result,  ' + @PivotSelectColumnNames + '      
FROM tb_result_view      
pivot(sum(Score) for LevelSubject in (' + @PivotColumnNames + ')) as pvt      
) A      
GROUP BY JobID, JobPosition ,CandidateID ,CandidateName ,ExamDate  ,Level1Result,Level2Result  
ORDER BY CandidateID desc
 ';

	PRINT @DynamicPivotQuery

	--Execute the Dynamic Pivot Query      
	EXEC sp_executesql @DynamicPivotQuery
END
ELSE
BEGIN
	SELECT 0 JobID
		,'Not Found' JobPosition
		,'' CandidateID
		,'' CandidateName
		,'' ExamDate
		,'' [1-Aptitude]
		,'' [1-Communication]
		,'' [1-DotNet]
		,'' [1-RDBMS]
END
GO
/****** Object:  StoredProcedure [dbo].[GetResult_n]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROC [dbo].[GetResult_n]  
 @JobPosition INT = 0
 , @CandidateID int = 0
 
as

  SELECT  
  J.Key_ID JobID, J.Job_Position, C.KeyID CandidateID,C.First_Name + ' ' + C.Last_Name CandidateName,
  convert(varchar,C.LoggedinTime,121) ExamDate, S.Subject, SR.Level, SR.score,Sr.status
  FROM [dbo].[tb_Subject_Result] SR
  JOIN tb_Subject S on SR.subject_ID = S.KeyID
  JOIN tb_Candidate C on C.KeyID = SR.Candidate_id
  JOIN tb_JobPosition J ON C.Applied_For = J.Key_ID
  where (sr.Candidate_id = @CandidateID OR @CandidateID = 0)
  AND (@JobPosition = 0 or J.Key_ID = @JobPosition)
  ORDER BY CandidateName,Convert(date,c.LoggedinTime,101) desc
GO
/****** Object:  StoredProcedure [dbo].[GetResult_n_backup]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create procedure [dbo].[GetResult_n_backup]   
 as  
 begin   
declare @AppFor varchar(100)    
declare @Tab1_Level1 varchar(100)   
declare @Tab2_Level1 varchar(100)   
declare @Tab1_Level2 varchar(100)   
declare @Tab2_Level2 varchar(100)   
declare @Tab3_Level2 varchar(100)   
declare @Tab4_Level2 varchar(100)   
declare @Exam_start_Date Date   
declare @Exam_end_Date Date   
   
  
  
select   
 coalesce(Tab1.Candidate_id,Tab2.Candidate_id,Tab3.candidate_id) Candidate_id,  
 coalesce(Tab1.Candidate_Name,Tab2.Candidate_Name,Tab3.Candidate_Name) Candidate_Name,  
isnull(cast(Tab1.Date_of_Birth as date),'01/01/1900') as Date_of_Birth ,  
 coalesce(Tab1.Phone,Tab2.Phone,Tab3.Phone) Phone,  
 coalesce(Tab1.Email,Tab2.Email,Tab3.Email)Email,  
 coalesce(Tab1.Temp_Address,Tab2.Temp_Address,Tab3.Temp_Address)Temp_Address,  
 coalesce(Tab1.Perm_Address,Tab2.Perm_Address,Tab3.Perm_Address)Perm_Address,  
 coalesce(Tab1.Tenth_Institution,Tab2.Tenth_Institution,Tab3.Tenth_Institution)Tenth_Institution,  
 coalesce(Tab1.Tenth_Percentage,Tab2.Tenth_Percentage,Tab3.Tenth_Percentage)Tenth_Percentage,  
 coalesce(Tab1.Tenth_YOP,Tab2.Tenth_YOP,Tab3.Tenth_YOP)Tenth_YOP,  
 coalesce(Tab1.DIPLOMA_College,Tab2.DIPLOMA_College,Tab3.DIPLOMA_College)DIPLOMA_College,  
 coalesce(Tab1.DIPLOMA_Grade,Tab2.DIPLOMA_Grade,Tab3.DIPLOMA_Grade)DIPLOMA_Grade,  
 coalesce(Tab1.DIPLOMA_Yearofpassing,Tab2.DIPLOMA_Yearofpassing,Tab3.DIPLOMA_Yearofpassing)DIPLOMA_Yearofpassing,  
 coalesce(Tab1.UG_College,Tab2.UG_College,Tab3.UG_College)UG_College,  
 coalesce(Tab1.UG_Degree,Tab2.UG_Degree,Tab3.UG_Degree)UG_Degree,  
 coalesce(Tab1.UG_Discipline,Tab2.UG_Discipline,Tab3.UG_Discipline)UG_Discipline,  
 coalesce(Tab1.UG_Grade,Tab2.UG_Grade,Tab3.UG_Grade)UG_Grade,  
 coalesce(Tab1.UG_Yearofpassing,Tab2.UG_Yearofpassing,Tab3.UG_Yearofpassing)UG_Yearofpassing,  
 coalesce(Tab1.ReferalBY,Tab2.ReferalBY,Tab3.ReferalBY)ReferalBY,  
 coalesce(Tab1.Referal_source,Tab2.Referal_source,Tab3.Referal_source) as Referal_source,  
 isnull(coalesce(Tab1.test_start_time,Tab2.test_start_time,Tab3.test_start_time),'01/01/1900') as test_start_time,  
 isnull(coalesce(Tab1.test_end_time,Tab2.test_end_time,Tab3.test_end_time),'01/01/1900') as test_end_time,  
  @AppFor as Applied_For,  
  
 coalesce(cast(Tab1.Exam_Date as varchar(20)),cast(Tab2.Exam_Date as varchar(20)),getdate())  as Exam_Date,  
 isnull(coalesce(tab1.Level_1_Tab1_subject,tab2.Level_1_Tab1_subject,tab3.Level_1_Tab1_subject),'Aptitude') as Level_1_Tab1_subject,  
 isnull(coalesce(tab1.Level_1_Tab1_mark,tab2.Level_1_Tab1_mark,tab3.Level_1_Tab1_mark),0) AS Level_1_Tab1_mark,isnull(coalesce(tab1.Level_1_Tab1_CutOffMarks,tab2.Level_1_Tab1_CutOffMarks,tab3.Level_1_Tab1_CutOffMarks),0) as Level_1_Tab1_CutOffMarks,  
 isnull(coalesce(tab1.Level_1_Tab2_subject,tab2.Level_1_Tab2_subject,tab3.Level_1_Tab2_subject),'DotNet') as Level_1_Tab2_subject,  
 isnull(coalesce(tab1.Level_1_Tab2_mark,tab2.Level_1_Tab2_mark,tab3.Level_1_Tab2_mark),0) AS Level_1_Tab2_mark,isnull(coalesce(tab1.Level_1_Tab2_CutOffMarks,tab2.Level_1_Tab2_CutOffMarks,tab3.Level_1_Tab2_CutOffMarks),0) as Level_1_Tab2_CutOffMarks,   
 isnull(coalesce(tab1.Level_2_Tab1_subject,tab2.Level_2_Tab1_subject,tab3.Level_2_Tab1_subject),'Aptitude') as Level_2_Tab1_subject,  
 isnull(coalesce(tab1.Level_2_Tab1_mark,tab2.Level_2_Tab1_mark,tab3.Level_2_Tab1_mark),0) AS Level_2_Tab1_mark,isnull(coalesce(tab1.Level_2_Tab1_CutOffMarks,tab2.Level_2_Tab1_CutOffMarks,tab2.Level_2_Tab1_CutOffMarks),0) Level_2_Tab1_CutOffMarks,  
 isnull(coalesce(tab1.Level_2_Tab2_subject,tab2.Level_2_Tab2_subject,tab3.Level_2_Tab2_subject),'DotNet') as Level_2_Tab2_subject,  
 isnull(coalesce(tab1.Level_2_Tab2_mark,tab2.Level_2_Tab2_mark,tab3.Level_2_Tab2_mark),0) AS Level_2_Tab2_mark,isnull(coalesce(tab1.Level_2_Tab2_CutOffMarks,tab2.Level_2_Tab2_CutOffMarks,tab2.Level_2_Tab2_CutOffMarks),0) Level_2_Tab2_CutOffMarks,  
 isnull(coalesce(tab1.Level_2_Tab3_subject,tab2.Level_2_Tab3_subject,tab3.Level_2_Tab3_subject),'RDBMS') as Level_2_Tab3_subject,  
 isnull(coalesce(tab1.Level_2_Tab3_mark,tab2.Level_2_Tab3_mark,tab3.Level_2_Tab3_mark),0) AS Level_2_Tab3_mark,isnull(coalesce(tab1.Level_2_Tab3_CutOffMarks,tab2.Level_2_Tab3_CutOffMarks,tab2.Level_2_Tab3_CutOffMarks),0) Level_2_Tab3_CutOffMarks,  
 isnull(coalesce(tab1.Level_2_Tab4_subject,tab2.Level_2_Tab4_subject,tab3.Level_2_Tab4_subject),'Communication') as Level_2_Tab4_subject,  
 isnull(coalesce(tab1.Level_2_Tab4_mark,tab2.Level_2_Tab4_mark,tab3.Level_2_Tab4_mark),0) AS Level_2_Tab4_mark,isnull(coalesce(tab1.Level_2_Tab4_CutOffMarks,tab2.Level_2_Tab4_CutOffMarks,tab2.Level_2_Tab4_CutOffMarks),0) Level_2_Tab4_CutOffMarks  
   
  from   
  
  (  
  
  
  select  A.Candidate_id,  
 A.Candidate_Name,  
cast( A.Date_of_Birth as date) as Date_of_Birth,  
 A.Phone,A.Email,  
 A.Temp_Address,  
 A.Perm_Address,  
 A.Tenth_Institution,  
 A.Tenth_Percentage,  
 A.Tenth_YOP,  
  A.DIPLOMA_College,  
 A.DIPLOMA_Grade,  
 A.DIPLOMA_Yearofpassing,  
 A.UG_College,  
 A.UG_Degree,  
 A.UG_Discipline,  
 A.UG_Grade,  
 A.UG_Yearofpassing,  
 A.ReferalBY,  
 A.Referal_source as Referal_source,  
 A.test_start_time as test_start_time,  
 A.test_end_time as test_end_time,  
  
 cast(A.Exam_Date as varchar(20)) as Exam_Date,  
 Level_1_Tab1_subject,  
 Level_1_Tab1_mark AS Level_1_Tab1_mark,Level_1_Tab1_CutOffMarks,  
 Level_1_Tab2_subject,  
Level_1_Tab2_mark, Level_1_Tab2_CutOffMarks,  
 null as Level_2_Tab1_subject,  
 null as Level_2_Tab1_mark ,  
 null as Level_2_Tab1_CutOffMarks,  
 null as  Level_2_Tab2_subject,  
 null as Level_2_Tab2_mark ,  
 null as Level_2_Tab2_CutOffMarks,  
 null as  Level_2_Tab3_subject,  
 null as Level_2_Tab3_mark ,  
 null as Level_2_Tab3_CutOffMarks,  
 null as  Level_2_Tab4_subject,  
 null as Level_2_Tab4_mark ,  
 null as Level_2_Tab4_CutOffMarks  
 from   
(select a.Candidate_id,b.First_Name+' '+b.Last_Name as Candidate_Name,b.DOB as Date_of_Birth,b.Phone,b.Email,  
 b.Temp_Address,b.Perm_Address,b.Tenth_Percentage,b.Tenth_YOP,b.Tenth_Institution,b.DIPLOMA_Grade,  
 b.DIPLOMA_Yearofpassing,b.DIPLOMA_College,b.UG_Department as UG_Degree,b.UG_Discipline,b.UG_Grade,  
 b.UG_Yearofpassing,b.UG_College,ReferalBY,Source as Referal_source,b.LoggedinTime as test_start_time,  
 b.LoggedOutTime as test_end_time,  
convert(date,b.LoggedinTime ,112) as Exam_Date,  
 c.Subject as Level_1_Tab1_subject,d.Level,score as Level_1_Tab1_mark, b.Applied_For,d.CutOffMarks as Level_1_Tab1_CutOffMarks  
from ( select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from tb_Result r  
 join tb_question Q on r.question_id=q.keyid  
 group by candidate_Id,r.Subject_ID,Q.Level_ID ) a  
join [dbo].[tb_Candidate] b   
on a.Candidate_id=b.KeyID  
 join tb_Subject c on a.subject_ID=c.KeyID   
 join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=1  
   
  where  subject=@Tab1_Level1 and a.Level=1  
 ) A  
  
  
  
  LEFT join  
  
  
 (select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,  
left(b.LoggedinTime,11) as Exam_Date,  
 c.Subject as Level_1_Tab2_subject,d.Level,score as Level_1_Tab2_mark,d.CutOffMarks as Level_1_Tab2_CutOffMarks  
from ( select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from tb_result r  
 join tb_question Q on r.question_id=q.keyid  
 group by candidate_Id,r.Subject_ID,Q.Level_ID ) a  
join [dbo].[tb_Candidate] b   
on a.Candidate_id=b.KeyID  
 join tb_Subject c on a.subject_ID=c.KeyID  
 join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=1  
  
  where   subject=@Tab2_Level1 and a.Level=1  
 ) B on A.Candidate_id=B.Candidate_id   
where   
 A.Exam_Date between convert(date,cast(@Exam_start_Date as date) ,112) and convert(date,cast(@Exam_end_Date as date) ,112)  
 and   
 A.Applied_For=(select [Key_ID] from tb_jobposition where job_position= @AppFor)  
  
 ) Tab1  
  
   
full join   
  
(select  C.Candidate_id,  
 C.Candidate_Name,  
 C.Phone,C.Email,  
 C.Temp_Address,  
 C.Perm_Address,  
 C.Tenth_Institution,  
 C.Tenth_Percentage,  
 C.Tenth_YOP,  
 C.DIPLOMA_College,  
 C.DIPLOMA_Grade,  
 C.DIPLOMA_Yearofpassing,  
 C.UG_College,  
 C.UG_Degree,  
 C.UG_Discipline,  
 C.UG_Grade,  
 C.UG_Yearofpassing,  
 C.ReferalBY,  
 C.Referal_source as Referal_source,  
 C.test_start_time as test_start_time,  
 C.test_end_time as test_end_time,  
 C.Applied_for,  
cast(C.Exam_Date as varchar(20)) as Exam_Date,  
null as Level_1_Tab1_subject,null as Level_1_Tab1_mark,null as Level_1_Tab1_CutOffMarks,  
null as Level_1_Tab2_subject,null as Level_1_Tab2_mark,null as Level_1_Tab2_CutOffMarks,  
 Level_2_Tab1_subject,  
 Level_2_Tab1_mark ,Level_2_Tab1_CutOffMarks,  
  Level_2_Tab2_subject,  
 Level_2_Tab2_mark ,Level_2_Tab2_CutOffMarks,  
  Level_2_Tab3_subject,  
 Level_2_Tab3_mark ,Level_2_Tab3_CutOffMarks,  
  Level_2_Tab4_subject,  
 Level_2_Tab4_mark ,Level_2_Tab4_CutOffMarks  
 from   
(select a.Candidate_id,b.First_Name+' '+b.Last_Name as Candidate_Name,b.DOB as Date_of_Birth,b.Phone,b.Email,  
 b.Temp_Address,b.Perm_Address,b.Tenth_Percentage,b.Tenth_YOP,b.Tenth_Institution,b.DIPLOMA_Grade,  
 b.DIPLOMA_Yearofpassing,b.DIPLOMA_College,b.UG_Department as UG_Degree,b.UG_Discipline,b.UG_Grade,  
 b.UG_Yearofpassing,b.UG_College,ReferalBY,Source as Referal_source,b.LoggedinTime as test_start_time,  
 b.LoggedOutTime as test_end_time,b.applied_for,  
left(b.LoggedinTime,11) as Exam_Date,null as Level_1_Tab1_subject,null as Level_1_Tab2_subject,null as Level_1_Tab1_mark,null as Level_1_Tab2_mark,null as Level_1_Tab1_CutOffMarks,null as Level_1_Tab2_CutOffMarks,  
 c.Subject as Level_2_Tab1_subject,d.Level,score as Level_2_Tab1_mark,d.CutOffMarks as Level_2_Tab1_CutOffMarks  
from ( select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from tb_result r  
 join tb_question Q on r.question_id=q.keyid  
 group by candidate_Id,r.Subject_ID,Q.Level_ID ) a  
join [dbo].[tb_Candidate] b   
on a.Candidate_id=b.KeyID  
 join tb_Subject c on a.subject_ID=c.KeyID  
  join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2  
  where  subject=@Tab1_Level2 and a.Level=2  
) C   
 LEFT join   
  
  (select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,  
left(b.LoggedinTime,11) as Exam_Date,  
 c.Subject as Level_2_Tab2_subject,d.Level,score as Level_2_Tab2_mark,d.CutOffMarks as Level_2_Tab2_CutOffMarks  
from ( select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from tb_result r  
 join tb_question Q on r.question_id=q.keyid  
 group by candidate_Id,r.Subject_ID,Q.Level_ID ) a   
join [dbo].[tb_Candidate] b   
on a.Candidate_id=b.KeyID  
 join tb_Subject c on a.subject_ID=c.KeyID  
  join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2  
  where  subject=@Tab2_Level2 and a.Level=2  
 )D on  
 C.candidate_id=D.Candidate_id  
 LEFT join  
  (select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,  
left(b.LoggedinTime,11) as Exam_Date,  
 c.Subject Level_2_Tab3_subject,d.Level,score as Level_2_Tab3_mark,d.CutOffMarks as Level_2_Tab3_CutOffMarks  
from ( select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from tb_result r  
 join tb_question Q on r.question_id=q.keyid  
 group by candidate_Id,r.Subject_ID,Q.Level_ID ) a  
join [dbo].[tb_Candidate] b   
on a.Candidate_id=b.KeyID  
 join tb_Subject c on a.subject_ID=c.KeyID  
 join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2  
  where  subject=@Tab3_Level2 and a.Level=2  
 ) E  
 on C.Candidate_id=E.Candidate_id   
   
 LEFT join  
  
  
  (select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,  
left(b.LoggedinTime,11) as Exam_Date,  
 c.Subject Level_2_Tab4_subject,d.Level,score as Level_2_Tab4_mark,d.CutOffMarks as Level_2_Tab4_CutOffMarks  
from ( select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from tb_result r  
 join tb_question Q on r.question_id=q.keyid  
 group by candidate_Id,r.Subject_ID,Q.Level_ID) a  
join [dbo].[tb_Candidate] b   
on a.Candidate_id=b.KeyID  
 join tb_Subject c on a.subject_ID=c.KeyID  
  join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2  
  where subject=@Tab4_Level2 and a.Level=2  
 )F  
  on C.Candidate_id=F.candidate_id  
  
 where   
 C.Exam_Date between convert(date,cast(@Exam_start_Date as date) ,112) and convert(date,cast(@Exam_end_Date as date) ,112)  
 and   
 C.Applied_For=(select [Key_ID] from tb_jobposition where job_position= @AppFor)  
  
) Tab2  
on tab2.candidate_id =tab1.candidate_id  
  
full join  
  
  
   
  
 (select  A.Candidate_id,  
 A.Candidate_Name,  
cast( A.Date_of_Birth as date) as Date_of_Birth,  
 A.Phone,A.Email,  
 A.Temp_Address,  
 A.Perm_Address,  
 A.Tenth_Institution,  
 A.Tenth_Percentage,  
 A.Tenth_YOP,  
  A.DIPLOMA_College,  
 A.DIPLOMA_Grade,  
 A.DIPLOMA_Yearofpassing,  
 A.UG_College,  
 A.UG_Degree,  
 A.UG_Discipline,  
 A.UG_Grade,  
 A.UG_Yearofpassing,  
 A.ReferalBY,  
 A.Referal_source as Referal_source,  
 A.test_start_time as test_start_time,  
 A.test_end_time as test_end_time,  
 @AppFor as Applied_For,  
 cast(A.Exam_Date as varchar(20)) as Exam_Date,  
 Level_1_Tab1_subject,  
 Level_1_Tab1_mark,Level_1_Tab1_CutOffMarks,  
 Level_1_Tab2_subject,  
Level_1_Tab2_mark, Level_1_Tab2_CutOffMarks,  
 Level_2_Tab1_subject,  
 Level_2_Tab1_mark ,Level_2_Tab1_CutOffMarks,  
  Level_2_Tab2_subject,  
 Level_2_Tab2_mark ,Level_2_Tab2_CutOffMarks,  
  Level_2_Tab3_subject,  
 Level_2_Tab3_mark ,Level_2_Tab3_CutOffMarks,  
  Level_2_Tab4_subject,  
 Level_2_Tab4_mark ,Level_2_Tab4_CutOffMarks  
  
  from   
 (select a.Candidate_id,b.First_Name+' '+b.Last_Name as Candidate_Name,b.DOB as Date_of_Birth,b.Phone,b.Email,  
 b.Temp_Address,b.Perm_Address,b.Tenth_Percentage,b.Tenth_YOP,b.Tenth_Institution,b.DIPLOMA_Grade,  
 b.DIPLOMA_Yearofpassing,b.DIPLOMA_College,b.UG_Department as UG_Degree,b.UG_Discipline,b.UG_Grade,  
 b.UG_Yearofpassing,b.UG_College,ReferalBY,Source as Referal_source,b.LoggedinTime as test_start_time,  
 b.LoggedOutTime as test_end_time,  
convert(date,b.LoggedinTime ,112) as Exam_Date,  
 c.Subject as Level_1_Tab1_subject,d.Level,score as Level_1_Tab1_mark, b.Applied_For,d.CutOffMarks as Level_1_Tab1_CutOffMarks  
from ( select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from (select distinct *   
from RESULT_HISTORY  
 --where  answer is not null   
 ) r  
 join tb_question Q on r.question_id=q.keyid  
 group by candidate_Id,r.Subject_ID,Q.Level_ID) a  
join [dbo].[tb_Candidate] b   
on a.Candidate_id=b.KeyID  
 join tb_Subject c on a.subject_ID=c.KeyID   
 join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=1  
   
  where  subject=@Tab1_Level1 and a.Level=1   
 ) A  
  
  
  LEFT join  
  
  
 (select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,  
left(b.LoggedinTime,11) as Exam_Date,  
 c.Subject as Level_1_Tab2_subject,d.Level,score as Level_1_Tab2_mark,d.CutOffMarks as Level_1_Tab2_CutOffMarks  
from ( select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from (select distinct *   
from RESULT_HISTORY  
   
-- where answer is not null  
  ) r  
 join tb_question Q on r.question_id=q.keyid  
 group by candidate_Id,r.Subject_ID,Q.Level_ID ) a  
join [dbo].[tb_Candidate] b   
on a.Candidate_id=b.KeyID  
 join tb_Subject c on a.subject_ID=c.KeyID  
 join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=1  
  
  where   subject=@Tab2_Level1 and a.Level=1  
 ) B on A.Candidate_id=B.Candidate_id   
  
  
 LEFT join  
  
  (select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,  
left(b.LoggedinTime,11) as Exam_Date,  
 c.Subject as Level_2_Tab1_subject,d.Level,score as Level_2_Tab1_mark,d.CutOffMarks as Level_2_Tab1_CutOffMarks  
from ( select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from (select distinct *   
from RESULT_HISTORY  
-- where  answer is not null  
  ) r  
 join tb_question Q on r.question_id=q.keyid  
 group by candidate_Id,r.Subject_ID,Q.Level_ID ) a  
join [dbo].[tb_Candidate] b   
on a.Candidate_id=b.KeyID  
 join tb_Subject c on a.subject_ID=c.KeyID  
  join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2  
  where  subject=@Tab1_Level2 and a.Level=2  
) C on A.Candidate_id=c.Candidate_id  
 LEFT join   
  
  (select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,  
left(b.LoggedinTime,11) as Exam_Date,  
 c.Subject as Level_2_Tab2_subject,d.Level,score as Level_2_Tab2_mark,d.CutOffMarks as Level_2_Tab2_CutOffMarks  
from ( select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from (select distinct *   
from RESULT_HISTORY  
-- where  answer is not null   
 ) r  
 join tb_question Q on r.question_id=q.keyid  
 group by candidate_Id,r.Subject_ID,Q.Level_ID ) a   
join [dbo].[tb_Candidate] b   
on a.Candidate_id=b.KeyID  
 join tb_Subject c on a.subject_ID=c.KeyID  
  join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2  
  where  subject=@Tab2_Level2 and a.Level=2  
 )D on  
 A.candidate_id=D.Candidate_id  
 LEFT join  
  (select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,  
left(b.LoggedinTime,11) as Exam_Date,  
 c.Subject Level_2_Tab3_subject,d.Level,score as Level_2_Tab3_mark,d.CutOffMarks as Level_2_Tab3_CutOffMarks  
from ( select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from (select distinct *   
from RESULT_HISTORY  
 --where  answer is not null  
  ) r  
 join tb_question Q on r.question_id=q.keyid  
 group by candidate_Id,r.Subject_ID,Q.Level_ID ) a  
join [dbo].[tb_Candidate] b   
on a.Candidate_id=b.KeyID  
 join tb_Subject c on a.subject_ID=c.KeyID  
 join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2  
  where  subject=@Tab3_Level2 and a.Level=2  
 ) E  
 on A.Candidate_id=E.Candidate_id   
   
 LEFT join  
  
  
  (select a.Candidate_id,b.First_Name+b.Last_Name as Candidate_Name,  
left(b.LoggedinTime,11) as Exam_Date,  
 c.Subject Level_2_Tab4_subject,d.Level,score as Level_2_Tab4_mark,d.CutOffMarks as Level_2_Tab4_CutOffMarks  
from ( select r.candidate_Id,r.Subject_ID , sum(score) as Score,Q.Level_ID as [Level] from (select distinct *   
from RESULT_HISTORY  
 --where answer is not null   
 ) r  
 join tb_question Q on r.question_id=q.keyid  
 group by candidate_Id,r.Subject_ID,Q.Level_ID) a  
join [dbo].[tb_Candidate] b   
on a.Candidate_id=b.KeyID  
 join tb_Subject c on a.subject_ID=c.KeyID  
  join tb_SubjectLevel d on b.Applied_For=d.AppliedFor and a.subject_ID=d.Subject_ID and d.Level=2  
  where subject=@Tab4_Level2 and a.Level=2  
 )F on A.Candidate_id=F.candidate_id  
 where   
 A.Exam_Date between convert(date,cast(@Exam_start_Date as date) ,112) and convert(date,cast(@Exam_end_Date as date) ,112)  
 and   
 A.Applied_For=(select [Key_ID] from tb_jobposition where job_position= @AppFor)  
   
 ) Tab3  
   
 on isnull(Tab2.Candidate_id,Tab1.Candidate_id)=Tab3.Candidate_id  
 --where coalesce(Tab1.Candidate_id,Tab2.Candidate_id,Tab3.Candidate_id)=@candidate_id  
  
  
   
 --order by Tab1.Candidate_id desc,Tab2.Candidate_id desc  
  
 END
GO
/****** Object:  StoredProcedure [dbo].[GetSubject]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- =============================================  
-- Author:  <Author,,Name>  
-- Create date: <Create Date,,>  
-- Description: <Description,,>  
-- =============================================  
CREATE PROCEDURE [dbo].[GetSubject]  
 @levelid int  = 0
AS  
BEGIN  
   
 select distinct subject from [dbo].[tb_SubjectLevel] a 
	join tb_Subject b on a.Subject_ID=b.KeyID 
 where (Level=@levelid  or @levelid = 0)
  
END
GO
/****** Object:  StoredProcedure [dbo].[GetSubject_byID]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[GetSubject_byID]
@id int
AS
BEGIN
	Select * from tb_Subject where keyid=@id
END
GO
/****** Object:  StoredProcedure [dbo].[GetSubject_N]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetSubject_N]
	
AS
BEGIN
	Select * from tb_Subject
END
GO
/****** Object:  StoredProcedure [dbo].[GetSubjectConfig_byID]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetSubjectConfig_byID]
@id int
AS
BEGIN
	Select AppliedFor as Subject,* from  tb_SubjectLevel L where L.KeyID=@id
END
GO
/****** Object:  StoredProcedure [dbo].[GetSubjectConfiguration]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  <Author,,Name>    
-- Create date: <Create Date,,>    
-- Description: <Description,,>    
-- =============================================    
CREATE PROCEDURE [dbo].[GetSubjectConfiguration]      
@AppliedFor INT = 0  
    
     
AS    
BEGIN    
 Select S.Subject,L.*,P.*,
 CASE
    WHEN l.ismandatory = 0 THEN 'Optional'
    WHEN l.ismandatory = 1 THEN 'Mandatory'
    ELSE 'Empty'
END AS [Required]
 from tb_Subject S   
 join tb_SubjectLevel L on s.KeyID=L.Subject_ID     
 join tb_JobPosition P on l.AppliedFor = P.Key_ID  
  WHERE L.AppliedFor = @AppliedFor or @AppliedFor = 0  
  Order by  AppliedFor,Level  
END
GO
/****** Object:  StoredProcedure [dbo].[GetSubjectConfiguration_New]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetSubjectConfiguration_New]

	
AS
BEGIN
	Select S.Subject,L.*,j.Job_Position from tb_Subject S join tb_SubjectLevel L on s.KeyID=L.Subject_ID 
join [dbo].[tb_JobPosition] j on L.[AppliedFor]=j.[Key_ID]

END
GO
/****** Object:  StoredProcedure [dbo].[getsubjectdata]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[getsubjectdata] (@filter int)
as
begin
if (@filter=2)
   begin
     select * from tb_Subject
   end
else if (@filter=1)
    begin
     select * from tb_Subject where Flag=1
    end
else
    begin
     select * from tb_Subject where Flag=0
    end
end
GO
/****** Object:  StoredProcedure [dbo].[getUGDegree]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[getUGDegree]
as
begin
select * from tb_graduation where degree like 'B%';
end
GO
/****** Object:  StoredProcedure [dbo].[insertinto_tb_results]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







create  procedure [dbo].[insertinto_tb_results] @question_id int,@subject_id int,@user_id varchar(11), @level int

as
BEGIN

insert into tb_Result
(Question_ID,Subject_ID,Candidate_id,CreatedDate,score,isattended,level)
values (@question_id,@subject_id,
@user_id,
convert(datetime,SUBSTRING(CONVERT(NVARCHAR(30), SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30')), 1, 19))
,0,0,@level);
END
GO
/****** Object:  StoredProcedure [dbo].[InsertJobPositions]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[InsertJobPositions]
(
@jobpos	varchar(100),
@IsoptionRequired bit,
@IsBondRequired bit
)
as
begin
insert into tb_JobPosition (Job_Position,IsoptionRequired,IsBondRequired) values (@jobpos,@IsoptionRequired,@IsBondRequired)
end
GO
/****** Object:  StoredProcedure [dbo].[insertQuestiondata]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[insertQuestiondata](
@Subjectid int,
@levelid int,
@Questions varchar(max),
@Option1 varchar(500),
@Option2 varchar(500),
@Option3 varchar(500),
@Option4 varchar(500),
@Answer varchar(500)
)
as
Begin
insert into [tb_Question](
Subject_ID,Level_ID,Questions,Option1,Option2,Option3,Option4,Answer
)
values(
@Subjectid,@levelid,@Questions,@Option1,@Option2,@Option3,@Option4,@Answer
)

end
GO
/****** Object:  StoredProcedure [dbo].[insertregistrationdata]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[insertregistrationdata](
@Applyingfor int,
@firstname varchar(500),
@lastname varchar(500),
@gender varchar(500),
@dob datetime,
@MaritalStatus char(3),
@Phone nvarchar(50),
@email nvarchar(100),
@CAddress nvarchar(500),
@PAddress nvarchar(500),
@Institution10 varchar(200),
@CGPA10 nvarchar(70),
@YOP10 int ,
@Institution12 varchar(200),
@CGPA12 nvarchar(50),
@YOP12 int,
@Branch12 nvarchar(50),
@Graduation nvarchar(250),
@UGCollege nvarchar(250),
@UGDiscipline nvarchar(250),
@CGPAUG nvarchar(10),
@YOPUG int,
@PGraduation nvarchar(250),
@PGDiscipline nvarchar(250),
@PGCollege nvarchar(450),
@CGPAPG nvarchar(10),
@YOPPG int,
@Source nvarchar(250),
@Referredthrough nvarchar(250),
@Applied nvarchar(250),
@Adate datetime,
@Countrycode nvarchar(10),
@Id_proof nvarchar(50),
@ID_NO nvarchar(50),
@ID_Image ntext,
@Profile_Image ntext,
@new_id nvarchar(11),
@current_date nvarchar(10)
)
as
Begin
insert into [tb_Candidate](
[Applied_For],[First_Name],[Last_Name],[Gender],[DOB],[Marietal_Status],[Phone],[Email],[Temp_Address],[Perm_Address],[Tenth_Institution],[Tenth_Percentage],[Tenth_YOP],[DIPLOMA_College],[DIPLOMA_Grade],[DIPLOMA_Yearofpassing],[DIPLOMA_Degree],[UG_Degree],[UG_College],[UG_Discipline],[UG_Grade],[UG_Yearofpassing],[PG_Degree],[PG_DESCIPLINE],[PG_College],[PG_Grade],[PG_Yearofpassing],[Source],[ReferalBY],[IsAttendedPreviously],[LAD],[Country_code],[Id_proof],[ID_NO],[Username],[Password],[ID_Image],[Profile_Image],[KeyID],[id_date]
)
values(
@Applyingfor,@firstname,@lastname,@gender,@dob,@MaritalStatus,@Phone,@email,@CAddress,@PAddress,@Institution10,@CGPA10,@YOP10,@Institution12,@CGPA12,@YOP12,@Branch12,@Graduation,@UGCollege,@UGDiscipline,@CGPAUG,@YOPUG,@PGraduation,@PGDiscipline,@PGCollege,@CGPAPG,@YOPPG,@Source,@Referredthrough,@Applied,@Adate,@Countrycode,@Id_proof,@ID_NO,@email,@Phone,@ID_Image,@Profile_Image,@new_id,@current_date
)

end
GO
/****** Object:  StoredProcedure [dbo].[insertSubject]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[insertSubject](
@subject varchar(100)
)
as
Begin
insert into tb_Subject(
subject
)
values(
@subject
)

end
GO
/****** Object:  StoredProcedure [dbo].[insertSubjectlevel]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[insertSubjectlevel](
@AppliedFor varchar(100),
@Subject_ID int,
@Level int,
@No_of_Question int,
@CutOffMarks int,
@Duration int,
@IsMandatory bit,
@OptionalGroupName varchar(100)
)
as
Begin
insert into tb_SubjectLevel(
AppliedFor,Subject_ID,Level,No_of_Question,CutOffMarks,Duration,IsMandatory,OptionalGroupName
)
values(
@AppliedFor,@Subject_ID,@Level,@No_of_Question,@CutOffMarks,@Duration,@IsMandatory,@OptionalGroupName
)

end
GO
/****** Object:  StoredProcedure [dbo].[Login_Info]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Login_Info]

@AppliedFor varchar(20),
@CandidateID varchar(20)
as
BEGIN

select distinct Subject as Level1_Sub,sum(Duration) as SUMM from [dbo].[tb_Candidate] a
join [dbo].[tb_SubjectLevel] b on a.Applied_For=b.AppliedFor 
join [dbo].[tb_Subject] c on b.subject_ID=c.KeyID
where Applied_For=@AppliedFor and Level=1 and a.KeyID=@CandidateID group by Subject




End
GO
/****** Object:  StoredProcedure [dbo].[Login_Info_Level2]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[Login_Info_Level2]

@AppliedFor varchar(20),
@CandidateID varchar(20)
as
BEGIN

select distinct Subject as Level2_Sub,sum(Duration) as SUMM from [dbo].[tb_Candidate] a
join [dbo].[tb_SubjectLevel] b on a.Applied_For=b.AppliedFor 
join [dbo].[tb_Subject] c on b.subject_ID=c.KeyID
where Applied_For=@AppliedFor and Level=2 and a.KeyID=@CandidateID group by Subject




End
GO
/****** Object:  StoredProcedure [dbo].[Rejected_email]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Rejected_email]
@id varchar(500)
as
begin


select email from [dbo].[tb_Candidate] where keyID in(select item from dbo.[SplitStringToTable] (@id,','))
update tb_candidate set mail_status=1 where keyID in(select item from dbo.[SplitStringToTable] (@id,','))



end
GO
/****** Object:  StoredProcedure [dbo].[remove_dup_results]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[remove_dup_results] @user_id varchar(11), @level int

as
BEGIN

delete from [dbo].[tb_Result] where Candidate_id = @user_id and Level = @level

END
GO
/****** Object:  StoredProcedure [dbo].[santosh]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[santosh]
as 
BEGIN
select * from tb_JobPosition
END
GO
/****** Object:  StoredProcedure [dbo].[save_And_Get_Result]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================        
-- Author:  <Author,,Name>        
-- Create date: <Create Date,,>        
-- Description: <Description,,>     
  
---  [save_And_Get_Result]    
     
-- =============================================        
CREATE  PROCEDURE  [dbo].[save_And_Get_Result] --2,3,1        
 -- Add the parameters for the stored procedure here        
 @candidateID VARCHAR(11)    
 ,@AppliedFor VARCHAR(20)    ,@level as int
AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from        
    
  INSERT INTO tb_Subject_Result (    
   Candidate_id    
   ,LEVEL    
   ,score    
   ,STATUS    
   ,subject_ID    
   )    
  
 -- SELECT distinct R.Candidate_id, q.LEvel_ID LEvel,  
 -- Sum(R.score) Score ,   
 -- CASE WHEN  Sum(R.score) >= Sl.CutOffMarks THEN 'PASS' ELSE 'FAIL'   
 -- END Status  
 -- ,Sl.Subject_ID  
 --from (Select distinct Candidate_id,Question_ID,isnull(score,0) score,Subject_ID,isattended from  tb_Result )R  
 -- JOIN tb_question q on q.keyid = R.Question_id
 -- JOIN tb_SubjectLevel SL ON R.Subject_ID = SL.Subject_ID  
 --where Candidate_id = @candidateID and q.level_id = 1 and sl.appliedfor=@AppliedFor  
 --group by R.Candidate_id,sl.Subject_ID,  
 --Sl.CutOffMarks,q.LEvel_ID  
 
 SELECT distinct R.Candidate_id, q.LEvel_ID LEvel,  
  Sum(R.score) Score ,   
  CASE WHEN  Sum(R.score) >= Sl.CutOffMarks THEN 'PASS' ELSE 'FAIL'   
  END Status  
  ,R.Subject_ID   
 from (
 Select distinct Candidate_id,Question_ID,isnull(score,0) score,Subject_ID,isattended from  tb_Result where Candidate_id = @candidateID and level = @level
 ) R
 JOIN tb_question Q on R.Question_id = Q.keyid
 JOIN tb_subjectLevel SL on R.subject_id = SL.Subject_id and Sl.AppliedFor = @AppliedFor  and Level = @level
 group by candidate_id,R.subject_id,CutOffMarks, q.LEvel_ID    


   INSERT INTO [dbo].[RESULT_HISTORY]    
   SELECT [Candidate_Id]    
    ,[Question_ID]    
    ,[Answer]    
    ,[Score]    
    ,[Subject_ID]    
    ,[Isattended]    
    ,[Level]   
   FROM (    
    SELECT DISTINCT Candidate_id,Question_ID, Answer, isnull(score,0) score,Subject_ID,isattended,Level    
    FROM tb_Result    
    WHERE Candidate_Id = @candidateID  and level = @level  
    ) a    
    
   UPDATE tb_Candidate    
   SET Islogged = 1,
   level = level+1
   WHERE KeyID = @candidateID    
    
    
  SELECT CASE WHEN Sum(FailStatus) > 0 THEN 'Fail' ELSE 'Pass' END Result  
  FROM   
  ( select  R.Candidate_id,  
  CASE WHEN  Sum(R.score) >= Sl.CutOffMarks THEN 0 ELSE 1   
  END FailStatus  
 from tb_Result R  
  JOIN tb_SubjectLevel SL ON R.Subject_ID = SL.Subject_ID  
 where Candidate_id = @candidateID and SL.level = R.level and sl.appliedfor=@AppliedFor  
 group by R.Candidate_id,sl.Subject_ID,  
 Sl.CutOffMarks  
 ) A  
   
  
  
  
END
GO
/****** Object:  StoredProcedure [dbo].[save_And_Get_Result_12052021]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================        
-- Author:  <Author,,Name>        
-- Create date: <Create Date,,>        
-- Description: <Description,,>     
  
---  [save_And_Get_Result]    
     
-- =============================================        
CREATE PROCEDURE [dbo].[save_And_Get_Result_12052021]         
 -- Add the parameters for the stored procedure here        
 @candidateID INT    
 ,@AppliedFor VARCHAR(20)    
AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from        
    
  INSERT INTO tb_Subject_Result (    
   Candidate_id    
   ,LEVEL    
   ,score    
   ,STATUS    
   ,subject_ID    
   )    
  
  SELECT distinct R.Candidate_id, LEvel,  
  Sum(R.score) Score ,   
  CASE WHEN  Sum(R.score) >= Sl.CutOffMarks THEN 'PASS' ELSE 'FAIL'   
  END Status  
  ,Sl.Subject_ID  
 from (Select distinct Candidate_id,Question_ID,isnull(score,0) score,Subject_ID,isattended from  tb_Result )R  
  JOIN tb_SubjectLevel SL ON R.Subject_ID = SL.Subject_ID  
 where Candidate_id = @candidateID and SL.level = 1 and sl.appliedfor=@AppliedFor  
 group by R.Candidate_id,sl.Subject_ID,  
 Sl.CutOffMarks,Sl.LEvel  
    
   INSERT INTO [dbo].[RESULT_HISTORY]    
   SELECT [Candidate_Id]    
    ,[Question_ID]    
    ,[Answer]    
    ,[Score]    
    ,[Subject_ID]    
    ,[Isattended]    
    ,'1'    
   FROM (    
    SELECT DISTINCT Candidate_id,Question_ID, Answer, isnull(score,0) score,Subject_ID,isattended    
    FROM tb_Result    
    WHERE Candidate_Id = @candidateID    
    ) a    
    
   UPDATE tb_Candidate    
   SET Islogged = 1    
   WHERE KeyID = @candidateID    
    
    
  SELECT CASE WHEN Sum(FailStatus) > 0 THEN 'Fail' ELSE 'Pass' END Result  
  FROM   
  ( select  R.Candidate_id,  
  CASE WHEN  Sum(R.score) >= Sl.CutOffMarks THEN 0 ELSE 1   
  END FailStatus  
 from tb_Result R  
  JOIN tb_SubjectLevel SL ON R.Subject_ID = SL.Subject_ID  
 where Candidate_id = @candidateID and level = 1 and sl.appliedfor=@AppliedFor  
 group by R.Candidate_id,sl.Subject_ID,  
 Sl.CutOffMarks  
 ) A  
   
  
  
  
END
GO
/****** Object:  StoredProcedure [dbo].[save_And_Get_Result_27052021]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================        
-- Author:  <Author,,Name>        
-- Create date: <Create Date,,>        
-- Description: <Description,,>     
  
---  [save_And_Get_Result]    
     
-- =============================================        
CREATE PROCEDURE [dbo].[save_And_Get_Result_27052021]         
 -- Add the parameters for the stored procedure here        
 @candidateID INT    
 ,@AppliedFor VARCHAR(20)    
AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from        
    
  INSERT INTO tb_Subject_Result (    
   Candidate_id    
   ,LEVEL    
   ,score    
   ,STATUS    
   ,subject_ID    
   )    
  
  SELECT distinct R.Candidate_id, q.LEvel_ID LEvel,  
  Sum(R.score) Score ,   
  CASE WHEN  Sum(R.score) >= Sl.CutOffMarks THEN 'PASS' ELSE 'FAIL'   
  END Status  
  ,Sl.Subject_ID  
 from (Select distinct Candidate_id,Question_ID,isnull(score,0) score,Subject_ID,isattended from  tb_Result )R  
  JOIN tb_question q on q.keyid = R.Question_id
  JOIN tb_SubjectLevel SL ON R.Subject_ID = SL.Subject_ID  
 where Candidate_id = @candidateID and q.level_id = 1 and sl.appliedfor=@AppliedFor  
 group by R.Candidate_id,sl.Subject_ID,  
 Sl.CutOffMarks,q.LEvel_ID  
    
   INSERT INTO [dbo].[RESULT_HISTORY]    
   SELECT [Candidate_Id]    
    ,[Question_ID]    
    ,[Answer]    
    ,[Score]    
    ,[Subject_ID]    
    ,[Isattended]    
    ,'1'    
   FROM (    
    SELECT DISTINCT Candidate_id,Question_ID, Answer, isnull(score,0) score,Subject_ID,isattended    
    FROM tb_Result    
    WHERE Candidate_Id = @candidateID    
    ) a    
    
   UPDATE tb_Candidate    
   SET Islogged = 1    
   WHERE KeyID = @candidateID    
    
    
  SELECT CASE WHEN Sum(FailStatus) > 0 THEN 'Fail' ELSE 'Pass' END Result  
  FROM   
  ( select  R.Candidate_id,  
  CASE WHEN  Sum(R.score) >= Sl.CutOffMarks THEN 0 ELSE 1   
  END FailStatus  
 from tb_Result R  
  JOIN tb_SubjectLevel SL ON R.Subject_ID = SL.Subject_ID  
 where Candidate_id = @candidateID and level = 1 and sl.appliedfor=@AppliedFor  
 group by R.Candidate_id,sl.Subject_ID,  
 Sl.CutOffMarks  
 ) A  
   
  
  
  
END
GO
/****** Object:  StoredProcedure [dbo].[Save_And_Get_Result_ForMissingCandiate]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================      
-- Author:  <Author,,Name>      
-- Create date: <Create Date,,>      
-- Description: <Description,,>   

---  [save_And_Get_Result]  
   
-- =============================================      
CREATE PROCEDURE [dbo].[Save_And_Get_Result_ForMissingCandiate]       
  
  @AppliedFor VARCHAR(20) = 1  ,
  @CandidateID NVARCHAR(MAX) = '5513,5514,5515,5516,5517,5518,5519,5520,5521,5522,5523,5524,5525,5526,5527,5528,5529,5530,5531,5532,5534,5535,5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547,5548,5549,5550,5551,5552,5553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566'
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from      
  
--  Select cast(items as int) from FN_Split(@CandidateID,',')


  INSERT INTO tb_Subject_Result (  
   Candidate_id  
   ,LEVEL  
   ,score  
   ,STATUS  
   ,subject_ID  
   )  
	select Candidate_id, q.Level_ID,   
	sum(score) score
	 ,case when Sum(score) >= sl.CutOffMarks THEN 'PASS' else 'FAIL' end status
	,R.subject_id
	from (
	Select distinct Candidate_id,Subject_ID,Question_ID,score from tb_Result
	where Candidate_id in (Select cast(items as int) CID from FN_Split(@CandidateID,','))
	) R
	join tb_Question Q on Q.KeyID = R.Question_ID 
	join tb_Candidate c on c.KeyID = r.Candidate_id
	join tb_SubjectLevel SL on Sl.AppliedFor =1 and Sl.Level = 1 and Sl.Subject_ID = Q.Subject_ID
	group by Candidate_id,c.First_Name,c.Last_Name,R.Subject_ID,Q.Level_ID ,CutOffMarks
	order by Level_ID

	 
  
  SELECT CASE WHEN Sum(FailStatus) > 0 THEN 'Fail' ELSE 'Pass' END Result
  FROM 
  ( select  R.Candidate_id,
		CASE WHEN  Sum(R.score) >= Sl.CutOffMarks THEN 0 ELSE 1 
		END FailStatus
	from tb_Result R
		JOIN tb_SubjectLevel SL ON R.Subject_ID = SL.Subject_ID
	where Candidate_id 	in   ( (Select items cID from FN_Split(@CandidateID,',')) 
	)and level = 1 and sl.appliedfor=@AppliedFor
	group by R.Candidate_id,sl.Subject_ID,
	Sl.CutOffMarks
	) A
	



END
GO
/****** Object:  StoredProcedure [dbo].[save_And_Get_Result_Level2]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
  
  
-- =============================================  
  
-- Author:  <Author,,Name>  
  
-- Create date: <Create Date,,>  
  
-- Description: <Description,,>  
  
-- =============================================  
  
CREATE PROCEDURE [dbo].[save_And_Get_Result_Level2]  -- 4149,'47'    
 -- Add the parameters for the stored procedure here    
     
 @candidateID int ,    
 @AppliedFor varchar(20)    
AS    
BEGIN    
    
   
 insert into tb_Subject_Result (Candidate_id,Level,score,status,subject_ID)    
 select Candidate_Id,2,isnull(Sum(Score),0) as Scores,'Hr to Decide',Subject_ID     
 from (select distinct Candidate_id,Question_ID,Answer,score,Subject_ID  from tb_Result where Candidate_Id=@candidateID)a      
  where Candidate_Id=@candidateID  group by Candidate_Id,Subject_ID   
    
 update tb_Candidate set Status=1,LoggedOutTime=CURRENT_TIMESTAMP where KeyID=@candidateID   
  
 INSERT INTO [dbo].[RESULT_HISTORY]    
 SELECT [Candidate_Id],[Question_ID],[Answer],[Score],[Subject_ID],[Isattended],'2' FROM (select distinct * from tb_Result where Candidate_Id=@candidateID)a     
 Update tb_Candidate set Islogged=1 where  KeyID= @candidateID  
 --delete from tb_Result where Candidate_Id=@candidateID    
end
GO
/****** Object:  StoredProcedure [dbo].[SaveAnswerFor_Result]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
    
-- =============================================    
-- Author:  <Author,,Name>    
-- Create date: <Create Date,,>    
-- Description: <Description,,>    
-- =============================================    
CREATE PROCEDURE [dbo].[SaveAnswerFor_Result]     
 -- Add the parameters for the stored procedure here    
 @QuestionID int,    
 @Answer varchar(500),    
 @candidateID int     
AS    
BEGIN    
    
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
     
    
    
 update tb_Result set Answer=@Answer ,isattended=1 where Candidate_Id=@candidateID and Question_ID=@QuestionID    
    
    
 if exists(select * from tb_Result R join tb_Question Q on R.Question_ID=Q.KeyID where Q.KeyID=@QuestionID and Q.Answer=@Answer and R.candidate_id=@candidateID)    
    
 begin     
    
 update tb_Result set Score=1 , isattended=1 where Candidate_Id=@candidateID and Question_ID=@QuestionID    
 end     
 else     
 begin    
 update tb_Result set Score=0 , isattended=1 where Candidate_Id=@candidateID and Question_ID=@QuestionID    
end    
    
declare @subjectID int    
declare @minSubjectID int    
Declare @level int    
declare @mark int    
    
select  @minSubjectID=min(Subject_ID) from tb_Result where Candidate_Id=@candidateID    
    
select @level=case when count(*)>2 then 2 else 1 end from tb_Result where Candidate_Id=@candidateID group by Candidate_Id    
    
    
    
    
select @subjectID=Subject_ID  from tb_Result where Question_ID=@QuestionID    
    
select @mark=sum(Isattended) from tb_Result where Candidate_Id=@candidateID and Subject_ID=@subjectID group by Candidate_Id,Subject_ID    
    
if exists(select * from [dbo].[AttendedQuestion] where [Candidate_ID]=@candidateID)    
begin    
if (@subjectID = @minSubjectID and @level=1)    
begin    
update  [AttendedQuestion] set Level1_Tab1=@mark where [Candidate_ID]=@candidateID    
end    
else if (@subjectID = @minSubjectID+1 and @level=1)    
begin    
update  [AttendedQuestion] set Level1_Tab2=@mark where [Candidate_ID]=@candidateID    
    
end     
else if (@subjectID = @minSubjectID and @level=2)    
begin    
update  [AttendedQuestion] set Level1_Tab2=@mark where [Candidate_ID]=@candidateID    
    
end     
else if (@subjectID = @minSubjectID+1 and @level=2)    
begin    
update  [AttendedQuestion] set Level1_Tab2=@mark where [Candidate_ID]=@candidateID    
    
end     
else if (@subjectID = @minSubjectID+2 and @level=2)    
begin    
update  [AttendedQuestion] set Level1_Tab2=@mark where [Candidate_ID]=@candidateID    
    
end     
else if (@subjectID = @minSubjectID+3 and @level=2)    
begin    
update  [AttendedQuestion] set Level1_Tab2=@mark where [Candidate_ID]=@candidateID    
    
end     
    
end    
    
else     
begin    
    
if (@subjectID = @minSubjectID and @level=1)    
begin    
insert into  [AttendedQuestion]     
values  (@candidateID,@mark,0,0,0,0,0)    
end    
else if (@subjectID = @minSubjectID+1 and @level=1)    
begin    
insert into  [AttendedQuestion]     
values  (@candidateID,0,@mark,0,0,0,0)    
    
end     
else if (@subjectID = @minSubjectID and @level=2)    
begin    
insert into  [AttendedQuestion]     
values  (@candidateID,0,0,@mark,0,0,0)    
end     
else if (@subjectID = @minSubjectID+1 and @level=2)    
begin    
insert into  [AttendedQuestion]     
values  (@candidateID,0,0,0,@mark,0,0)    
    
end     
else if (@subjectID = @minSubjectID+2 and @level=2)    
begin    
insert into  [AttendedQuestion]     
values  (@candidateID,0,0,0,0,@mark,0)    
    
end     
else if (@subjectID = @minSubjectID+3 and @level=2)    
begin    
insert into  [AttendedQuestion]     
values  (@candidateID,0,0,0,0,0,@mark)    
    
end     
    
    
end    
    
select Candidate_Id,Subject_ID,sum(Isattended) as AnsweredQuestion  from [dbo].[tb_Result]      
where candidate_id=@candidateID    
group by candidate_id,Subject_ID    
order by 2 asc    
    
    
    
    
end
GO
/****** Object:  StoredProcedure [dbo].[saveImage]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[saveImage](
@imagedata varbinary(max)
)
as 
begin
insert into [dbo].[images] (data) values (@imagedata)
end
GO
/****** Object:  StoredProcedure [dbo].[select_skills_for_job_position]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE  PROCEDURE [dbo].[select_skills_for_job_position] (@flag int , @applied_for int)
 as BEGIN
 if (@flag = 2 and @applied_for = 0)
 BEGIN
SELECT b.KeyID,a.Job_Position, c.subject, b.level, b.no_of_question, 
b.cutoffmarks, b.duration,a.Key_ID as job_id,c.KeyID as sub_id,b.FLAG as active
FROM [tb_JobPosition] a
INNER JOIN [tb_SubjectLevel] b
ON a.Key_ID = b.AppliedFor
INNer join [dbo].[tb_Subject] c
on b.Subject_ID = c.KeyID
where a.flag = 1 and c.flag = 1
end
ELSE IF (@flag = 2 and @applied_for = @applied_for)
BEGIN
SELECT b.KeyID,a.Job_Position, c.subject, b.level, b.no_of_question, 
b.cutoffmarks, b.duration,a.Key_ID as job_id,c.KeyID as sub_id,b.FLAG as active
FROM [tb_JobPosition] a
INNER JOIN [tb_SubjectLevel] b
ON a.Key_ID = b.AppliedFor
INNer join [dbo].[tb_Subject] c
on b.Subject_ID = c.KeyID
WHERE a.Key_ID =@applied_for and a.flag = 1 and c.flag= 1;
END
ELSE if (@flag = @flag and @applied_for = 0)
BEGIN
SELECT b.KeyID,a.Job_Position, c.subject, b.level, b.no_of_question, 
b.cutoffmarks, b.duration,a.Key_ID as job_id,c.KeyID as sub_id,b.FLAG as active
FROM [tb_JobPosition] a
INNER JOIN [tb_SubjectLevel] b
ON a.Key_ID = b.AppliedFor
INNer join [dbo].[tb_Subject] c
on b.Subject_ID = c.KeyID
WHERE b.FLAG = @flag and a.FLAG = 1  and c.Flag = 1;
END
ELSE
BEGIN
SELECT b.KeyID,a.Job_Position, c.subject, b.level, b.no_of_question, 
b.cutoffmarks, b.duration,a.Key_ID as job_id,c.KeyID as sub_id,b.FLAG as active
FROM [tb_JobPosition] a
INNER JOIN [tb_SubjectLevel] b
ON a.Key_ID = b.AppliedFor
INNer join [dbo].[tb_Subject] c
on b.Subject_ID = c.KeyID
WHERE b.FLAG = @flag and a.Key_ID =@applied_for and a.FLAG = 1 and c.Flag = 1;
END
END
GO
/****** Object:  StoredProcedure [dbo].[Skip_level_1]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[Skip_level_1]
	@id varchar(50)
AS
BEGIN


	update tb_candidate set IsLevel1_Skiiped=1 where KeyID in (select item from dbo.[SplitStringToTable] (@id,','))
END
GO
/****** Object:  StoredProcedure [dbo].[skip_level_1_Candiadtes]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create  procedure [dbo].[skip_level_1_Candiadtes] (@keyid varchar(11)) as
BEGIN 
update tb_Candidate 
set 
IsLevel1_Skiiped = 1,
status = 'PASS',
level = 1
where keyID = @keyid
END
GO
/****** Object:  StoredProcedure [dbo].[sp_GetDetailsForJob]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
Create Proc [dbo].[sp_GetDetailsForJob]  
@JobId int  
As   
Begin  
select J.Job_Position,S.Subject,Sl.Level,Sl.No_of_Question,Sl.CutOffMarks,Sl.Duration  from tb_SubjectLevel Sl join tb_JobPosition  
 J on  Sl.appliedfor=J.Key_ID Join tb_Subject S on sl.Subject_ID=S.KeyID  
 Where J.Key_ID=@JobId  
 End
GO
/****** Object:  StoredProcedure [dbo].[Sp_GetJobs]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE Procedure [dbo].[Sp_GetJobs] 
 As 
 Begin
 Select '0' as Key_ID,'All' as Job_Position
 Union
 Select Key_ID,Job_Position from tb_jobposition
 End
GO
/****** Object:  StoredProcedure [dbo].[sp_getoptionsRequired]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Proc [dbo].[sp_getoptionsRequired]
@AppliedFor varchar(40)
as Begin 
select * from tb_JobPosition where key_id= @AppliedFor
End
GO
/****** Object:  StoredProcedure [dbo].[StartCountdownTimer]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[StartCountdownTimer]
    @keyid INT,
    @time INT
AS
BEGIN
    UPDATE tb_candidate
    SET start_time = GETDATE(),
        end_time = DATEADD(MINUTE, @time, GETDATE()),
        remaining_time = @time
    WHERE keyID = @keyid;
END
GO
/****** Object:  StoredProcedure [dbo].[Unlock_User]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[Unlock_User]
	@id varchar(50)
AS
BEGIN


	update tb_candidate set Islocked=1 where KeyID in (select item from dbo.[SplitStringToTable] (@id,','))
END
GO
/****** Object:  StoredProcedure [dbo].[unlockCandiadtes]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  procedure [dbo].[unlockCandiadtes] (@keyid varchar(11)) as
BEGIN 
update tb_Candidate 
set 
Islocked = 1
where keyID = @keyid
END
GO
/****** Object:  StoredProcedure [dbo].[update_ans_candidate]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





create procedure [dbo].[update_ans_candidate] @question_id varchar(10) , @answer varchar(100),@subject_id varchar(10),@user_id varchar(11)
as
BEGIN
if (@answer != 'NULL')
BEGIN

update tb_result
set 
Answer = @answer,
score = 
case 
when @answer = (select q.Answer from tb_result r
inner join [dbo].[tb_Question] q
on r.Question_ID = q.KeyID 
where q.KeyID = @question_id and r.Candidate_id = @user_id) then 1
else 0
end,
isattended = 1
where candidate_id = @user_id and
Question_ID = @question_id and
Subject_ID  = @subject_id

END

else 
BEGIN

update tb_result
set 
Answer = NUll,
score = 0,
isattended = 0
where candidate_id = @user_id and
Question_ID = @question_id and
Subject_ID  = @subject_id

END

END
GO
/****** Object:  StoredProcedure [dbo].[update_tb_candidate_status]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[update_tb_candidate_status] @keyid varchar(11) ,@status varchar(10) = NULL 
 as
 BEGIN
 IF (@status = 'PASS')
 BEGIN 
 update tb_candidate
 set 
 status = @status
 where keyid = @keyid
 END
 ELSE
 BEGIN
  update tb_candidate
 set 
 status = @status,
 Islocked = 0
 where keyid = @keyid
 END
 END
GO
/****** Object:  StoredProcedure [dbo].[updateJobPosition]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[updateJobPosition](
@Key_ID int,
@Job_Position varchar(100),
@IsoptionRequired bit,
@IsBondRequired bit
)
as 
begin

update tb_JobPosition set Job_Position=@Job_Position,IsoptionRequired=@IsoptionRequired,IsBondRequired=@IsBondRequired where Key_ID=@Key_ID
end
GO
/****** Object:  StoredProcedure [dbo].[updatephone]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[updatephone]
    @Email VARCHAR(100),
	@Phone INT
AS
BEGIN
		 UPDATE tb_Candidate 
	SET 
		Phone = @Phone
	WHERE Email=@Email
END
GO
/****** Object:  StoredProcedure [dbo].[updateQuestiondata]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[updateQuestiondata](
@KeyID int,
@Subject_ID int,
@Level_ID int,
@Questions varchar(max),
@Option1 varchar(500),
@Option2 varchar(500),
@Option3 varchar(500),
@Option4 varchar(500),
@Answer varchar(500)
)
as 
begin

update [tb_Question] set Subject_ID=@Subject_ID,Level_ID=@Level_ID,Questions=@Questions,Option1=@Option1,Option2=@Option2,Option3=@Option3,Option4=@Option4,Answer=@Answer where KeyID=@KeyID
end
GO
/****** Object:  StoredProcedure [dbo].[updateSubject]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[updateSubject](
@KeyID int,
@subject varchar(100)
)
as 
begin

update tb_Subject set subject=@subject where KeyID=@KeyID
end
drop procedure updateData
GO
/****** Object:  StoredProcedure [dbo].[updateSubjectlevel]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[updateSubjectlevel](
@KeyID int,
@Subject_ID int,
@AppliedFor varchar(100),
@Level int,
@No_of_Question int,
@CutOffMarks int,
@Duration int
--@IsMandatory bit,
--@OptionalGroupName varchar(100)
)
as 
begin

update [tb_SubjectLevel] set AppliedFor=@AppliedFor,Subject_ID=@Subject_ID,Level=@Level,No_of_Question=@No_of_Question,CutOffMarks=@CutOffMarks,Duration=@Duration where KeyID=@KeyID

end
GO
/****** Object:  StoredProcedure [dbo].[Uservalidation]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  <Author,,Name>  
-- Create date: <Create Date,,>  
-- Description: <Description,,>  
-- =============================================  
CREATE PROCEDURE [dbo].[Uservalidation]  
@user varchar(10),  
@password varchar(10)  
   
AS  
BEGIN  
 if exists(
 Select 1 from tb_Candidate where KeyID=@user and Password=@password and Islocked=1 and Islogged=0  and isnull(IsLevel1_Skiiped,0)=0)  
 begin  
 select '1'  
 end  
 else if exists(Select 1 from tb_Candidate where KeyID=@user and Password=@password and Islocked=1 and Islogged=0  and IsLevel1_Skiiped=1)  
 begin  
 select '2'  
 end  
 else  
 begin  
 select '0'  
 end  
  
END  



select * from tb_Candidate
GO
/****** Object:  StoredProcedure [dbo].[view_results_bycandidate]    Script Date: 14-09-2023 12:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create   procedure [dbo].[view_results_bycandidate]
	@applied_for varchar(20) = Null ,
	@level varchar(10) = NULL,
	@status varchar(10) = NUll,
	@start_date date = NULL,
	@end_date date = NULL
	as 
	BEGIN
with cte as (
 SELECT 
    Candidate_id, 
    level, 
    CASE 
        WHEN SUM(CASE WHEN status = 'FAIL' THEN 1 ELSE 0 END) > 0 THEN 'FAIL'
        ELSE 'PASS'
    END AS status,
	CreatedDate
FROM 
    tb_Subject_Result 
	--where Candidate_id = @candidate_id
GROUP BY 
    Candidate_id, 
    level,CreatedDate) 
	SELECT 
	concat(b.First_Name,' ',b.last_name) as candidate_name,
	c.Job_Position,
    a.Candidate_id, 
    a.level, 
    CASE 
        WHEN SUM(CASE WHEN a.status = 'FAIL' THEN 1 ELSE 0 END) > 0 THEN 'FAIL'
        ELSE 'PASS'
    END AS resultstatus,
	a.CreatedDate
FROM 
    cte a join tb_Candidate b on a.Candidate_id = b.KeyID join tb_JobPosition c on c.Key_ID = b.Applied_For
	where (c.Job_Position = @applied_for or @applied_for is null)
	and (a.level = @level or @level is NUll)
	and (a.status = @status or @status is NULL )
	and (CAST(a.CreatedDate AS date) >= @start_date or @start_date is null)
	and (CAST(a.CreatedDate AS date) <= @end_date or @end_date is null ) 
GROUP BY 
    a.Candidate_id, 
    a.level,
	a.CreatedDate,
	b.First_Name,b.Last_Name,
	c.Job_Position
order by a.CreatedDate asc
end
GO
ALTER DATABASE [OLT_DEV] SET  READ_WRITE 
GO
